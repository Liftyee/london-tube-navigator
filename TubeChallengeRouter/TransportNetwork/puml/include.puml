@startuml
struct Route {
    + TargetStations : List<string>
    + InterStations : List<List<string>>
    + Count : int <<get>>
    + Cost : int <<get>>
    + Duration : int <<get>>
    + Route(stations:List<string>, cost:int, intermediateStations:List<List<string>>?)
    + Route(stations:List<string>)
    + <<override>> ToString() : string
    + UpdateCost(newCost:int) : void
    - InterStationCount() : int
    + InterCount : int <<get>>
}
class Station {
    + <<readonly>> Name : string?
    - _links : HashSet<Link>
    + <<readonly>> NaptanId : string
    + Station(naptan:string)
    + Station(naptan:string, name:string)
    + AddLink(newLink:Link) : void
    + GetLinks() : List<Link>
    + CostTo(destId:string) : int
    + HasLink(destId:string) : bool
    <<internal>> GetLinkByDestId(id:string) : Link
    + ModifyLink(lineId:string, destId:string, newTime:TimeSpan) : void
    + ModifyLink(destId:string, newTime:TimeSpan) : void
}
interface INetworkDataSource {
    + PopulateNetworkStructure(network:Network) : void
    + SetProgressCallback(callback:Action<double>) : void
}
enum NetworkType {
    Floyd,
    Dijkstra,
}
class NetworkFactory {
    - _dataSource : INetworkDataSource
    + NetworkFactory(dataSource:INetworkDataSource)
    + Generate(type:NetworkType, logger:ILogger) : Network
}
class DijkstraCostNetwork {
    + DijkstraCostNetwork(logger:ILogger)
    - _costCache : Dictionary<string, Dictionary<string, int?>>
    - _pathCache : Dictionary<string, Dictionary<string, List<string>>>
    <<internal>> <<override>> Initialise() : void
    + <<override>> CostFunction(startId:string, endId:string, path:List<string>) : int
    + <<override>> CostFunction(startId:string, endId:string) : int
    - DijkstraLookup(startId:string, endId:string, path:List<string>) : int
    + <<override>> Swap(route:Route, idxA:int, idxB:int) : void
    + <<override>> TakeAndInsert(route:Route, takeFrom:int, insertBefore:int) : void
    - UpdatePath(route:Route, idxA:int) : int
}
struct DijkstraNode {
    + <<readonly>> StationId : string
    + <<readonly>> Cost : int
    + CompareTo(other:DijkstraNode) : int
    + DijkstraNode(stationId:string, cost:int)
}
Network <|-- DijkstraCostNetwork
DijkstraCostNetwork +-- DijkstraNode
"IComparable`1" "<DijkstraNode>" <|-- DijkstraNode
enum Dir {
    Inbound,
    Outbound,
    Bidirectional,
}
class Line {
    + <<readonly>> Name : string
    + <<readonly>> Id : string
    + Line(id:string, name:string)
}
struct Link {
    + <<readonly>> Destination : Station
    <<internal>> Duration : TimeSpan <<get>>
    <<internal>> Line : Line? <<get>>
    <<internal>> Dir : Dir <<get>>
    + Link(end:Station, line:Line?, dir:Dir)
    <<internal>> SetDuration(duration:TimeSpan) : void
    <<internal>> SetLine(line:Line) : void
    + GetCost() : int
}
abstract class Network {
    # Stations : Dictionary<string, Station>
    # Lines : Dictionary<string, Line>
    # Logger : ILogger
    # NEdges : int
    # <<const>> InfCost : int = 1000000000
    + Network(logger:ILogger)
    <<internal>> <<virtual>> Initialise() : void
    + AddStationId(naptanId:string, name:string?) : void
    + LinkStationsPartial(startId:string, endId:string, direction:Dir, lineId:string?) : void
    + UpdateLink(startId:string, endId:string, newTime:TimeSpan) : void
    + HasStationById(id:string) : bool
    + AddLine(id:string, name:string) : void
    + <<override>> ToString() : string
    + GetStationIDs() : List<string>
    + {abstract} CostFunction(startId:string, endId:string, path:List<string>) : int
    + {abstract} CostFunction(startId:string, endId:string) : int
    + <<virtual>> GenerateRandomRoute() : Route
    + <<virtual>> CostFunction(route:Route) : int
    + <<virtual>> CostFunction(route:Route, idxA:int, idxB:int) : int
    + RouteToStringStationSeq(route:Route) : string
    + RouteDetailsToStream(route:Route, outStream:Stream) : void
    + <<virtual>> Swap(route:Route, idxA:int, idxB:int) : void
    + <<virtual>> TakeAndInsert(route:Route, takeFrom:int, insertBefore:int) : void
    + RecalculateRouteData(route:Route) : void
    + GetStationName(id:string) : string
}
class FloydCostNetwork {
    - _costMatrix : Dictionary<string, Dictionary<string, int>>
    + FloydCostNetwork(logger:ILogger)
    <<internal>> <<override>> Initialise() : void
    + <<override>> CostFunction(startId:string, endId:string, path:List<string>) : int
    + <<override>> CostFunction(startId:string, endId:string) : int
    - PreprocessFloyd() : void
    + EnumerateCostMatrix() : string
}
Network <|-- FloydCostNetwork
@enduml
