/* 
 * Transport for London Unified API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing LineApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class LineApiTests
    {
        private LineApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new LineApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of LineApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' LineApi
            //Assert.IsInstanceOfType(typeof(LineApi), instance, "instance is a LineApi");
        }

        
        /// <summary>
        /// Test LineArrivals
        /// </summary>
        [Test]
        public void LineArrivalsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> ids = null;
            //string stopPointId = null;
            //string direction = null;
            //string destinationStationId = null;
            //var response = instance.LineArrivals(ids, stopPointId, direction, destinationStationId);
            //Assert.IsInstanceOf<List<TflApiPresentationEntitiesPrediction>> (response, "response is List<TflApiPresentationEntitiesPrediction>");
        }
        
        /// <summary>
        /// Test LineDisruption
        /// </summary>
        [Test]
        public void LineDisruptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> ids = null;
            //var response = instance.LineDisruption(ids);
            //Assert.IsInstanceOf<List<TflApiPresentationEntitiesDisruption>> (response, "response is List<TflApiPresentationEntitiesDisruption>");
        }
        
        /// <summary>
        /// Test LineDisruptionByMode
        /// </summary>
        [Test]
        public void LineDisruptionByModeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> modes = null;
            //var response = instance.LineDisruptionByMode(modes);
            //Assert.IsInstanceOf<List<TflApiPresentationEntitiesDisruption>> (response, "response is List<TflApiPresentationEntitiesDisruption>");
        }
        
        /// <summary>
        /// Test LineGet
        /// </summary>
        [Test]
        public void LineGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> ids = null;
            //var response = instance.LineGet(ids);
            //Assert.IsInstanceOf<List<TflApiPresentationEntitiesLine>> (response, "response is List<TflApiPresentationEntitiesLine>");
        }
        
        /// <summary>
        /// Test LineGetByMode
        /// </summary>
        [Test]
        public void LineGetByModeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> modes = null;
            //var response = instance.LineGetByMode(modes);
            //Assert.IsInstanceOf<List<TflApiPresentationEntitiesLine>> (response, "response is List<TflApiPresentationEntitiesLine>");
        }
        
        /// <summary>
        /// Test LineLineRoutesByIds
        /// </summary>
        [Test]
        public void LineLineRoutesByIdsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> ids = null;
            //List<string> serviceTypes = null;
            //var response = instance.LineLineRoutesByIds(ids, serviceTypes);
            //Assert.IsInstanceOf<List<TflApiPresentationEntitiesLine>> (response, "response is List<TflApiPresentationEntitiesLine>");
        }
        
        /// <summary>
        /// Test LineMetaDisruptionCategories
        /// </summary>
        [Test]
        public void LineMetaDisruptionCategoriesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.LineMetaDisruptionCategories();
            //Assert.IsInstanceOf<List<string>> (response, "response is List<string>");
        }
        
        /// <summary>
        /// Test LineMetaModes
        /// </summary>
        [Test]
        public void LineMetaModesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.LineMetaModes();
            //Assert.IsInstanceOf<List<TflApiPresentationEntitiesMode>> (response, "response is List<TflApiPresentationEntitiesMode>");
        }
        
        /// <summary>
        /// Test LineMetaServiceTypes
        /// </summary>
        [Test]
        public void LineMetaServiceTypesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.LineMetaServiceTypes();
            //Assert.IsInstanceOf<List<string>> (response, "response is List<string>");
        }
        
        /// <summary>
        /// Test LineMetaSeverity
        /// </summary>
        [Test]
        public void LineMetaSeverityTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.LineMetaSeverity();
            //Assert.IsInstanceOf<List<TflApiPresentationEntitiesStatusSeverity>> (response, "response is List<TflApiPresentationEntitiesStatusSeverity>");
        }
        
        /// <summary>
        /// Test LineRoute
        /// </summary>
        [Test]
        public void LineRouteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> serviceTypes = null;
            //var response = instance.LineRoute(serviceTypes);
            //Assert.IsInstanceOf<List<TflApiPresentationEntitiesLine>> (response, "response is List<TflApiPresentationEntitiesLine>");
        }
        
        /// <summary>
        /// Test LineRouteByMode
        /// </summary>
        [Test]
        public void LineRouteByModeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> modes = null;
            //List<string> serviceTypes = null;
            //var response = instance.LineRouteByMode(modes, serviceTypes);
            //Assert.IsInstanceOf<List<TflApiPresentationEntitiesLine>> (response, "response is List<TflApiPresentationEntitiesLine>");
        }
        
        /// <summary>
        /// Test LineRouteSequence
        /// </summary>
        [Test]
        public void LineRouteSequenceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string direction = null;
            //List<string> serviceTypes = null;
            //bool? excludeCrowding = null;
            //var response = instance.LineRouteSequence(id, direction, serviceTypes, excludeCrowding);
            //Assert.IsInstanceOf<TflApiPresentationEntitiesRouteSequence> (response, "response is TflApiPresentationEntitiesRouteSequence");
        }
        
        /// <summary>
        /// Test LineSearch
        /// </summary>
        [Test]
        public void LineSearchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string query = null;
            //List<string> modes = null;
            //List<string> serviceTypes = null;
            //var response = instance.LineSearch(query, modes, serviceTypes);
            //Assert.IsInstanceOf<TflApiPresentationEntitiesRouteSearchResponse> (response, "response is TflApiPresentationEntitiesRouteSearchResponse");
        }
        
        /// <summary>
        /// Test LineStatus
        /// </summary>
        [Test]
        public void LineStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> ids = null;
            //string startDate = null;
            //string endDate = null;
            //bool? detail = null;
            //DateTime? dateRangeStartDate = null;
            //DateTime? dateRangeEndDate = null;
            //var response = instance.LineStatus(ids, startDate, endDate, detail, dateRangeStartDate, dateRangeEndDate);
            //Assert.IsInstanceOf<List<TflApiPresentationEntitiesLine>> (response, "response is List<TflApiPresentationEntitiesLine>");
        }
        
        /// <summary>
        /// Test LineStatusByIds
        /// </summary>
        [Test]
        public void LineStatusByIdsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> ids = null;
            //bool? detail = null;
            //var response = instance.LineStatusByIds(ids, detail);
            //Assert.IsInstanceOf<List<TflApiPresentationEntitiesLine>> (response, "response is List<TflApiPresentationEntitiesLine>");
        }
        
        /// <summary>
        /// Test LineStatusByMode
        /// </summary>
        [Test]
        public void LineStatusByModeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> modes = null;
            //bool? detail = null;
            //string severityLevel = null;
            //var response = instance.LineStatusByMode(modes, detail, severityLevel);
            //Assert.IsInstanceOf<List<TflApiPresentationEntitiesLine>> (response, "response is List<TflApiPresentationEntitiesLine>");
        }
        
        /// <summary>
        /// Test LineStatusBySeverity
        /// </summary>
        [Test]
        public void LineStatusBySeverityTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? severity = null;
            //var response = instance.LineStatusBySeverity(severity);
            //Assert.IsInstanceOf<List<TflApiPresentationEntitiesLine>> (response, "response is List<TflApiPresentationEntitiesLine>");
        }
        
        /// <summary>
        /// Test LineStopPoints
        /// </summary>
        [Test]
        public void LineStopPointsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //bool? tflOperatedNationalRailStationsOnly = null;
            //var response = instance.LineStopPoints(id, tflOperatedNationalRailStationsOnly);
            //Assert.IsInstanceOf<List<TflApiPresentationEntitiesStopPoint>> (response, "response is List<TflApiPresentationEntitiesStopPoint>");
        }
        
        /// <summary>
        /// Test LineTimetable
        /// </summary>
        [Test]
        public void LineTimetableTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fromStopPointId = null;
            //string id = null;
            //var response = instance.LineTimetable(fromStopPointId, id);
            //Assert.IsInstanceOf<TflApiPresentationEntitiesTimetableResponse> (response, "response is TflApiPresentationEntitiesTimetableResponse");
        }
        
        /// <summary>
        /// Test LineTimetableTo
        /// </summary>
        [Test]
        public void LineTimetableToTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fromStopPointId = null;
            //string id = null;
            //string toStopPointId = null;
            //var response = instance.LineTimetableTo(fromStopPointId, id, toStopPointId);
            //Assert.IsInstanceOf<TflApiPresentationEntitiesTimetableResponse> (response, "response is TflApiPresentationEntitiesTimetableResponse");
        }
        
    }

}
