/* 
 * Transport for London Unified API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IJourneyApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Perform a Journey Planner search from the parameters specified in simple types
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">Origin of the journey. Can be WGS84 coordinates expressed as \&quot;lat,long\&quot;, a UK postcode, a Naptan (StopPoint) id, an ICS StopId, or a free-text string (will cause disambiguation unless it exactly matches a point of interest name).</param>
        /// <param name="to">Destination of the journey. Can be WGS84 coordinates expressed as \&quot;lat,long\&quot;, a UK postcode, a Naptan (StopPoint) id, an ICS StopId, or a free-text string (will cause disambiguation unless it exactly matches a point of interest name).</param>
        /// <param name="via">Travel through point on the journey. Can be WGS84 coordinates expressed as \&quot;lat,long\&quot;, a UK postcode, a Naptan (StopPoint) id, an ICS StopId, or a free-text string (will cause disambiguation unless it exactly matches a point of interest name). (optional)</param>
        /// <param name="nationalSearch">Does the journey cover stops outside London? eg. \&quot;nationalSearch&#x3D;true\&quot; (optional)</param>
        /// <param name="date">The date must be in yyyyMMdd format (optional)</param>
        /// <param name="time">The time must be in HHmm format (optional)</param>
        /// <param name="timeIs">Does the time given relate to arrival or leaving time? Possible options: \&quot;departing\&quot; | \&quot;arriving\&quot; (optional)</param>
        /// <param name="journeyPreference">The journey preference eg possible options: \&quot;leastinterchange\&quot; | \&quot;leasttime\&quot; | \&quot;leastwalking\&quot; (optional)</param>
        /// <param name="mode">The mode must be a comma separated list of modes. eg possible options: \&quot;public-bus,overground,train,tube,coach,dlr,cablecar,tram,river,walking,cycle\&quot; (optional)</param>
        /// <param name="accessibilityPreference">The accessibility preference must be a comma separated list eg. \&quot;noSolidStairs,noEscalators,noElevators,stepFreeToVehicle,stepFreeToPlatform\&quot; (optional)</param>
        /// <param name="fromName">An optional name to associate with the origin of the journey in the results. (optional)</param>
        /// <param name="toName">An optional name to associate with the destination of the journey in the results. (optional)</param>
        /// <param name="viaName">An optional name to associate with the via point of the journey in the results. (optional)</param>
        /// <param name="maxTransferMinutes">The max walking time in minutes for transfer eg. \&quot;120\&quot; (optional)</param>
        /// <param name="maxWalkingMinutes">The max walking time in minutes for journeys eg. \&quot;120\&quot; (optional)</param>
        /// <param name="walkingSpeed">The walking speed. eg possible options: \&quot;slow\&quot; | \&quot;average\&quot; | \&quot;fast\&quot;. (optional)</param>
        /// <param name="cyclePreference">The cycle preference. eg possible options: \&quot;allTheWay\&quot; | \&quot;leaveAtStation\&quot; | \&quot;takeOnTransport\&quot; | \&quot;cycleHire\&quot; (optional)</param>
        /// <param name="adjustment">Time adjustment command. eg possible options: \&quot;TripFirst\&quot; | \&quot;TripLast\&quot; (optional)</param>
        /// <param name="bikeProficiency">A comma separated list of cycling proficiency levels. eg possible options: \&quot;easy,moderate,fast\&quot; (optional)</param>
        /// <param name="alternativeCycle">Option to determine whether to return alternative cycling journey (optional)</param>
        /// <param name="alternativeWalking">Option to determine whether to return alternative walking journey (optional)</param>
        /// <param name="applyHtmlMarkup">Flag to determine whether certain text (e.g. walking instructions) should be output with HTML tags or not. (optional)</param>
        /// <param name="useMultiModalCall">A boolean to indicate whether or not to return 3 public transport journeys, a bus journey, a cycle hire journey, a personal cycle journey and a walking journey (optional)</param>
        /// <param name="walkingOptimization">A boolean to indicate whether to optimize journeys using walking (optional)</param>
        /// <param name="taxiOnlyTrip">A boolean to indicate whether to return one or more taxi journeys. Note, setting this to true will override \&quot;useMultiModalCall\&quot;. (optional)</param>
        /// <param name="routeBetweenEntrances">A boolean to indicate whether public transport routes should include directions between platforms and station entrances. (optional)</param>
        /// <param name="useRealTimeLiveArrivals">A boolean to indicate if we want to receive real time live arrivals data where available. (optional)</param>
        /// <param name="calcOneDirection">A boolean to make Journey Planner calculate journeys in one temporal direction only. In other words, only calculate journeys after the &#39;depart&#39; time, or before the &#39;arrive&#39; time. By default, the Journey Planner engine (EFA) calculates journeys in both temporal directions. (optional)</param>
        /// <param name="includeAlternativeRoutes">A boolean to make Journey Planner return alternative routes. Alternative routes are calculated by removing one or more lines included in the fastest route and re-calculating. By default, these journeys will not be returned. (optional)</param>
        /// <param name="overrideMultiModalScenario">An optional integer to indicate what multi modal scenario we want to use. (optional)</param>
        /// <returns>TflApiPresentationEntitiesJourneyPlannerItineraryResult</returns>
        TflApiPresentationEntitiesJourneyPlannerItineraryResult JourneyJourneyResults (string from, string to, string via = null, bool? nationalSearch = null, string date = null, string time = null, string timeIs = null, string journeyPreference = null, List<string> mode = null, List<string> accessibilityPreference = null, string fromName = null, string toName = null, string viaName = null, string maxTransferMinutes = null, string maxWalkingMinutes = null, string walkingSpeed = null, string cyclePreference = null, string adjustment = null, List<string> bikeProficiency = null, bool? alternativeCycle = null, bool? alternativeWalking = null, bool? applyHtmlMarkup = null, bool? useMultiModalCall = null, bool? walkingOptimization = null, bool? taxiOnlyTrip = null, bool? routeBetweenEntrances = null, bool? useRealTimeLiveArrivals = null, bool? calcOneDirection = null, bool? includeAlternativeRoutes = null, int? overrideMultiModalScenario = null);

        /// <summary>
        /// Perform a Journey Planner search from the parameters specified in simple types
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">Origin of the journey. Can be WGS84 coordinates expressed as \&quot;lat,long\&quot;, a UK postcode, a Naptan (StopPoint) id, an ICS StopId, or a free-text string (will cause disambiguation unless it exactly matches a point of interest name).</param>
        /// <param name="to">Destination of the journey. Can be WGS84 coordinates expressed as \&quot;lat,long\&quot;, a UK postcode, a Naptan (StopPoint) id, an ICS StopId, or a free-text string (will cause disambiguation unless it exactly matches a point of interest name).</param>
        /// <param name="via">Travel through point on the journey. Can be WGS84 coordinates expressed as \&quot;lat,long\&quot;, a UK postcode, a Naptan (StopPoint) id, an ICS StopId, or a free-text string (will cause disambiguation unless it exactly matches a point of interest name). (optional)</param>
        /// <param name="nationalSearch">Does the journey cover stops outside London? eg. \&quot;nationalSearch&#x3D;true\&quot; (optional)</param>
        /// <param name="date">The date must be in yyyyMMdd format (optional)</param>
        /// <param name="time">The time must be in HHmm format (optional)</param>
        /// <param name="timeIs">Does the time given relate to arrival or leaving time? Possible options: \&quot;departing\&quot; | \&quot;arriving\&quot; (optional)</param>
        /// <param name="journeyPreference">The journey preference eg possible options: \&quot;leastinterchange\&quot; | \&quot;leasttime\&quot; | \&quot;leastwalking\&quot; (optional)</param>
        /// <param name="mode">The mode must be a comma separated list of modes. eg possible options: \&quot;public-bus,overground,train,tube,coach,dlr,cablecar,tram,river,walking,cycle\&quot; (optional)</param>
        /// <param name="accessibilityPreference">The accessibility preference must be a comma separated list eg. \&quot;noSolidStairs,noEscalators,noElevators,stepFreeToVehicle,stepFreeToPlatform\&quot; (optional)</param>
        /// <param name="fromName">An optional name to associate with the origin of the journey in the results. (optional)</param>
        /// <param name="toName">An optional name to associate with the destination of the journey in the results. (optional)</param>
        /// <param name="viaName">An optional name to associate with the via point of the journey in the results. (optional)</param>
        /// <param name="maxTransferMinutes">The max walking time in minutes for transfer eg. \&quot;120\&quot; (optional)</param>
        /// <param name="maxWalkingMinutes">The max walking time in minutes for journeys eg. \&quot;120\&quot; (optional)</param>
        /// <param name="walkingSpeed">The walking speed. eg possible options: \&quot;slow\&quot; | \&quot;average\&quot; | \&quot;fast\&quot;. (optional)</param>
        /// <param name="cyclePreference">The cycle preference. eg possible options: \&quot;allTheWay\&quot; | \&quot;leaveAtStation\&quot; | \&quot;takeOnTransport\&quot; | \&quot;cycleHire\&quot; (optional)</param>
        /// <param name="adjustment">Time adjustment command. eg possible options: \&quot;TripFirst\&quot; | \&quot;TripLast\&quot; (optional)</param>
        /// <param name="bikeProficiency">A comma separated list of cycling proficiency levels. eg possible options: \&quot;easy,moderate,fast\&quot; (optional)</param>
        /// <param name="alternativeCycle">Option to determine whether to return alternative cycling journey (optional)</param>
        /// <param name="alternativeWalking">Option to determine whether to return alternative walking journey (optional)</param>
        /// <param name="applyHtmlMarkup">Flag to determine whether certain text (e.g. walking instructions) should be output with HTML tags or not. (optional)</param>
        /// <param name="useMultiModalCall">A boolean to indicate whether or not to return 3 public transport journeys, a bus journey, a cycle hire journey, a personal cycle journey and a walking journey (optional)</param>
        /// <param name="walkingOptimization">A boolean to indicate whether to optimize journeys using walking (optional)</param>
        /// <param name="taxiOnlyTrip">A boolean to indicate whether to return one or more taxi journeys. Note, setting this to true will override \&quot;useMultiModalCall\&quot;. (optional)</param>
        /// <param name="routeBetweenEntrances">A boolean to indicate whether public transport routes should include directions between platforms and station entrances. (optional)</param>
        /// <param name="useRealTimeLiveArrivals">A boolean to indicate if we want to receive real time live arrivals data where available. (optional)</param>
        /// <param name="calcOneDirection">A boolean to make Journey Planner calculate journeys in one temporal direction only. In other words, only calculate journeys after the &#39;depart&#39; time, or before the &#39;arrive&#39; time. By default, the Journey Planner engine (EFA) calculates journeys in both temporal directions. (optional)</param>
        /// <param name="includeAlternativeRoutes">A boolean to make Journey Planner return alternative routes. Alternative routes are calculated by removing one or more lines included in the fastest route and re-calculating. By default, these journeys will not be returned. (optional)</param>
        /// <param name="overrideMultiModalScenario">An optional integer to indicate what multi modal scenario we want to use. (optional)</param>
        /// <returns>ApiResponse of TflApiPresentationEntitiesJourneyPlannerItineraryResult</returns>
        ApiResponse<TflApiPresentationEntitiesJourneyPlannerItineraryResult> JourneyJourneyResultsWithHttpInfo (string from, string to, string via = null, bool? nationalSearch = null, string date = null, string time = null, string timeIs = null, string journeyPreference = null, List<string> mode = null, List<string> accessibilityPreference = null, string fromName = null, string toName = null, string viaName = null, string maxTransferMinutes = null, string maxWalkingMinutes = null, string walkingSpeed = null, string cyclePreference = null, string adjustment = null, List<string> bikeProficiency = null, bool? alternativeCycle = null, bool? alternativeWalking = null, bool? applyHtmlMarkup = null, bool? useMultiModalCall = null, bool? walkingOptimization = null, bool? taxiOnlyTrip = null, bool? routeBetweenEntrances = null, bool? useRealTimeLiveArrivals = null, bool? calcOneDirection = null, bool? includeAlternativeRoutes = null, int? overrideMultiModalScenario = null);
        /// <summary>
        /// Gets a list of all of the available journey planner modes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TflApiPresentationEntitiesMode&gt;</returns>
        List<TflApiPresentationEntitiesMode> JourneyMeta ();

        /// <summary>
        /// Gets a list of all of the available journey planner modes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TflApiPresentationEntitiesMode&gt;</returns>
        ApiResponse<List<TflApiPresentationEntitiesMode>> JourneyMetaWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Perform a Journey Planner search from the parameters specified in simple types
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">Origin of the journey. Can be WGS84 coordinates expressed as \&quot;lat,long\&quot;, a UK postcode, a Naptan (StopPoint) id, an ICS StopId, or a free-text string (will cause disambiguation unless it exactly matches a point of interest name).</param>
        /// <param name="to">Destination of the journey. Can be WGS84 coordinates expressed as \&quot;lat,long\&quot;, a UK postcode, a Naptan (StopPoint) id, an ICS StopId, or a free-text string (will cause disambiguation unless it exactly matches a point of interest name).</param>
        /// <param name="via">Travel through point on the journey. Can be WGS84 coordinates expressed as \&quot;lat,long\&quot;, a UK postcode, a Naptan (StopPoint) id, an ICS StopId, or a free-text string (will cause disambiguation unless it exactly matches a point of interest name). (optional)</param>
        /// <param name="nationalSearch">Does the journey cover stops outside London? eg. \&quot;nationalSearch&#x3D;true\&quot; (optional)</param>
        /// <param name="date">The date must be in yyyyMMdd format (optional)</param>
        /// <param name="time">The time must be in HHmm format (optional)</param>
        /// <param name="timeIs">Does the time given relate to arrival or leaving time? Possible options: \&quot;departing\&quot; | \&quot;arriving\&quot; (optional)</param>
        /// <param name="journeyPreference">The journey preference eg possible options: \&quot;leastinterchange\&quot; | \&quot;leasttime\&quot; | \&quot;leastwalking\&quot; (optional)</param>
        /// <param name="mode">The mode must be a comma separated list of modes. eg possible options: \&quot;public-bus,overground,train,tube,coach,dlr,cablecar,tram,river,walking,cycle\&quot; (optional)</param>
        /// <param name="accessibilityPreference">The accessibility preference must be a comma separated list eg. \&quot;noSolidStairs,noEscalators,noElevators,stepFreeToVehicle,stepFreeToPlatform\&quot; (optional)</param>
        /// <param name="fromName">An optional name to associate with the origin of the journey in the results. (optional)</param>
        /// <param name="toName">An optional name to associate with the destination of the journey in the results. (optional)</param>
        /// <param name="viaName">An optional name to associate with the via point of the journey in the results. (optional)</param>
        /// <param name="maxTransferMinutes">The max walking time in minutes for transfer eg. \&quot;120\&quot; (optional)</param>
        /// <param name="maxWalkingMinutes">The max walking time in minutes for journeys eg. \&quot;120\&quot; (optional)</param>
        /// <param name="walkingSpeed">The walking speed. eg possible options: \&quot;slow\&quot; | \&quot;average\&quot; | \&quot;fast\&quot;. (optional)</param>
        /// <param name="cyclePreference">The cycle preference. eg possible options: \&quot;allTheWay\&quot; | \&quot;leaveAtStation\&quot; | \&quot;takeOnTransport\&quot; | \&quot;cycleHire\&quot; (optional)</param>
        /// <param name="adjustment">Time adjustment command. eg possible options: \&quot;TripFirst\&quot; | \&quot;TripLast\&quot; (optional)</param>
        /// <param name="bikeProficiency">A comma separated list of cycling proficiency levels. eg possible options: \&quot;easy,moderate,fast\&quot; (optional)</param>
        /// <param name="alternativeCycle">Option to determine whether to return alternative cycling journey (optional)</param>
        /// <param name="alternativeWalking">Option to determine whether to return alternative walking journey (optional)</param>
        /// <param name="applyHtmlMarkup">Flag to determine whether certain text (e.g. walking instructions) should be output with HTML tags or not. (optional)</param>
        /// <param name="useMultiModalCall">A boolean to indicate whether or not to return 3 public transport journeys, a bus journey, a cycle hire journey, a personal cycle journey and a walking journey (optional)</param>
        /// <param name="walkingOptimization">A boolean to indicate whether to optimize journeys using walking (optional)</param>
        /// <param name="taxiOnlyTrip">A boolean to indicate whether to return one or more taxi journeys. Note, setting this to true will override \&quot;useMultiModalCall\&quot;. (optional)</param>
        /// <param name="routeBetweenEntrances">A boolean to indicate whether public transport routes should include directions between platforms and station entrances. (optional)</param>
        /// <param name="useRealTimeLiveArrivals">A boolean to indicate if we want to receive real time live arrivals data where available. (optional)</param>
        /// <param name="calcOneDirection">A boolean to make Journey Planner calculate journeys in one temporal direction only. In other words, only calculate journeys after the &#39;depart&#39; time, or before the &#39;arrive&#39; time. By default, the Journey Planner engine (EFA) calculates journeys in both temporal directions. (optional)</param>
        /// <param name="includeAlternativeRoutes">A boolean to make Journey Planner return alternative routes. Alternative routes are calculated by removing one or more lines included in the fastest route and re-calculating. By default, these journeys will not be returned. (optional)</param>
        /// <param name="overrideMultiModalScenario">An optional integer to indicate what multi modal scenario we want to use. (optional)</param>
        /// <returns>Task of TflApiPresentationEntitiesJourneyPlannerItineraryResult</returns>
        System.Threading.Tasks.Task<TflApiPresentationEntitiesJourneyPlannerItineraryResult> JourneyJourneyResultsAsync (string from, string to, string via = null, bool? nationalSearch = null, string date = null, string time = null, string timeIs = null, string journeyPreference = null, List<string> mode = null, List<string> accessibilityPreference = null, string fromName = null, string toName = null, string viaName = null, string maxTransferMinutes = null, string maxWalkingMinutes = null, string walkingSpeed = null, string cyclePreference = null, string adjustment = null, List<string> bikeProficiency = null, bool? alternativeCycle = null, bool? alternativeWalking = null, bool? applyHtmlMarkup = null, bool? useMultiModalCall = null, bool? walkingOptimization = null, bool? taxiOnlyTrip = null, bool? routeBetweenEntrances = null, bool? useRealTimeLiveArrivals = null, bool? calcOneDirection = null, bool? includeAlternativeRoutes = null, int? overrideMultiModalScenario = null);

        /// <summary>
        /// Perform a Journey Planner search from the parameters specified in simple types
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">Origin of the journey. Can be WGS84 coordinates expressed as \&quot;lat,long\&quot;, a UK postcode, a Naptan (StopPoint) id, an ICS StopId, or a free-text string (will cause disambiguation unless it exactly matches a point of interest name).</param>
        /// <param name="to">Destination of the journey. Can be WGS84 coordinates expressed as \&quot;lat,long\&quot;, a UK postcode, a Naptan (StopPoint) id, an ICS StopId, or a free-text string (will cause disambiguation unless it exactly matches a point of interest name).</param>
        /// <param name="via">Travel through point on the journey. Can be WGS84 coordinates expressed as \&quot;lat,long\&quot;, a UK postcode, a Naptan (StopPoint) id, an ICS StopId, or a free-text string (will cause disambiguation unless it exactly matches a point of interest name). (optional)</param>
        /// <param name="nationalSearch">Does the journey cover stops outside London? eg. \&quot;nationalSearch&#x3D;true\&quot; (optional)</param>
        /// <param name="date">The date must be in yyyyMMdd format (optional)</param>
        /// <param name="time">The time must be in HHmm format (optional)</param>
        /// <param name="timeIs">Does the time given relate to arrival or leaving time? Possible options: \&quot;departing\&quot; | \&quot;arriving\&quot; (optional)</param>
        /// <param name="journeyPreference">The journey preference eg possible options: \&quot;leastinterchange\&quot; | \&quot;leasttime\&quot; | \&quot;leastwalking\&quot; (optional)</param>
        /// <param name="mode">The mode must be a comma separated list of modes. eg possible options: \&quot;public-bus,overground,train,tube,coach,dlr,cablecar,tram,river,walking,cycle\&quot; (optional)</param>
        /// <param name="accessibilityPreference">The accessibility preference must be a comma separated list eg. \&quot;noSolidStairs,noEscalators,noElevators,stepFreeToVehicle,stepFreeToPlatform\&quot; (optional)</param>
        /// <param name="fromName">An optional name to associate with the origin of the journey in the results. (optional)</param>
        /// <param name="toName">An optional name to associate with the destination of the journey in the results. (optional)</param>
        /// <param name="viaName">An optional name to associate with the via point of the journey in the results. (optional)</param>
        /// <param name="maxTransferMinutes">The max walking time in minutes for transfer eg. \&quot;120\&quot; (optional)</param>
        /// <param name="maxWalkingMinutes">The max walking time in minutes for journeys eg. \&quot;120\&quot; (optional)</param>
        /// <param name="walkingSpeed">The walking speed. eg possible options: \&quot;slow\&quot; | \&quot;average\&quot; | \&quot;fast\&quot;. (optional)</param>
        /// <param name="cyclePreference">The cycle preference. eg possible options: \&quot;allTheWay\&quot; | \&quot;leaveAtStation\&quot; | \&quot;takeOnTransport\&quot; | \&quot;cycleHire\&quot; (optional)</param>
        /// <param name="adjustment">Time adjustment command. eg possible options: \&quot;TripFirst\&quot; | \&quot;TripLast\&quot; (optional)</param>
        /// <param name="bikeProficiency">A comma separated list of cycling proficiency levels. eg possible options: \&quot;easy,moderate,fast\&quot; (optional)</param>
        /// <param name="alternativeCycle">Option to determine whether to return alternative cycling journey (optional)</param>
        /// <param name="alternativeWalking">Option to determine whether to return alternative walking journey (optional)</param>
        /// <param name="applyHtmlMarkup">Flag to determine whether certain text (e.g. walking instructions) should be output with HTML tags or not. (optional)</param>
        /// <param name="useMultiModalCall">A boolean to indicate whether or not to return 3 public transport journeys, a bus journey, a cycle hire journey, a personal cycle journey and a walking journey (optional)</param>
        /// <param name="walkingOptimization">A boolean to indicate whether to optimize journeys using walking (optional)</param>
        /// <param name="taxiOnlyTrip">A boolean to indicate whether to return one or more taxi journeys. Note, setting this to true will override \&quot;useMultiModalCall\&quot;. (optional)</param>
        /// <param name="routeBetweenEntrances">A boolean to indicate whether public transport routes should include directions between platforms and station entrances. (optional)</param>
        /// <param name="useRealTimeLiveArrivals">A boolean to indicate if we want to receive real time live arrivals data where available. (optional)</param>
        /// <param name="calcOneDirection">A boolean to make Journey Planner calculate journeys in one temporal direction only. In other words, only calculate journeys after the &#39;depart&#39; time, or before the &#39;arrive&#39; time. By default, the Journey Planner engine (EFA) calculates journeys in both temporal directions. (optional)</param>
        /// <param name="includeAlternativeRoutes">A boolean to make Journey Planner return alternative routes. Alternative routes are calculated by removing one or more lines included in the fastest route and re-calculating. By default, these journeys will not be returned. (optional)</param>
        /// <param name="overrideMultiModalScenario">An optional integer to indicate what multi modal scenario we want to use. (optional)</param>
        /// <returns>Task of ApiResponse (TflApiPresentationEntitiesJourneyPlannerItineraryResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<TflApiPresentationEntitiesJourneyPlannerItineraryResult>> JourneyJourneyResultsAsyncWithHttpInfo (string from, string to, string via = null, bool? nationalSearch = null, string date = null, string time = null, string timeIs = null, string journeyPreference = null, List<string> mode = null, List<string> accessibilityPreference = null, string fromName = null, string toName = null, string viaName = null, string maxTransferMinutes = null, string maxWalkingMinutes = null, string walkingSpeed = null, string cyclePreference = null, string adjustment = null, List<string> bikeProficiency = null, bool? alternativeCycle = null, bool? alternativeWalking = null, bool? applyHtmlMarkup = null, bool? useMultiModalCall = null, bool? walkingOptimization = null, bool? taxiOnlyTrip = null, bool? routeBetweenEntrances = null, bool? useRealTimeLiveArrivals = null, bool? calcOneDirection = null, bool? includeAlternativeRoutes = null, int? overrideMultiModalScenario = null);
        /// <summary>
        /// Gets a list of all of the available journey planner modes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TflApiPresentationEntitiesMode&gt;</returns>
        System.Threading.Tasks.Task<List<TflApiPresentationEntitiesMode>> JourneyMetaAsync ();

        /// <summary>
        /// Gets a list of all of the available journey planner modes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TflApiPresentationEntitiesMode&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesMode>>> JourneyMetaAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class JourneyApi : IJourneyApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="JourneyApi"/> class.
        /// </summary>
        /// <returns></returns>
        public JourneyApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="JourneyApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public JourneyApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Perform a Journey Planner search from the parameters specified in simple types 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">Origin of the journey. Can be WGS84 coordinates expressed as \&quot;lat,long\&quot;, a UK postcode, a Naptan (StopPoint) id, an ICS StopId, or a free-text string (will cause disambiguation unless it exactly matches a point of interest name).</param>
        /// <param name="to">Destination of the journey. Can be WGS84 coordinates expressed as \&quot;lat,long\&quot;, a UK postcode, a Naptan (StopPoint) id, an ICS StopId, or a free-text string (will cause disambiguation unless it exactly matches a point of interest name).</param>
        /// <param name="via">Travel through point on the journey. Can be WGS84 coordinates expressed as \&quot;lat,long\&quot;, a UK postcode, a Naptan (StopPoint) id, an ICS StopId, or a free-text string (will cause disambiguation unless it exactly matches a point of interest name). (optional)</param>
        /// <param name="nationalSearch">Does the journey cover stops outside London? eg. \&quot;nationalSearch&#x3D;true\&quot; (optional)</param>
        /// <param name="date">The date must be in yyyyMMdd format (optional)</param>
        /// <param name="time">The time must be in HHmm format (optional)</param>
        /// <param name="timeIs">Does the time given relate to arrival or leaving time? Possible options: \&quot;departing\&quot; | \&quot;arriving\&quot; (optional)</param>
        /// <param name="journeyPreference">The journey preference eg possible options: \&quot;leastinterchange\&quot; | \&quot;leasttime\&quot; | \&quot;leastwalking\&quot; (optional)</param>
        /// <param name="mode">The mode must be a comma separated list of modes. eg possible options: \&quot;public-bus,overground,train,tube,coach,dlr,cablecar,tram,river,walking,cycle\&quot; (optional)</param>
        /// <param name="accessibilityPreference">The accessibility preference must be a comma separated list eg. \&quot;noSolidStairs,noEscalators,noElevators,stepFreeToVehicle,stepFreeToPlatform\&quot; (optional)</param>
        /// <param name="fromName">An optional name to associate with the origin of the journey in the results. (optional)</param>
        /// <param name="toName">An optional name to associate with the destination of the journey in the results. (optional)</param>
        /// <param name="viaName">An optional name to associate with the via point of the journey in the results. (optional)</param>
        /// <param name="maxTransferMinutes">The max walking time in minutes for transfer eg. \&quot;120\&quot; (optional)</param>
        /// <param name="maxWalkingMinutes">The max walking time in minutes for journeys eg. \&quot;120\&quot; (optional)</param>
        /// <param name="walkingSpeed">The walking speed. eg possible options: \&quot;slow\&quot; | \&quot;average\&quot; | \&quot;fast\&quot;. (optional)</param>
        /// <param name="cyclePreference">The cycle preference. eg possible options: \&quot;allTheWay\&quot; | \&quot;leaveAtStation\&quot; | \&quot;takeOnTransport\&quot; | \&quot;cycleHire\&quot; (optional)</param>
        /// <param name="adjustment">Time adjustment command. eg possible options: \&quot;TripFirst\&quot; | \&quot;TripLast\&quot; (optional)</param>
        /// <param name="bikeProficiency">A comma separated list of cycling proficiency levels. eg possible options: \&quot;easy,moderate,fast\&quot; (optional)</param>
        /// <param name="alternativeCycle">Option to determine whether to return alternative cycling journey (optional)</param>
        /// <param name="alternativeWalking">Option to determine whether to return alternative walking journey (optional)</param>
        /// <param name="applyHtmlMarkup">Flag to determine whether certain text (e.g. walking instructions) should be output with HTML tags or not. (optional)</param>
        /// <param name="useMultiModalCall">A boolean to indicate whether or not to return 3 public transport journeys, a bus journey, a cycle hire journey, a personal cycle journey and a walking journey (optional)</param>
        /// <param name="walkingOptimization">A boolean to indicate whether to optimize journeys using walking (optional)</param>
        /// <param name="taxiOnlyTrip">A boolean to indicate whether to return one or more taxi journeys. Note, setting this to true will override \&quot;useMultiModalCall\&quot;. (optional)</param>
        /// <param name="routeBetweenEntrances">A boolean to indicate whether public transport routes should include directions between platforms and station entrances. (optional)</param>
        /// <param name="useRealTimeLiveArrivals">A boolean to indicate if we want to receive real time live arrivals data where available. (optional)</param>
        /// <param name="calcOneDirection">A boolean to make Journey Planner calculate journeys in one temporal direction only. In other words, only calculate journeys after the &#39;depart&#39; time, or before the &#39;arrive&#39; time. By default, the Journey Planner engine (EFA) calculates journeys in both temporal directions. (optional)</param>
        /// <param name="includeAlternativeRoutes">A boolean to make Journey Planner return alternative routes. Alternative routes are calculated by removing one or more lines included in the fastest route and re-calculating. By default, these journeys will not be returned. (optional)</param>
        /// <param name="overrideMultiModalScenario">An optional integer to indicate what multi modal scenario we want to use. (optional)</param>
        /// <returns>TflApiPresentationEntitiesJourneyPlannerItineraryResult</returns>
        public TflApiPresentationEntitiesJourneyPlannerItineraryResult JourneyJourneyResults (string from, string to, string via = null, bool? nationalSearch = null, string date = null, string time = null, string timeIs = null, string journeyPreference = null, List<string> mode = null, List<string> accessibilityPreference = null, string fromName = null, string toName = null, string viaName = null, string maxTransferMinutes = null, string maxWalkingMinutes = null, string walkingSpeed = null, string cyclePreference = null, string adjustment = null, List<string> bikeProficiency = null, bool? alternativeCycle = null, bool? alternativeWalking = null, bool? applyHtmlMarkup = null, bool? useMultiModalCall = null, bool? walkingOptimization = null, bool? taxiOnlyTrip = null, bool? routeBetweenEntrances = null, bool? useRealTimeLiveArrivals = null, bool? calcOneDirection = null, bool? includeAlternativeRoutes = null, int? overrideMultiModalScenario = null)
        {
             ApiResponse<TflApiPresentationEntitiesJourneyPlannerItineraryResult> localVarResponse = JourneyJourneyResultsWithHttpInfo(from, to, via, nationalSearch, date, time, timeIs, journeyPreference, mode, accessibilityPreference, fromName, toName, viaName, maxTransferMinutes, maxWalkingMinutes, walkingSpeed, cyclePreference, adjustment, bikeProficiency, alternativeCycle, alternativeWalking, applyHtmlMarkup, useMultiModalCall, walkingOptimization, taxiOnlyTrip, routeBetweenEntrances, useRealTimeLiveArrivals, calcOneDirection, includeAlternativeRoutes, overrideMultiModalScenario);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Perform a Journey Planner search from the parameters specified in simple types 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">Origin of the journey. Can be WGS84 coordinates expressed as \&quot;lat,long\&quot;, a UK postcode, a Naptan (StopPoint) id, an ICS StopId, or a free-text string (will cause disambiguation unless it exactly matches a point of interest name).</param>
        /// <param name="to">Destination of the journey. Can be WGS84 coordinates expressed as \&quot;lat,long\&quot;, a UK postcode, a Naptan (StopPoint) id, an ICS StopId, or a free-text string (will cause disambiguation unless it exactly matches a point of interest name).</param>
        /// <param name="via">Travel through point on the journey. Can be WGS84 coordinates expressed as \&quot;lat,long\&quot;, a UK postcode, a Naptan (StopPoint) id, an ICS StopId, or a free-text string (will cause disambiguation unless it exactly matches a point of interest name). (optional)</param>
        /// <param name="nationalSearch">Does the journey cover stops outside London? eg. \&quot;nationalSearch&#x3D;true\&quot; (optional)</param>
        /// <param name="date">The date must be in yyyyMMdd format (optional)</param>
        /// <param name="time">The time must be in HHmm format (optional)</param>
        /// <param name="timeIs">Does the time given relate to arrival or leaving time? Possible options: \&quot;departing\&quot; | \&quot;arriving\&quot; (optional)</param>
        /// <param name="journeyPreference">The journey preference eg possible options: \&quot;leastinterchange\&quot; | \&quot;leasttime\&quot; | \&quot;leastwalking\&quot; (optional)</param>
        /// <param name="mode">The mode must be a comma separated list of modes. eg possible options: \&quot;public-bus,overground,train,tube,coach,dlr,cablecar,tram,river,walking,cycle\&quot; (optional)</param>
        /// <param name="accessibilityPreference">The accessibility preference must be a comma separated list eg. \&quot;noSolidStairs,noEscalators,noElevators,stepFreeToVehicle,stepFreeToPlatform\&quot; (optional)</param>
        /// <param name="fromName">An optional name to associate with the origin of the journey in the results. (optional)</param>
        /// <param name="toName">An optional name to associate with the destination of the journey in the results. (optional)</param>
        /// <param name="viaName">An optional name to associate with the via point of the journey in the results. (optional)</param>
        /// <param name="maxTransferMinutes">The max walking time in minutes for transfer eg. \&quot;120\&quot; (optional)</param>
        /// <param name="maxWalkingMinutes">The max walking time in minutes for journeys eg. \&quot;120\&quot; (optional)</param>
        /// <param name="walkingSpeed">The walking speed. eg possible options: \&quot;slow\&quot; | \&quot;average\&quot; | \&quot;fast\&quot;. (optional)</param>
        /// <param name="cyclePreference">The cycle preference. eg possible options: \&quot;allTheWay\&quot; | \&quot;leaveAtStation\&quot; | \&quot;takeOnTransport\&quot; | \&quot;cycleHire\&quot; (optional)</param>
        /// <param name="adjustment">Time adjustment command. eg possible options: \&quot;TripFirst\&quot; | \&quot;TripLast\&quot; (optional)</param>
        /// <param name="bikeProficiency">A comma separated list of cycling proficiency levels. eg possible options: \&quot;easy,moderate,fast\&quot; (optional)</param>
        /// <param name="alternativeCycle">Option to determine whether to return alternative cycling journey (optional)</param>
        /// <param name="alternativeWalking">Option to determine whether to return alternative walking journey (optional)</param>
        /// <param name="applyHtmlMarkup">Flag to determine whether certain text (e.g. walking instructions) should be output with HTML tags or not. (optional)</param>
        /// <param name="useMultiModalCall">A boolean to indicate whether or not to return 3 public transport journeys, a bus journey, a cycle hire journey, a personal cycle journey and a walking journey (optional)</param>
        /// <param name="walkingOptimization">A boolean to indicate whether to optimize journeys using walking (optional)</param>
        /// <param name="taxiOnlyTrip">A boolean to indicate whether to return one or more taxi journeys. Note, setting this to true will override \&quot;useMultiModalCall\&quot;. (optional)</param>
        /// <param name="routeBetweenEntrances">A boolean to indicate whether public transport routes should include directions between platforms and station entrances. (optional)</param>
        /// <param name="useRealTimeLiveArrivals">A boolean to indicate if we want to receive real time live arrivals data where available. (optional)</param>
        /// <param name="calcOneDirection">A boolean to make Journey Planner calculate journeys in one temporal direction only. In other words, only calculate journeys after the &#39;depart&#39; time, or before the &#39;arrive&#39; time. By default, the Journey Planner engine (EFA) calculates journeys in both temporal directions. (optional)</param>
        /// <param name="includeAlternativeRoutes">A boolean to make Journey Planner return alternative routes. Alternative routes are calculated by removing one or more lines included in the fastest route and re-calculating. By default, these journeys will not be returned. (optional)</param>
        /// <param name="overrideMultiModalScenario">An optional integer to indicate what multi modal scenario we want to use. (optional)</param>
        /// <returns>ApiResponse of TflApiPresentationEntitiesJourneyPlannerItineraryResult</returns>
        public ApiResponse< TflApiPresentationEntitiesJourneyPlannerItineraryResult > JourneyJourneyResultsWithHttpInfo (string from, string to, string via = null, bool? nationalSearch = null, string date = null, string time = null, string timeIs = null, string journeyPreference = null, List<string> mode = null, List<string> accessibilityPreference = null, string fromName = null, string toName = null, string viaName = null, string maxTransferMinutes = null, string maxWalkingMinutes = null, string walkingSpeed = null, string cyclePreference = null, string adjustment = null, List<string> bikeProficiency = null, bool? alternativeCycle = null, bool? alternativeWalking = null, bool? applyHtmlMarkup = null, bool? useMultiModalCall = null, bool? walkingOptimization = null, bool? taxiOnlyTrip = null, bool? routeBetweenEntrances = null, bool? useRealTimeLiveArrivals = null, bool? calcOneDirection = null, bool? includeAlternativeRoutes = null, int? overrideMultiModalScenario = null)
        {
            // verify the required parameter 'from' is set
            if (from == null)
                throw new ApiException(400, "Missing required parameter 'from' when calling JourneyApi->JourneyJourneyResults");
            // verify the required parameter 'to' is set
            if (to == null)
                throw new ApiException(400, "Missing required parameter 'to' when calling JourneyApi->JourneyJourneyResults");

            var localVarPath = "/Journey/JourneyResults/{from}/to/{to}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (from != null) localVarPathParams.Add("from", this.Configuration.ApiClient.ParameterToString(from)); // path parameter
            if (to != null) localVarPathParams.Add("to", this.Configuration.ApiClient.ParameterToString(to)); // path parameter
            if (via != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "via", via)); // query parameter
            if (nationalSearch != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nationalSearch", nationalSearch)); // query parameter
            if (date != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date", date)); // query parameter
            if (time != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "time", time)); // query parameter
            if (timeIs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timeIs", timeIs)); // query parameter
            if (journeyPreference != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "journeyPreference", journeyPreference)); // query parameter
            if (mode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "mode", mode)); // query parameter
            if (accessibilityPreference != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "accessibilityPreference", accessibilityPreference)); // query parameter
            if (fromName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromName", fromName)); // query parameter
            if (toName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "toName", toName)); // query parameter
            if (viaName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "viaName", viaName)); // query parameter
            if (maxTransferMinutes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxTransferMinutes", maxTransferMinutes)); // query parameter
            if (maxWalkingMinutes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxWalkingMinutes", maxWalkingMinutes)); // query parameter
            if (walkingSpeed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "walkingSpeed", walkingSpeed)); // query parameter
            if (cyclePreference != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cyclePreference", cyclePreference)); // query parameter
            if (adjustment != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "adjustment", adjustment)); // query parameter
            if (bikeProficiency != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "bikeProficiency", bikeProficiency)); // query parameter
            if (alternativeCycle != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "alternativeCycle", alternativeCycle)); // query parameter
            if (alternativeWalking != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "alternativeWalking", alternativeWalking)); // query parameter
            if (applyHtmlMarkup != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applyHtmlMarkup", applyHtmlMarkup)); // query parameter
            if (useMultiModalCall != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "useMultiModalCall", useMultiModalCall)); // query parameter
            if (walkingOptimization != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "walkingOptimization", walkingOptimization)); // query parameter
            if (taxiOnlyTrip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "taxiOnlyTrip", taxiOnlyTrip)); // query parameter
            if (routeBetweenEntrances != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "routeBetweenEntrances", routeBetweenEntrances)); // query parameter
            if (useRealTimeLiveArrivals != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "useRealTimeLiveArrivals", useRealTimeLiveArrivals)); // query parameter
            if (calcOneDirection != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "calcOneDirection", calcOneDirection)); // query parameter
            if (includeAlternativeRoutes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeAlternativeRoutes", includeAlternativeRoutes)); // query parameter
            if (overrideMultiModalScenario != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "overrideMultiModalScenario", overrideMultiModalScenario)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("JourneyJourneyResults", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TflApiPresentationEntitiesJourneyPlannerItineraryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TflApiPresentationEntitiesJourneyPlannerItineraryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TflApiPresentationEntitiesJourneyPlannerItineraryResult)));
        }

        /// <summary>
        /// Perform a Journey Planner search from the parameters specified in simple types 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">Origin of the journey. Can be WGS84 coordinates expressed as \&quot;lat,long\&quot;, a UK postcode, a Naptan (StopPoint) id, an ICS StopId, or a free-text string (will cause disambiguation unless it exactly matches a point of interest name).</param>
        /// <param name="to">Destination of the journey. Can be WGS84 coordinates expressed as \&quot;lat,long\&quot;, a UK postcode, a Naptan (StopPoint) id, an ICS StopId, or a free-text string (will cause disambiguation unless it exactly matches a point of interest name).</param>
        /// <param name="via">Travel through point on the journey. Can be WGS84 coordinates expressed as \&quot;lat,long\&quot;, a UK postcode, a Naptan (StopPoint) id, an ICS StopId, or a free-text string (will cause disambiguation unless it exactly matches a point of interest name). (optional)</param>
        /// <param name="nationalSearch">Does the journey cover stops outside London? eg. \&quot;nationalSearch&#x3D;true\&quot; (optional)</param>
        /// <param name="date">The date must be in yyyyMMdd format (optional)</param>
        /// <param name="time">The time must be in HHmm format (optional)</param>
        /// <param name="timeIs">Does the time given relate to arrival or leaving time? Possible options: \&quot;departing\&quot; | \&quot;arriving\&quot; (optional)</param>
        /// <param name="journeyPreference">The journey preference eg possible options: \&quot;leastinterchange\&quot; | \&quot;leasttime\&quot; | \&quot;leastwalking\&quot; (optional)</param>
        /// <param name="mode">The mode must be a comma separated list of modes. eg possible options: \&quot;public-bus,overground,train,tube,coach,dlr,cablecar,tram,river,walking,cycle\&quot; (optional)</param>
        /// <param name="accessibilityPreference">The accessibility preference must be a comma separated list eg. \&quot;noSolidStairs,noEscalators,noElevators,stepFreeToVehicle,stepFreeToPlatform\&quot; (optional)</param>
        /// <param name="fromName">An optional name to associate with the origin of the journey in the results. (optional)</param>
        /// <param name="toName">An optional name to associate with the destination of the journey in the results. (optional)</param>
        /// <param name="viaName">An optional name to associate with the via point of the journey in the results. (optional)</param>
        /// <param name="maxTransferMinutes">The max walking time in minutes for transfer eg. \&quot;120\&quot; (optional)</param>
        /// <param name="maxWalkingMinutes">The max walking time in minutes for journeys eg. \&quot;120\&quot; (optional)</param>
        /// <param name="walkingSpeed">The walking speed. eg possible options: \&quot;slow\&quot; | \&quot;average\&quot; | \&quot;fast\&quot;. (optional)</param>
        /// <param name="cyclePreference">The cycle preference. eg possible options: \&quot;allTheWay\&quot; | \&quot;leaveAtStation\&quot; | \&quot;takeOnTransport\&quot; | \&quot;cycleHire\&quot; (optional)</param>
        /// <param name="adjustment">Time adjustment command. eg possible options: \&quot;TripFirst\&quot; | \&quot;TripLast\&quot; (optional)</param>
        /// <param name="bikeProficiency">A comma separated list of cycling proficiency levels. eg possible options: \&quot;easy,moderate,fast\&quot; (optional)</param>
        /// <param name="alternativeCycle">Option to determine whether to return alternative cycling journey (optional)</param>
        /// <param name="alternativeWalking">Option to determine whether to return alternative walking journey (optional)</param>
        /// <param name="applyHtmlMarkup">Flag to determine whether certain text (e.g. walking instructions) should be output with HTML tags or not. (optional)</param>
        /// <param name="useMultiModalCall">A boolean to indicate whether or not to return 3 public transport journeys, a bus journey, a cycle hire journey, a personal cycle journey and a walking journey (optional)</param>
        /// <param name="walkingOptimization">A boolean to indicate whether to optimize journeys using walking (optional)</param>
        /// <param name="taxiOnlyTrip">A boolean to indicate whether to return one or more taxi journeys. Note, setting this to true will override \&quot;useMultiModalCall\&quot;. (optional)</param>
        /// <param name="routeBetweenEntrances">A boolean to indicate whether public transport routes should include directions between platforms and station entrances. (optional)</param>
        /// <param name="useRealTimeLiveArrivals">A boolean to indicate if we want to receive real time live arrivals data where available. (optional)</param>
        /// <param name="calcOneDirection">A boolean to make Journey Planner calculate journeys in one temporal direction only. In other words, only calculate journeys after the &#39;depart&#39; time, or before the &#39;arrive&#39; time. By default, the Journey Planner engine (EFA) calculates journeys in both temporal directions. (optional)</param>
        /// <param name="includeAlternativeRoutes">A boolean to make Journey Planner return alternative routes. Alternative routes are calculated by removing one or more lines included in the fastest route and re-calculating. By default, these journeys will not be returned. (optional)</param>
        /// <param name="overrideMultiModalScenario">An optional integer to indicate what multi modal scenario we want to use. (optional)</param>
        /// <returns>Task of TflApiPresentationEntitiesJourneyPlannerItineraryResult</returns>
        public async System.Threading.Tasks.Task<TflApiPresentationEntitiesJourneyPlannerItineraryResult> JourneyJourneyResultsAsync (string from, string to, string via = null, bool? nationalSearch = null, string date = null, string time = null, string timeIs = null, string journeyPreference = null, List<string> mode = null, List<string> accessibilityPreference = null, string fromName = null, string toName = null, string viaName = null, string maxTransferMinutes = null, string maxWalkingMinutes = null, string walkingSpeed = null, string cyclePreference = null, string adjustment = null, List<string> bikeProficiency = null, bool? alternativeCycle = null, bool? alternativeWalking = null, bool? applyHtmlMarkup = null, bool? useMultiModalCall = null, bool? walkingOptimization = null, bool? taxiOnlyTrip = null, bool? routeBetweenEntrances = null, bool? useRealTimeLiveArrivals = null, bool? calcOneDirection = null, bool? includeAlternativeRoutes = null, int? overrideMultiModalScenario = null)
        {
             ApiResponse<TflApiPresentationEntitiesJourneyPlannerItineraryResult> localVarResponse = await JourneyJourneyResultsAsyncWithHttpInfo(from, to, via, nationalSearch, date, time, timeIs, journeyPreference, mode, accessibilityPreference, fromName, toName, viaName, maxTransferMinutes, maxWalkingMinutes, walkingSpeed, cyclePreference, adjustment, bikeProficiency, alternativeCycle, alternativeWalking, applyHtmlMarkup, useMultiModalCall, walkingOptimization, taxiOnlyTrip, routeBetweenEntrances, useRealTimeLiveArrivals, calcOneDirection, includeAlternativeRoutes, overrideMultiModalScenario);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Perform a Journey Planner search from the parameters specified in simple types 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">Origin of the journey. Can be WGS84 coordinates expressed as \&quot;lat,long\&quot;, a UK postcode, a Naptan (StopPoint) id, an ICS StopId, or a free-text string (will cause disambiguation unless it exactly matches a point of interest name).</param>
        /// <param name="to">Destination of the journey. Can be WGS84 coordinates expressed as \&quot;lat,long\&quot;, a UK postcode, a Naptan (StopPoint) id, an ICS StopId, or a free-text string (will cause disambiguation unless it exactly matches a point of interest name).</param>
        /// <param name="via">Travel through point on the journey. Can be WGS84 coordinates expressed as \&quot;lat,long\&quot;, a UK postcode, a Naptan (StopPoint) id, an ICS StopId, or a free-text string (will cause disambiguation unless it exactly matches a point of interest name). (optional)</param>
        /// <param name="nationalSearch">Does the journey cover stops outside London? eg. \&quot;nationalSearch&#x3D;true\&quot; (optional)</param>
        /// <param name="date">The date must be in yyyyMMdd format (optional)</param>
        /// <param name="time">The time must be in HHmm format (optional)</param>
        /// <param name="timeIs">Does the time given relate to arrival or leaving time? Possible options: \&quot;departing\&quot; | \&quot;arriving\&quot; (optional)</param>
        /// <param name="journeyPreference">The journey preference eg possible options: \&quot;leastinterchange\&quot; | \&quot;leasttime\&quot; | \&quot;leastwalking\&quot; (optional)</param>
        /// <param name="mode">The mode must be a comma separated list of modes. eg possible options: \&quot;public-bus,overground,train,tube,coach,dlr,cablecar,tram,river,walking,cycle\&quot; (optional)</param>
        /// <param name="accessibilityPreference">The accessibility preference must be a comma separated list eg. \&quot;noSolidStairs,noEscalators,noElevators,stepFreeToVehicle,stepFreeToPlatform\&quot; (optional)</param>
        /// <param name="fromName">An optional name to associate with the origin of the journey in the results. (optional)</param>
        /// <param name="toName">An optional name to associate with the destination of the journey in the results. (optional)</param>
        /// <param name="viaName">An optional name to associate with the via point of the journey in the results. (optional)</param>
        /// <param name="maxTransferMinutes">The max walking time in minutes for transfer eg. \&quot;120\&quot; (optional)</param>
        /// <param name="maxWalkingMinutes">The max walking time in minutes for journeys eg. \&quot;120\&quot; (optional)</param>
        /// <param name="walkingSpeed">The walking speed. eg possible options: \&quot;slow\&quot; | \&quot;average\&quot; | \&quot;fast\&quot;. (optional)</param>
        /// <param name="cyclePreference">The cycle preference. eg possible options: \&quot;allTheWay\&quot; | \&quot;leaveAtStation\&quot; | \&quot;takeOnTransport\&quot; | \&quot;cycleHire\&quot; (optional)</param>
        /// <param name="adjustment">Time adjustment command. eg possible options: \&quot;TripFirst\&quot; | \&quot;TripLast\&quot; (optional)</param>
        /// <param name="bikeProficiency">A comma separated list of cycling proficiency levels. eg possible options: \&quot;easy,moderate,fast\&quot; (optional)</param>
        /// <param name="alternativeCycle">Option to determine whether to return alternative cycling journey (optional)</param>
        /// <param name="alternativeWalking">Option to determine whether to return alternative walking journey (optional)</param>
        /// <param name="applyHtmlMarkup">Flag to determine whether certain text (e.g. walking instructions) should be output with HTML tags or not. (optional)</param>
        /// <param name="useMultiModalCall">A boolean to indicate whether or not to return 3 public transport journeys, a bus journey, a cycle hire journey, a personal cycle journey and a walking journey (optional)</param>
        /// <param name="walkingOptimization">A boolean to indicate whether to optimize journeys using walking (optional)</param>
        /// <param name="taxiOnlyTrip">A boolean to indicate whether to return one or more taxi journeys. Note, setting this to true will override \&quot;useMultiModalCall\&quot;. (optional)</param>
        /// <param name="routeBetweenEntrances">A boolean to indicate whether public transport routes should include directions between platforms and station entrances. (optional)</param>
        /// <param name="useRealTimeLiveArrivals">A boolean to indicate if we want to receive real time live arrivals data where available. (optional)</param>
        /// <param name="calcOneDirection">A boolean to make Journey Planner calculate journeys in one temporal direction only. In other words, only calculate journeys after the &#39;depart&#39; time, or before the &#39;arrive&#39; time. By default, the Journey Planner engine (EFA) calculates journeys in both temporal directions. (optional)</param>
        /// <param name="includeAlternativeRoutes">A boolean to make Journey Planner return alternative routes. Alternative routes are calculated by removing one or more lines included in the fastest route and re-calculating. By default, these journeys will not be returned. (optional)</param>
        /// <param name="overrideMultiModalScenario">An optional integer to indicate what multi modal scenario we want to use. (optional)</param>
        /// <returns>Task of ApiResponse (TflApiPresentationEntitiesJourneyPlannerItineraryResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TflApiPresentationEntitiesJourneyPlannerItineraryResult>> JourneyJourneyResultsAsyncWithHttpInfo (string from, string to, string via = null, bool? nationalSearch = null, string date = null, string time = null, string timeIs = null, string journeyPreference = null, List<string> mode = null, List<string> accessibilityPreference = null, string fromName = null, string toName = null, string viaName = null, string maxTransferMinutes = null, string maxWalkingMinutes = null, string walkingSpeed = null, string cyclePreference = null, string adjustment = null, List<string> bikeProficiency = null, bool? alternativeCycle = null, bool? alternativeWalking = null, bool? applyHtmlMarkup = null, bool? useMultiModalCall = null, bool? walkingOptimization = null, bool? taxiOnlyTrip = null, bool? routeBetweenEntrances = null, bool? useRealTimeLiveArrivals = null, bool? calcOneDirection = null, bool? includeAlternativeRoutes = null, int? overrideMultiModalScenario = null)
        {
            // verify the required parameter 'from' is set
            if (from == null)
                throw new ApiException(400, "Missing required parameter 'from' when calling JourneyApi->JourneyJourneyResults");
            // verify the required parameter 'to' is set
            if (to == null)
                throw new ApiException(400, "Missing required parameter 'to' when calling JourneyApi->JourneyJourneyResults");

            var localVarPath = "/Journey/JourneyResults/{from}/to/{to}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (from != null) localVarPathParams.Add("from", this.Configuration.ApiClient.ParameterToString(from)); // path parameter
            if (to != null) localVarPathParams.Add("to", this.Configuration.ApiClient.ParameterToString(to)); // path parameter
            if (via != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "via", via)); // query parameter
            if (nationalSearch != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nationalSearch", nationalSearch)); // query parameter
            if (date != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date", date)); // query parameter
            if (time != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "time", time)); // query parameter
            if (timeIs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timeIs", timeIs)); // query parameter
            if (journeyPreference != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "journeyPreference", journeyPreference)); // query parameter
            if (mode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "mode", mode)); // query parameter
            if (accessibilityPreference != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "accessibilityPreference", accessibilityPreference)); // query parameter
            if (fromName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromName", fromName)); // query parameter
            if (toName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "toName", toName)); // query parameter
            if (viaName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "viaName", viaName)); // query parameter
            if (maxTransferMinutes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxTransferMinutes", maxTransferMinutes)); // query parameter
            if (maxWalkingMinutes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxWalkingMinutes", maxWalkingMinutes)); // query parameter
            if (walkingSpeed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "walkingSpeed", walkingSpeed)); // query parameter
            if (cyclePreference != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cyclePreference", cyclePreference)); // query parameter
            if (adjustment != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "adjustment", adjustment)); // query parameter
            if (bikeProficiency != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "bikeProficiency", bikeProficiency)); // query parameter
            if (alternativeCycle != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "alternativeCycle", alternativeCycle)); // query parameter
            if (alternativeWalking != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "alternativeWalking", alternativeWalking)); // query parameter
            if (applyHtmlMarkup != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applyHtmlMarkup", applyHtmlMarkup)); // query parameter
            if (useMultiModalCall != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "useMultiModalCall", useMultiModalCall)); // query parameter
            if (walkingOptimization != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "walkingOptimization", walkingOptimization)); // query parameter
            if (taxiOnlyTrip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "taxiOnlyTrip", taxiOnlyTrip)); // query parameter
            if (routeBetweenEntrances != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "routeBetweenEntrances", routeBetweenEntrances)); // query parameter
            if (useRealTimeLiveArrivals != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "useRealTimeLiveArrivals", useRealTimeLiveArrivals)); // query parameter
            if (calcOneDirection != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "calcOneDirection", calcOneDirection)); // query parameter
            if (includeAlternativeRoutes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeAlternativeRoutes", includeAlternativeRoutes)); // query parameter
            if (overrideMultiModalScenario != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "overrideMultiModalScenario", overrideMultiModalScenario)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("JourneyJourneyResults", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TflApiPresentationEntitiesJourneyPlannerItineraryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TflApiPresentationEntitiesJourneyPlannerItineraryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TflApiPresentationEntitiesJourneyPlannerItineraryResult)));
        }

        /// <summary>
        /// Gets a list of all of the available journey planner modes 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TflApiPresentationEntitiesMode&gt;</returns>
        public List<TflApiPresentationEntitiesMode> JourneyMeta ()
        {
             ApiResponse<List<TflApiPresentationEntitiesMode>> localVarResponse = JourneyMetaWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of all of the available journey planner modes 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TflApiPresentationEntitiesMode&gt;</returns>
        public ApiResponse< List<TflApiPresentationEntitiesMode> > JourneyMetaWithHttpInfo ()
        {

            var localVarPath = "/Journey/Meta/Modes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("JourneyMeta", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TflApiPresentationEntitiesMode>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TflApiPresentationEntitiesMode>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TflApiPresentationEntitiesMode>)));
        }

        /// <summary>
        /// Gets a list of all of the available journey planner modes 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TflApiPresentationEntitiesMode&gt;</returns>
        public async System.Threading.Tasks.Task<List<TflApiPresentationEntitiesMode>> JourneyMetaAsync ()
        {
             ApiResponse<List<TflApiPresentationEntitiesMode>> localVarResponse = await JourneyMetaAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of all of the available journey planner modes 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TflApiPresentationEntitiesMode&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesMode>>> JourneyMetaAsyncWithHttpInfo ()
        {

            var localVarPath = "/Journey/Meta/Modes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("JourneyMeta", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TflApiPresentationEntitiesMode>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TflApiPresentationEntitiesMode>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TflApiPresentationEntitiesMode>)));
        }

    }
}
