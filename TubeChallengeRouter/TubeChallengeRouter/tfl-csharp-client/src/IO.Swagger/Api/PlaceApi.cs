/* 
 * Transport for London Unified API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPlaceApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Gets the place with the given id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the place, you can use the /Place/Types/{types} endpoint to get a list of places for a given type including their ids</param>
        /// <param name="includeChildren">Defaults to false. If true child places e.g. individual charging stations at a charge point while be included, otherwise just the URLs of any child places will be returned (optional)</param>
        /// <returns>List&lt;TflApiPresentationEntitiesPlace&gt;</returns>
        List<TflApiPresentationEntitiesPlace> PlaceGet (string id, bool? includeChildren = null);

        /// <summary>
        /// Gets the place with the given id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the place, you can use the /Place/Types/{types} endpoint to get a list of places for a given type including their ids</param>
        /// <param name="includeChildren">Defaults to false. If true child places e.g. individual charging stations at a charge point while be included, otherwise just the URLs of any child places will be returned (optional)</param>
        /// <returns>ApiResponse of List&lt;TflApiPresentationEntitiesPlace&gt;</returns>
        ApiResponse<List<TflApiPresentationEntitiesPlace>> PlaceGetWithHttpInfo (string id, bool? includeChildren = null);
        /// <summary>
        /// Gets any places of the given type whose geography intersects the given latitude and longitude. In practice this means the Place              must be polygonal e.g. a BoroughBoundary.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">The place type (a valid list of place types can be obtained from the /Place/Meta/placeTypes endpoint)</param>
        /// <param name="lat"></param>
        /// <param name="lon"></param>
        /// <param name="locationLat"></param>
        /// <param name="locationLon"></param>
        /// <returns>SystemObject</returns>
        SystemObject PlaceGetAt (List<string> type, string lat, string lon, double? locationLat, double? locationLon);

        /// <summary>
        /// Gets any places of the given type whose geography intersects the given latitude and longitude. In practice this means the Place              must be polygonal e.g. a BoroughBoundary.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">The place type (a valid list of place types can be obtained from the /Place/Meta/placeTypes endpoint)</param>
        /// <param name="lat"></param>
        /// <param name="lon"></param>
        /// <param name="locationLat"></param>
        /// <param name="locationLon"></param>
        /// <returns>ApiResponse of SystemObject</returns>
        ApiResponse<SystemObject> PlaceGetAtWithHttpInfo (List<string> type, string lat, string lon, double? locationLat, double? locationLon);
        /// <summary>
        /// Gets the places that lie within a geographic region. The geographic region of interest can either be specified              by using a lat/lon geo-point and a radius in metres to return places within the locus defined by the lat/lon of              its centre or alternatively, by the use of a bounding box defined by the lat/lon of its north-west and south-east corners.              Optionally filters on type and can strip properties for a smaller payload.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="radius">The radius of the bounding circle in metres when only lat/lon are specified. (optional)</param>
        /// <param name="categories">An optional list of comma separated property categories to return in the Place&#39;s property bag. If null or empty, all categories of property are returned. Pass the keyword \&quot;none\&quot; to return no properties (a valid list of categories can be obtained from the /Place/Meta/categories endpoint) (optional)</param>
        /// <param name="includeChildren">Defaults to false. If true child places e.g. individual charging stations at a charge point while be included, otherwise just the URLs of any child places will be returned (optional)</param>
        /// <param name="type">Place types to filter on, or null to return all types (optional)</param>
        /// <param name="activeOnly">An optional parameter to limit the results to active records only (Currently only the &#39;VariableMessageSign&#39; place type is supported) (optional)</param>
        /// <param name="numberOfPlacesToReturn">If specified, limits the number of returned places equal to the given value (optional)</param>
        /// <param name="placeGeoSwLat"> (optional)</param>
        /// <param name="placeGeoSwLon"> (optional)</param>
        /// <param name="placeGeoNeLat"> (optional)</param>
        /// <param name="placeGeoNeLon"> (optional)</param>
        /// <param name="placeGeoLat"> (optional)</param>
        /// <param name="placeGeoLon"> (optional)</param>
        /// <returns>List&lt;TflApiPresentationEntitiesStopPoint&gt;</returns>
        List<TflApiPresentationEntitiesStopPoint> PlaceGetByGeo (double? radius = null, List<string> categories = null, bool? includeChildren = null, List<string> type = null, bool? activeOnly = null, int? numberOfPlacesToReturn = null, double? placeGeoSwLat = null, double? placeGeoSwLon = null, double? placeGeoNeLat = null, double? placeGeoNeLon = null, double? placeGeoLat = null, double? placeGeoLon = null);

        /// <summary>
        /// Gets the places that lie within a geographic region. The geographic region of interest can either be specified              by using a lat/lon geo-point and a radius in metres to return places within the locus defined by the lat/lon of              its centre or alternatively, by the use of a bounding box defined by the lat/lon of its north-west and south-east corners.              Optionally filters on type and can strip properties for a smaller payload.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="radius">The radius of the bounding circle in metres when only lat/lon are specified. (optional)</param>
        /// <param name="categories">An optional list of comma separated property categories to return in the Place&#39;s property bag. If null or empty, all categories of property are returned. Pass the keyword \&quot;none\&quot; to return no properties (a valid list of categories can be obtained from the /Place/Meta/categories endpoint) (optional)</param>
        /// <param name="includeChildren">Defaults to false. If true child places e.g. individual charging stations at a charge point while be included, otherwise just the URLs of any child places will be returned (optional)</param>
        /// <param name="type">Place types to filter on, or null to return all types (optional)</param>
        /// <param name="activeOnly">An optional parameter to limit the results to active records only (Currently only the &#39;VariableMessageSign&#39; place type is supported) (optional)</param>
        /// <param name="numberOfPlacesToReturn">If specified, limits the number of returned places equal to the given value (optional)</param>
        /// <param name="placeGeoSwLat"> (optional)</param>
        /// <param name="placeGeoSwLon"> (optional)</param>
        /// <param name="placeGeoNeLat"> (optional)</param>
        /// <param name="placeGeoNeLon"> (optional)</param>
        /// <param name="placeGeoLat"> (optional)</param>
        /// <param name="placeGeoLon"> (optional)</param>
        /// <returns>ApiResponse of List&lt;TflApiPresentationEntitiesStopPoint&gt;</returns>
        ApiResponse<List<TflApiPresentationEntitiesStopPoint>> PlaceGetByGeoWithHttpInfo (double? radius = null, List<string> categories = null, bool? includeChildren = null, List<string> type = null, bool? activeOnly = null, int? numberOfPlacesToReturn = null, double? placeGeoSwLat = null, double? placeGeoSwLon = null, double? placeGeoNeLat = null, double? placeGeoNeLon = null, double? placeGeoLat = null, double? placeGeoLon = null);
        /// <summary>
        /// Gets all places of a given type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="types">A comma-separated list of the types to return. Max. approx 12 types.              A valid list of place types can be obtained from the /Place/Meta/placeTypes endpoint.</param>
        /// <param name="activeOnly">An optional parameter to limit the results to active records only (Currently only the &#39;VariableMessageSign&#39; place type is supported) (optional)</param>
        /// <returns>List&lt;TflApiPresentationEntitiesPlace&gt;</returns>
        List<TflApiPresentationEntitiesPlace> PlaceGetByType (List<string> types, bool? activeOnly = null);

        /// <summary>
        /// Gets all places of a given type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="types">A comma-separated list of the types to return. Max. approx 12 types.              A valid list of place types can be obtained from the /Place/Meta/placeTypes endpoint.</param>
        /// <param name="activeOnly">An optional parameter to limit the results to active records only (Currently only the &#39;VariableMessageSign&#39; place type is supported) (optional)</param>
        /// <returns>ApiResponse of List&lt;TflApiPresentationEntitiesPlace&gt;</returns>
        ApiResponse<List<TflApiPresentationEntitiesPlace>> PlaceGetByTypeWithHttpInfo (List<string> types, bool? activeOnly = null);
        /// <summary>
        /// Gets the place overlay for a given set of co-ordinates and a given width/height.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="z">The zoom level</param>
        /// <param name="type">The place type (a valid list of place types can be obtained from the /Place/Meta/placeTypes endpoint)</param>
        /// <param name="width">The width of the requested overlay.</param>
        /// <param name="height">The height of the requested overlay.</param>
        /// <param name="lat"></param>
        /// <param name="lon"></param>
        /// <param name="locationLat"></param>
        /// <param name="locationLon"></param>
        /// <returns>SystemObject</returns>
        SystemObject PlaceGetOverlay (int? z, List<string> type, int? width, int? height, string lat, string lon, double? locationLat, double? locationLon);

        /// <summary>
        /// Gets the place overlay for a given set of co-ordinates and a given width/height.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="z">The zoom level</param>
        /// <param name="type">The place type (a valid list of place types can be obtained from the /Place/Meta/placeTypes endpoint)</param>
        /// <param name="width">The width of the requested overlay.</param>
        /// <param name="height">The height of the requested overlay.</param>
        /// <param name="lat"></param>
        /// <param name="lon"></param>
        /// <param name="locationLat"></param>
        /// <param name="locationLon"></param>
        /// <returns>ApiResponse of SystemObject</returns>
        ApiResponse<SystemObject> PlaceGetOverlayWithHttpInfo (int? z, List<string> type, int? width, int? height, string lat, string lon, double? locationLat, double? locationLon);
        /// <summary>
        /// Gets the set of streets associated with a post code.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postcode"></param>
        /// <param name="postcodeInputPostcode"> (optional)</param>
        /// <returns>SystemObject</returns>
        SystemObject PlaceGetStreetsByPostCode (string postcode, string postcodeInputPostcode = null);

        /// <summary>
        /// Gets the set of streets associated with a post code.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postcode"></param>
        /// <param name="postcodeInputPostcode"> (optional)</param>
        /// <returns>ApiResponse of SystemObject</returns>
        ApiResponse<SystemObject> PlaceGetStreetsByPostCodeWithHttpInfo (string postcode, string postcodeInputPostcode = null);
        /// <summary>
        /// Gets a list of all of the available place property categories and keys.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TflApiPresentationEntitiesPlaceCategory&gt;</returns>
        List<TflApiPresentationEntitiesPlaceCategory> PlaceMetaCategories ();

        /// <summary>
        /// Gets a list of all of the available place property categories and keys.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TflApiPresentationEntitiesPlaceCategory&gt;</returns>
        ApiResponse<List<TflApiPresentationEntitiesPlaceCategory>> PlaceMetaCategoriesWithHttpInfo ();
        /// <summary>
        /// Gets a list of the available types of Place.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TflApiPresentationEntitiesPlaceCategory&gt;</returns>
        List<TflApiPresentationEntitiesPlaceCategory> PlaceMetaPlaceTypes ();

        /// <summary>
        /// Gets a list of the available types of Place.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TflApiPresentationEntitiesPlaceCategory&gt;</returns>
        ApiResponse<List<TflApiPresentationEntitiesPlaceCategory>> PlaceMetaPlaceTypesWithHttpInfo ();
        /// <summary>
        /// Gets all places that matches the given query
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the place, you can use the /Place/Types/{types} endpoint to get a list of places for a given type including their names.</param>
        /// <param name="types">A comma-separated list of the types to return. Max. approx 12 types. (optional)</param>
        /// <returns>List&lt;TflApiPresentationEntitiesPlace&gt;</returns>
        List<TflApiPresentationEntitiesPlace> PlaceSearch (string name, List<string> types = null);

        /// <summary>
        /// Gets all places that matches the given query
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the place, you can use the /Place/Types/{types} endpoint to get a list of places for a given type including their names.</param>
        /// <param name="types">A comma-separated list of the types to return. Max. approx 12 types. (optional)</param>
        /// <returns>ApiResponse of List&lt;TflApiPresentationEntitiesPlace&gt;</returns>
        ApiResponse<List<TflApiPresentationEntitiesPlace>> PlaceSearchWithHttpInfo (string name, List<string> types = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Gets the place with the given id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the place, you can use the /Place/Types/{types} endpoint to get a list of places for a given type including their ids</param>
        /// <param name="includeChildren">Defaults to false. If true child places e.g. individual charging stations at a charge point while be included, otherwise just the URLs of any child places will be returned (optional)</param>
        /// <returns>Task of List&lt;TflApiPresentationEntitiesPlace&gt;</returns>
        System.Threading.Tasks.Task<List<TflApiPresentationEntitiesPlace>> PlaceGetAsync (string id, bool? includeChildren = null);

        /// <summary>
        /// Gets the place with the given id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the place, you can use the /Place/Types/{types} endpoint to get a list of places for a given type including their ids</param>
        /// <param name="includeChildren">Defaults to false. If true child places e.g. individual charging stations at a charge point while be included, otherwise just the URLs of any child places will be returned (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TflApiPresentationEntitiesPlace&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesPlace>>> PlaceGetAsyncWithHttpInfo (string id, bool? includeChildren = null);
        /// <summary>
        /// Gets any places of the given type whose geography intersects the given latitude and longitude. In practice this means the Place              must be polygonal e.g. a BoroughBoundary.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">The place type (a valid list of place types can be obtained from the /Place/Meta/placeTypes endpoint)</param>
        /// <param name="lat"></param>
        /// <param name="lon"></param>
        /// <param name="locationLat"></param>
        /// <param name="locationLon"></param>
        /// <returns>Task of SystemObject</returns>
        System.Threading.Tasks.Task<SystemObject> PlaceGetAtAsync (List<string> type, string lat, string lon, double? locationLat, double? locationLon);

        /// <summary>
        /// Gets any places of the given type whose geography intersects the given latitude and longitude. In practice this means the Place              must be polygonal e.g. a BoroughBoundary.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">The place type (a valid list of place types can be obtained from the /Place/Meta/placeTypes endpoint)</param>
        /// <param name="lat"></param>
        /// <param name="lon"></param>
        /// <param name="locationLat"></param>
        /// <param name="locationLon"></param>
        /// <returns>Task of ApiResponse (SystemObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<SystemObject>> PlaceGetAtAsyncWithHttpInfo (List<string> type, string lat, string lon, double? locationLat, double? locationLon);
        /// <summary>
        /// Gets the places that lie within a geographic region. The geographic region of interest can either be specified              by using a lat/lon geo-point and a radius in metres to return places within the locus defined by the lat/lon of              its centre or alternatively, by the use of a bounding box defined by the lat/lon of its north-west and south-east corners.              Optionally filters on type and can strip properties for a smaller payload.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="radius">The radius of the bounding circle in metres when only lat/lon are specified. (optional)</param>
        /// <param name="categories">An optional list of comma separated property categories to return in the Place&#39;s property bag. If null or empty, all categories of property are returned. Pass the keyword \&quot;none\&quot; to return no properties (a valid list of categories can be obtained from the /Place/Meta/categories endpoint) (optional)</param>
        /// <param name="includeChildren">Defaults to false. If true child places e.g. individual charging stations at a charge point while be included, otherwise just the URLs of any child places will be returned (optional)</param>
        /// <param name="type">Place types to filter on, or null to return all types (optional)</param>
        /// <param name="activeOnly">An optional parameter to limit the results to active records only (Currently only the &#39;VariableMessageSign&#39; place type is supported) (optional)</param>
        /// <param name="numberOfPlacesToReturn">If specified, limits the number of returned places equal to the given value (optional)</param>
        /// <param name="placeGeoSwLat"> (optional)</param>
        /// <param name="placeGeoSwLon"> (optional)</param>
        /// <param name="placeGeoNeLat"> (optional)</param>
        /// <param name="placeGeoNeLon"> (optional)</param>
        /// <param name="placeGeoLat"> (optional)</param>
        /// <param name="placeGeoLon"> (optional)</param>
        /// <returns>Task of List&lt;TflApiPresentationEntitiesStopPoint&gt;</returns>
        System.Threading.Tasks.Task<List<TflApiPresentationEntitiesStopPoint>> PlaceGetByGeoAsync (double? radius = null, List<string> categories = null, bool? includeChildren = null, List<string> type = null, bool? activeOnly = null, int? numberOfPlacesToReturn = null, double? placeGeoSwLat = null, double? placeGeoSwLon = null, double? placeGeoNeLat = null, double? placeGeoNeLon = null, double? placeGeoLat = null, double? placeGeoLon = null);

        /// <summary>
        /// Gets the places that lie within a geographic region. The geographic region of interest can either be specified              by using a lat/lon geo-point and a radius in metres to return places within the locus defined by the lat/lon of              its centre or alternatively, by the use of a bounding box defined by the lat/lon of its north-west and south-east corners.              Optionally filters on type and can strip properties for a smaller payload.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="radius">The radius of the bounding circle in metres when only lat/lon are specified. (optional)</param>
        /// <param name="categories">An optional list of comma separated property categories to return in the Place&#39;s property bag. If null or empty, all categories of property are returned. Pass the keyword \&quot;none\&quot; to return no properties (a valid list of categories can be obtained from the /Place/Meta/categories endpoint) (optional)</param>
        /// <param name="includeChildren">Defaults to false. If true child places e.g. individual charging stations at a charge point while be included, otherwise just the URLs of any child places will be returned (optional)</param>
        /// <param name="type">Place types to filter on, or null to return all types (optional)</param>
        /// <param name="activeOnly">An optional parameter to limit the results to active records only (Currently only the &#39;VariableMessageSign&#39; place type is supported) (optional)</param>
        /// <param name="numberOfPlacesToReturn">If specified, limits the number of returned places equal to the given value (optional)</param>
        /// <param name="placeGeoSwLat"> (optional)</param>
        /// <param name="placeGeoSwLon"> (optional)</param>
        /// <param name="placeGeoNeLat"> (optional)</param>
        /// <param name="placeGeoNeLon"> (optional)</param>
        /// <param name="placeGeoLat"> (optional)</param>
        /// <param name="placeGeoLon"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TflApiPresentationEntitiesStopPoint&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesStopPoint>>> PlaceGetByGeoAsyncWithHttpInfo (double? radius = null, List<string> categories = null, bool? includeChildren = null, List<string> type = null, bool? activeOnly = null, int? numberOfPlacesToReturn = null, double? placeGeoSwLat = null, double? placeGeoSwLon = null, double? placeGeoNeLat = null, double? placeGeoNeLon = null, double? placeGeoLat = null, double? placeGeoLon = null);
        /// <summary>
        /// Gets all places of a given type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="types">A comma-separated list of the types to return. Max. approx 12 types.              A valid list of place types can be obtained from the /Place/Meta/placeTypes endpoint.</param>
        /// <param name="activeOnly">An optional parameter to limit the results to active records only (Currently only the &#39;VariableMessageSign&#39; place type is supported) (optional)</param>
        /// <returns>Task of List&lt;TflApiPresentationEntitiesPlace&gt;</returns>
        System.Threading.Tasks.Task<List<TflApiPresentationEntitiesPlace>> PlaceGetByTypeAsync (List<string> types, bool? activeOnly = null);

        /// <summary>
        /// Gets all places of a given type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="types">A comma-separated list of the types to return. Max. approx 12 types.              A valid list of place types can be obtained from the /Place/Meta/placeTypes endpoint.</param>
        /// <param name="activeOnly">An optional parameter to limit the results to active records only (Currently only the &#39;VariableMessageSign&#39; place type is supported) (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TflApiPresentationEntitiesPlace&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesPlace>>> PlaceGetByTypeAsyncWithHttpInfo (List<string> types, bool? activeOnly = null);
        /// <summary>
        /// Gets the place overlay for a given set of co-ordinates and a given width/height.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="z">The zoom level</param>
        /// <param name="type">The place type (a valid list of place types can be obtained from the /Place/Meta/placeTypes endpoint)</param>
        /// <param name="width">The width of the requested overlay.</param>
        /// <param name="height">The height of the requested overlay.</param>
        /// <param name="lat"></param>
        /// <param name="lon"></param>
        /// <param name="locationLat"></param>
        /// <param name="locationLon"></param>
        /// <returns>Task of SystemObject</returns>
        System.Threading.Tasks.Task<SystemObject> PlaceGetOverlayAsync (int? z, List<string> type, int? width, int? height, string lat, string lon, double? locationLat, double? locationLon);

        /// <summary>
        /// Gets the place overlay for a given set of co-ordinates and a given width/height.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="z">The zoom level</param>
        /// <param name="type">The place type (a valid list of place types can be obtained from the /Place/Meta/placeTypes endpoint)</param>
        /// <param name="width">The width of the requested overlay.</param>
        /// <param name="height">The height of the requested overlay.</param>
        /// <param name="lat"></param>
        /// <param name="lon"></param>
        /// <param name="locationLat"></param>
        /// <param name="locationLon"></param>
        /// <returns>Task of ApiResponse (SystemObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<SystemObject>> PlaceGetOverlayAsyncWithHttpInfo (int? z, List<string> type, int? width, int? height, string lat, string lon, double? locationLat, double? locationLon);
        /// <summary>
        /// Gets the set of streets associated with a post code.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postcode"></param>
        /// <param name="postcodeInputPostcode"> (optional)</param>
        /// <returns>Task of SystemObject</returns>
        System.Threading.Tasks.Task<SystemObject> PlaceGetStreetsByPostCodeAsync (string postcode, string postcodeInputPostcode = null);

        /// <summary>
        /// Gets the set of streets associated with a post code.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postcode"></param>
        /// <param name="postcodeInputPostcode"> (optional)</param>
        /// <returns>Task of ApiResponse (SystemObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<SystemObject>> PlaceGetStreetsByPostCodeAsyncWithHttpInfo (string postcode, string postcodeInputPostcode = null);
        /// <summary>
        /// Gets a list of all of the available place property categories and keys.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TflApiPresentationEntitiesPlaceCategory&gt;</returns>
        System.Threading.Tasks.Task<List<TflApiPresentationEntitiesPlaceCategory>> PlaceMetaCategoriesAsync ();

        /// <summary>
        /// Gets a list of all of the available place property categories and keys.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TflApiPresentationEntitiesPlaceCategory&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesPlaceCategory>>> PlaceMetaCategoriesAsyncWithHttpInfo ();
        /// <summary>
        /// Gets a list of the available types of Place.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TflApiPresentationEntitiesPlaceCategory&gt;</returns>
        System.Threading.Tasks.Task<List<TflApiPresentationEntitiesPlaceCategory>> PlaceMetaPlaceTypesAsync ();

        /// <summary>
        /// Gets a list of the available types of Place.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TflApiPresentationEntitiesPlaceCategory&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesPlaceCategory>>> PlaceMetaPlaceTypesAsyncWithHttpInfo ();
        /// <summary>
        /// Gets all places that matches the given query
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the place, you can use the /Place/Types/{types} endpoint to get a list of places for a given type including their names.</param>
        /// <param name="types">A comma-separated list of the types to return. Max. approx 12 types. (optional)</param>
        /// <returns>Task of List&lt;TflApiPresentationEntitiesPlace&gt;</returns>
        System.Threading.Tasks.Task<List<TflApiPresentationEntitiesPlace>> PlaceSearchAsync (string name, List<string> types = null);

        /// <summary>
        /// Gets all places that matches the given query
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the place, you can use the /Place/Types/{types} endpoint to get a list of places for a given type including their names.</param>
        /// <param name="types">A comma-separated list of the types to return. Max. approx 12 types. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TflApiPresentationEntitiesPlace&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesPlace>>> PlaceSearchAsyncWithHttpInfo (string name, List<string> types = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PlaceApi : IPlaceApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PlaceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PlaceApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PlaceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PlaceApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Gets the place with the given id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the place, you can use the /Place/Types/{types} endpoint to get a list of places for a given type including their ids</param>
        /// <param name="includeChildren">Defaults to false. If true child places e.g. individual charging stations at a charge point while be included, otherwise just the URLs of any child places will be returned (optional)</param>
        /// <returns>List&lt;TflApiPresentationEntitiesPlace&gt;</returns>
        public List<TflApiPresentationEntitiesPlace> PlaceGet (string id, bool? includeChildren = null)
        {
             ApiResponse<List<TflApiPresentationEntitiesPlace>> localVarResponse = PlaceGetWithHttpInfo(id, includeChildren);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the place with the given id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the place, you can use the /Place/Types/{types} endpoint to get a list of places for a given type including their ids</param>
        /// <param name="includeChildren">Defaults to false. If true child places e.g. individual charging stations at a charge point while be included, otherwise just the URLs of any child places will be returned (optional)</param>
        /// <returns>ApiResponse of List&lt;TflApiPresentationEntitiesPlace&gt;</returns>
        public ApiResponse< List<TflApiPresentationEntitiesPlace> > PlaceGetWithHttpInfo (string id, bool? includeChildren = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PlaceApi->PlaceGet");

            var localVarPath = "/Place/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (includeChildren != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeChildren", includeChildren)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlaceGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TflApiPresentationEntitiesPlace>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TflApiPresentationEntitiesPlace>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TflApiPresentationEntitiesPlace>)));
        }

        /// <summary>
        /// Gets the place with the given id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the place, you can use the /Place/Types/{types} endpoint to get a list of places for a given type including their ids</param>
        /// <param name="includeChildren">Defaults to false. If true child places e.g. individual charging stations at a charge point while be included, otherwise just the URLs of any child places will be returned (optional)</param>
        /// <returns>Task of List&lt;TflApiPresentationEntitiesPlace&gt;</returns>
        public async System.Threading.Tasks.Task<List<TflApiPresentationEntitiesPlace>> PlaceGetAsync (string id, bool? includeChildren = null)
        {
             ApiResponse<List<TflApiPresentationEntitiesPlace>> localVarResponse = await PlaceGetAsyncWithHttpInfo(id, includeChildren);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the place with the given id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the place, you can use the /Place/Types/{types} endpoint to get a list of places for a given type including their ids</param>
        /// <param name="includeChildren">Defaults to false. If true child places e.g. individual charging stations at a charge point while be included, otherwise just the URLs of any child places will be returned (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TflApiPresentationEntitiesPlace&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesPlace>>> PlaceGetAsyncWithHttpInfo (string id, bool? includeChildren = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PlaceApi->PlaceGet");

            var localVarPath = "/Place/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (includeChildren != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeChildren", includeChildren)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlaceGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TflApiPresentationEntitiesPlace>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TflApiPresentationEntitiesPlace>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TflApiPresentationEntitiesPlace>)));
        }

        /// <summary>
        /// Gets any places of the given type whose geography intersects the given latitude and longitude. In practice this means the Place              must be polygonal e.g. a BoroughBoundary. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">The place type (a valid list of place types can be obtained from the /Place/Meta/placeTypes endpoint)</param>
        /// <param name="lat"></param>
        /// <param name="lon"></param>
        /// <param name="locationLat"></param>
        /// <param name="locationLon"></param>
        /// <returns>SystemObject</returns>
        public SystemObject PlaceGetAt (List<string> type, string lat, string lon, double? locationLat, double? locationLon)
        {
             ApiResponse<SystemObject> localVarResponse = PlaceGetAtWithHttpInfo(type, lat, lon, locationLat, locationLon);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets any places of the given type whose geography intersects the given latitude and longitude. In practice this means the Place              must be polygonal e.g. a BoroughBoundary. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">The place type (a valid list of place types can be obtained from the /Place/Meta/placeTypes endpoint)</param>
        /// <param name="lat"></param>
        /// <param name="lon"></param>
        /// <param name="locationLat"></param>
        /// <param name="locationLon"></param>
        /// <returns>ApiResponse of SystemObject</returns>
        public ApiResponse< SystemObject > PlaceGetAtWithHttpInfo (List<string> type, string lat, string lon, double? locationLat, double? locationLon)
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling PlaceApi->PlaceGetAt");
            // verify the required parameter 'lat' is set
            if (lat == null)
                throw new ApiException(400, "Missing required parameter 'lat' when calling PlaceApi->PlaceGetAt");
            // verify the required parameter 'lon' is set
            if (lon == null)
                throw new ApiException(400, "Missing required parameter 'lon' when calling PlaceApi->PlaceGetAt");
            // verify the required parameter 'locationLat' is set
            if (locationLat == null)
                throw new ApiException(400, "Missing required parameter 'locationLat' when calling PlaceApi->PlaceGetAt");
            // verify the required parameter 'locationLon' is set
            if (locationLon == null)
                throw new ApiException(400, "Missing required parameter 'locationLon' when calling PlaceApi->PlaceGetAt");

            var localVarPath = "/Place/{type}/At/{Lat}/{Lon}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (type != null) localVarPathParams.Add("type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (lat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lat", lat)); // query parameter
            if (lon != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lon", lon)); // query parameter
            if (locationLat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "location.lat", locationLat)); // query parameter
            if (locationLon != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "location.lon", locationLon)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlaceGetAt", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SystemObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SystemObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SystemObject)));
        }

        /// <summary>
        /// Gets any places of the given type whose geography intersects the given latitude and longitude. In practice this means the Place              must be polygonal e.g. a BoroughBoundary. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">The place type (a valid list of place types can be obtained from the /Place/Meta/placeTypes endpoint)</param>
        /// <param name="lat"></param>
        /// <param name="lon"></param>
        /// <param name="locationLat"></param>
        /// <param name="locationLon"></param>
        /// <returns>Task of SystemObject</returns>
        public async System.Threading.Tasks.Task<SystemObject> PlaceGetAtAsync (List<string> type, string lat, string lon, double? locationLat, double? locationLon)
        {
             ApiResponse<SystemObject> localVarResponse = await PlaceGetAtAsyncWithHttpInfo(type, lat, lon, locationLat, locationLon);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets any places of the given type whose geography intersects the given latitude and longitude. In practice this means the Place              must be polygonal e.g. a BoroughBoundary. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">The place type (a valid list of place types can be obtained from the /Place/Meta/placeTypes endpoint)</param>
        /// <param name="lat"></param>
        /// <param name="lon"></param>
        /// <param name="locationLat"></param>
        /// <param name="locationLon"></param>
        /// <returns>Task of ApiResponse (SystemObject)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SystemObject>> PlaceGetAtAsyncWithHttpInfo (List<string> type, string lat, string lon, double? locationLat, double? locationLon)
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling PlaceApi->PlaceGetAt");
            // verify the required parameter 'lat' is set
            if (lat == null)
                throw new ApiException(400, "Missing required parameter 'lat' when calling PlaceApi->PlaceGetAt");
            // verify the required parameter 'lon' is set
            if (lon == null)
                throw new ApiException(400, "Missing required parameter 'lon' when calling PlaceApi->PlaceGetAt");
            // verify the required parameter 'locationLat' is set
            if (locationLat == null)
                throw new ApiException(400, "Missing required parameter 'locationLat' when calling PlaceApi->PlaceGetAt");
            // verify the required parameter 'locationLon' is set
            if (locationLon == null)
                throw new ApiException(400, "Missing required parameter 'locationLon' when calling PlaceApi->PlaceGetAt");

            var localVarPath = "/Place/{type}/At/{Lat}/{Lon}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (type != null) localVarPathParams.Add("type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (lat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lat", lat)); // query parameter
            if (lon != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lon", lon)); // query parameter
            if (locationLat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "location.lat", locationLat)); // query parameter
            if (locationLon != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "location.lon", locationLon)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlaceGetAt", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SystemObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SystemObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SystemObject)));
        }

        /// <summary>
        /// Gets the places that lie within a geographic region. The geographic region of interest can either be specified              by using a lat/lon geo-point and a radius in metres to return places within the locus defined by the lat/lon of              its centre or alternatively, by the use of a bounding box defined by the lat/lon of its north-west and south-east corners.              Optionally filters on type and can strip properties for a smaller payload. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="radius">The radius of the bounding circle in metres when only lat/lon are specified. (optional)</param>
        /// <param name="categories">An optional list of comma separated property categories to return in the Place&#39;s property bag. If null or empty, all categories of property are returned. Pass the keyword \&quot;none\&quot; to return no properties (a valid list of categories can be obtained from the /Place/Meta/categories endpoint) (optional)</param>
        /// <param name="includeChildren">Defaults to false. If true child places e.g. individual charging stations at a charge point while be included, otherwise just the URLs of any child places will be returned (optional)</param>
        /// <param name="type">Place types to filter on, or null to return all types (optional)</param>
        /// <param name="activeOnly">An optional parameter to limit the results to active records only (Currently only the &#39;VariableMessageSign&#39; place type is supported) (optional)</param>
        /// <param name="numberOfPlacesToReturn">If specified, limits the number of returned places equal to the given value (optional)</param>
        /// <param name="placeGeoSwLat"> (optional)</param>
        /// <param name="placeGeoSwLon"> (optional)</param>
        /// <param name="placeGeoNeLat"> (optional)</param>
        /// <param name="placeGeoNeLon"> (optional)</param>
        /// <param name="placeGeoLat"> (optional)</param>
        /// <param name="placeGeoLon"> (optional)</param>
        /// <returns>List&lt;TflApiPresentationEntitiesStopPoint&gt;</returns>
        public List<TflApiPresentationEntitiesStopPoint> PlaceGetByGeo (double? radius = null, List<string> categories = null, bool? includeChildren = null, List<string> type = null, bool? activeOnly = null, int? numberOfPlacesToReturn = null, double? placeGeoSwLat = null, double? placeGeoSwLon = null, double? placeGeoNeLat = null, double? placeGeoNeLon = null, double? placeGeoLat = null, double? placeGeoLon = null)
        {
             ApiResponse<List<TflApiPresentationEntitiesStopPoint>> localVarResponse = PlaceGetByGeoWithHttpInfo(radius, categories, includeChildren, type, activeOnly, numberOfPlacesToReturn, placeGeoSwLat, placeGeoSwLon, placeGeoNeLat, placeGeoNeLon, placeGeoLat, placeGeoLon);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the places that lie within a geographic region. The geographic region of interest can either be specified              by using a lat/lon geo-point and a radius in metres to return places within the locus defined by the lat/lon of              its centre or alternatively, by the use of a bounding box defined by the lat/lon of its north-west and south-east corners.              Optionally filters on type and can strip properties for a smaller payload. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="radius">The radius of the bounding circle in metres when only lat/lon are specified. (optional)</param>
        /// <param name="categories">An optional list of comma separated property categories to return in the Place&#39;s property bag. If null or empty, all categories of property are returned. Pass the keyword \&quot;none\&quot; to return no properties (a valid list of categories can be obtained from the /Place/Meta/categories endpoint) (optional)</param>
        /// <param name="includeChildren">Defaults to false. If true child places e.g. individual charging stations at a charge point while be included, otherwise just the URLs of any child places will be returned (optional)</param>
        /// <param name="type">Place types to filter on, or null to return all types (optional)</param>
        /// <param name="activeOnly">An optional parameter to limit the results to active records only (Currently only the &#39;VariableMessageSign&#39; place type is supported) (optional)</param>
        /// <param name="numberOfPlacesToReturn">If specified, limits the number of returned places equal to the given value (optional)</param>
        /// <param name="placeGeoSwLat"> (optional)</param>
        /// <param name="placeGeoSwLon"> (optional)</param>
        /// <param name="placeGeoNeLat"> (optional)</param>
        /// <param name="placeGeoNeLon"> (optional)</param>
        /// <param name="placeGeoLat"> (optional)</param>
        /// <param name="placeGeoLon"> (optional)</param>
        /// <returns>ApiResponse of List&lt;TflApiPresentationEntitiesStopPoint&gt;</returns>
        public ApiResponse< List<TflApiPresentationEntitiesStopPoint> > PlaceGetByGeoWithHttpInfo (double? radius = null, List<string> categories = null, bool? includeChildren = null, List<string> type = null, bool? activeOnly = null, int? numberOfPlacesToReturn = null, double? placeGeoSwLat = null, double? placeGeoSwLon = null, double? placeGeoNeLat = null, double? placeGeoNeLon = null, double? placeGeoLat = null, double? placeGeoLon = null)
        {

            var localVarPath = "/Place";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (radius != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "radius", radius)); // query parameter
            if (categories != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "categories", categories)); // query parameter
            if (includeChildren != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeChildren", includeChildren)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "type", type)); // query parameter
            if (activeOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "activeOnly", activeOnly)); // query parameter
            if (numberOfPlacesToReturn != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "numberOfPlacesToReturn", numberOfPlacesToReturn)); // query parameter
            if (placeGeoSwLat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "placeGeo.swLat", placeGeoSwLat)); // query parameter
            if (placeGeoSwLon != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "placeGeo.swLon", placeGeoSwLon)); // query parameter
            if (placeGeoNeLat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "placeGeo.neLat", placeGeoNeLat)); // query parameter
            if (placeGeoNeLon != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "placeGeo.neLon", placeGeoNeLon)); // query parameter
            if (placeGeoLat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "placeGeo.lat", placeGeoLat)); // query parameter
            if (placeGeoLon != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "placeGeo.lon", placeGeoLon)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlaceGetByGeo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TflApiPresentationEntitiesStopPoint>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TflApiPresentationEntitiesStopPoint>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TflApiPresentationEntitiesStopPoint>)));
        }

        /// <summary>
        /// Gets the places that lie within a geographic region. The geographic region of interest can either be specified              by using a lat/lon geo-point and a radius in metres to return places within the locus defined by the lat/lon of              its centre or alternatively, by the use of a bounding box defined by the lat/lon of its north-west and south-east corners.              Optionally filters on type and can strip properties for a smaller payload. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="radius">The radius of the bounding circle in metres when only lat/lon are specified. (optional)</param>
        /// <param name="categories">An optional list of comma separated property categories to return in the Place&#39;s property bag. If null or empty, all categories of property are returned. Pass the keyword \&quot;none\&quot; to return no properties (a valid list of categories can be obtained from the /Place/Meta/categories endpoint) (optional)</param>
        /// <param name="includeChildren">Defaults to false. If true child places e.g. individual charging stations at a charge point while be included, otherwise just the URLs of any child places will be returned (optional)</param>
        /// <param name="type">Place types to filter on, or null to return all types (optional)</param>
        /// <param name="activeOnly">An optional parameter to limit the results to active records only (Currently only the &#39;VariableMessageSign&#39; place type is supported) (optional)</param>
        /// <param name="numberOfPlacesToReturn">If specified, limits the number of returned places equal to the given value (optional)</param>
        /// <param name="placeGeoSwLat"> (optional)</param>
        /// <param name="placeGeoSwLon"> (optional)</param>
        /// <param name="placeGeoNeLat"> (optional)</param>
        /// <param name="placeGeoNeLon"> (optional)</param>
        /// <param name="placeGeoLat"> (optional)</param>
        /// <param name="placeGeoLon"> (optional)</param>
        /// <returns>Task of List&lt;TflApiPresentationEntitiesStopPoint&gt;</returns>
        public async System.Threading.Tasks.Task<List<TflApiPresentationEntitiesStopPoint>> PlaceGetByGeoAsync (double? radius = null, List<string> categories = null, bool? includeChildren = null, List<string> type = null, bool? activeOnly = null, int? numberOfPlacesToReturn = null, double? placeGeoSwLat = null, double? placeGeoSwLon = null, double? placeGeoNeLat = null, double? placeGeoNeLon = null, double? placeGeoLat = null, double? placeGeoLon = null)
        {
             ApiResponse<List<TflApiPresentationEntitiesStopPoint>> localVarResponse = await PlaceGetByGeoAsyncWithHttpInfo(radius, categories, includeChildren, type, activeOnly, numberOfPlacesToReturn, placeGeoSwLat, placeGeoSwLon, placeGeoNeLat, placeGeoNeLon, placeGeoLat, placeGeoLon);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the places that lie within a geographic region. The geographic region of interest can either be specified              by using a lat/lon geo-point and a radius in metres to return places within the locus defined by the lat/lon of              its centre or alternatively, by the use of a bounding box defined by the lat/lon of its north-west and south-east corners.              Optionally filters on type and can strip properties for a smaller payload. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="radius">The radius of the bounding circle in metres when only lat/lon are specified. (optional)</param>
        /// <param name="categories">An optional list of comma separated property categories to return in the Place&#39;s property bag. If null or empty, all categories of property are returned. Pass the keyword \&quot;none\&quot; to return no properties (a valid list of categories can be obtained from the /Place/Meta/categories endpoint) (optional)</param>
        /// <param name="includeChildren">Defaults to false. If true child places e.g. individual charging stations at a charge point while be included, otherwise just the URLs of any child places will be returned (optional)</param>
        /// <param name="type">Place types to filter on, or null to return all types (optional)</param>
        /// <param name="activeOnly">An optional parameter to limit the results to active records only (Currently only the &#39;VariableMessageSign&#39; place type is supported) (optional)</param>
        /// <param name="numberOfPlacesToReturn">If specified, limits the number of returned places equal to the given value (optional)</param>
        /// <param name="placeGeoSwLat"> (optional)</param>
        /// <param name="placeGeoSwLon"> (optional)</param>
        /// <param name="placeGeoNeLat"> (optional)</param>
        /// <param name="placeGeoNeLon"> (optional)</param>
        /// <param name="placeGeoLat"> (optional)</param>
        /// <param name="placeGeoLon"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TflApiPresentationEntitiesStopPoint&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesStopPoint>>> PlaceGetByGeoAsyncWithHttpInfo (double? radius = null, List<string> categories = null, bool? includeChildren = null, List<string> type = null, bool? activeOnly = null, int? numberOfPlacesToReturn = null, double? placeGeoSwLat = null, double? placeGeoSwLon = null, double? placeGeoNeLat = null, double? placeGeoNeLon = null, double? placeGeoLat = null, double? placeGeoLon = null)
        {

            var localVarPath = "/Place";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (radius != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "radius", radius)); // query parameter
            if (categories != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "categories", categories)); // query parameter
            if (includeChildren != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeChildren", includeChildren)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "type", type)); // query parameter
            if (activeOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "activeOnly", activeOnly)); // query parameter
            if (numberOfPlacesToReturn != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "numberOfPlacesToReturn", numberOfPlacesToReturn)); // query parameter
            if (placeGeoSwLat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "placeGeo.swLat", placeGeoSwLat)); // query parameter
            if (placeGeoSwLon != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "placeGeo.swLon", placeGeoSwLon)); // query parameter
            if (placeGeoNeLat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "placeGeo.neLat", placeGeoNeLat)); // query parameter
            if (placeGeoNeLon != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "placeGeo.neLon", placeGeoNeLon)); // query parameter
            if (placeGeoLat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "placeGeo.lat", placeGeoLat)); // query parameter
            if (placeGeoLon != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "placeGeo.lon", placeGeoLon)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlaceGetByGeo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TflApiPresentationEntitiesStopPoint>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TflApiPresentationEntitiesStopPoint>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TflApiPresentationEntitiesStopPoint>)));
        }

        /// <summary>
        /// Gets all places of a given type 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="types">A comma-separated list of the types to return. Max. approx 12 types.              A valid list of place types can be obtained from the /Place/Meta/placeTypes endpoint.</param>
        /// <param name="activeOnly">An optional parameter to limit the results to active records only (Currently only the &#39;VariableMessageSign&#39; place type is supported) (optional)</param>
        /// <returns>List&lt;TflApiPresentationEntitiesPlace&gt;</returns>
        public List<TflApiPresentationEntitiesPlace> PlaceGetByType (List<string> types, bool? activeOnly = null)
        {
             ApiResponse<List<TflApiPresentationEntitiesPlace>> localVarResponse = PlaceGetByTypeWithHttpInfo(types, activeOnly);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all places of a given type 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="types">A comma-separated list of the types to return. Max. approx 12 types.              A valid list of place types can be obtained from the /Place/Meta/placeTypes endpoint.</param>
        /// <param name="activeOnly">An optional parameter to limit the results to active records only (Currently only the &#39;VariableMessageSign&#39; place type is supported) (optional)</param>
        /// <returns>ApiResponse of List&lt;TflApiPresentationEntitiesPlace&gt;</returns>
        public ApiResponse< List<TflApiPresentationEntitiesPlace> > PlaceGetByTypeWithHttpInfo (List<string> types, bool? activeOnly = null)
        {
            // verify the required parameter 'types' is set
            if (types == null)
                throw new ApiException(400, "Missing required parameter 'types' when calling PlaceApi->PlaceGetByType");

            var localVarPath = "/Place/Type/{types}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (types != null) localVarPathParams.Add("types", this.Configuration.ApiClient.ParameterToString(types)); // path parameter
            if (activeOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "activeOnly", activeOnly)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlaceGetByType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TflApiPresentationEntitiesPlace>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TflApiPresentationEntitiesPlace>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TflApiPresentationEntitiesPlace>)));
        }

        /// <summary>
        /// Gets all places of a given type 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="types">A comma-separated list of the types to return. Max. approx 12 types.              A valid list of place types can be obtained from the /Place/Meta/placeTypes endpoint.</param>
        /// <param name="activeOnly">An optional parameter to limit the results to active records only (Currently only the &#39;VariableMessageSign&#39; place type is supported) (optional)</param>
        /// <returns>Task of List&lt;TflApiPresentationEntitiesPlace&gt;</returns>
        public async System.Threading.Tasks.Task<List<TflApiPresentationEntitiesPlace>> PlaceGetByTypeAsync (List<string> types, bool? activeOnly = null)
        {
             ApiResponse<List<TflApiPresentationEntitiesPlace>> localVarResponse = await PlaceGetByTypeAsyncWithHttpInfo(types, activeOnly);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets all places of a given type 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="types">A comma-separated list of the types to return. Max. approx 12 types.              A valid list of place types can be obtained from the /Place/Meta/placeTypes endpoint.</param>
        /// <param name="activeOnly">An optional parameter to limit the results to active records only (Currently only the &#39;VariableMessageSign&#39; place type is supported) (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TflApiPresentationEntitiesPlace&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesPlace>>> PlaceGetByTypeAsyncWithHttpInfo (List<string> types, bool? activeOnly = null)
        {
            // verify the required parameter 'types' is set
            if (types == null)
                throw new ApiException(400, "Missing required parameter 'types' when calling PlaceApi->PlaceGetByType");

            var localVarPath = "/Place/Type/{types}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (types != null) localVarPathParams.Add("types", this.Configuration.ApiClient.ParameterToString(types)); // path parameter
            if (activeOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "activeOnly", activeOnly)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlaceGetByType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TflApiPresentationEntitiesPlace>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TflApiPresentationEntitiesPlace>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TflApiPresentationEntitiesPlace>)));
        }

        /// <summary>
        /// Gets the place overlay for a given set of co-ordinates and a given width/height. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="z">The zoom level</param>
        /// <param name="type">The place type (a valid list of place types can be obtained from the /Place/Meta/placeTypes endpoint)</param>
        /// <param name="width">The width of the requested overlay.</param>
        /// <param name="height">The height of the requested overlay.</param>
        /// <param name="lat"></param>
        /// <param name="lon"></param>
        /// <param name="locationLat"></param>
        /// <param name="locationLon"></param>
        /// <returns>SystemObject</returns>
        public SystemObject PlaceGetOverlay (int? z, List<string> type, int? width, int? height, string lat, string lon, double? locationLat, double? locationLon)
        {
             ApiResponse<SystemObject> localVarResponse = PlaceGetOverlayWithHttpInfo(z, type, width, height, lat, lon, locationLat, locationLon);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the place overlay for a given set of co-ordinates and a given width/height. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="z">The zoom level</param>
        /// <param name="type">The place type (a valid list of place types can be obtained from the /Place/Meta/placeTypes endpoint)</param>
        /// <param name="width">The width of the requested overlay.</param>
        /// <param name="height">The height of the requested overlay.</param>
        /// <param name="lat"></param>
        /// <param name="lon"></param>
        /// <param name="locationLat"></param>
        /// <param name="locationLon"></param>
        /// <returns>ApiResponse of SystemObject</returns>
        public ApiResponse< SystemObject > PlaceGetOverlayWithHttpInfo (int? z, List<string> type, int? width, int? height, string lat, string lon, double? locationLat, double? locationLon)
        {
            // verify the required parameter 'z' is set
            if (z == null)
                throw new ApiException(400, "Missing required parameter 'z' when calling PlaceApi->PlaceGetOverlay");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling PlaceApi->PlaceGetOverlay");
            // verify the required parameter 'width' is set
            if (width == null)
                throw new ApiException(400, "Missing required parameter 'width' when calling PlaceApi->PlaceGetOverlay");
            // verify the required parameter 'height' is set
            if (height == null)
                throw new ApiException(400, "Missing required parameter 'height' when calling PlaceApi->PlaceGetOverlay");
            // verify the required parameter 'lat' is set
            if (lat == null)
                throw new ApiException(400, "Missing required parameter 'lat' when calling PlaceApi->PlaceGetOverlay");
            // verify the required parameter 'lon' is set
            if (lon == null)
                throw new ApiException(400, "Missing required parameter 'lon' when calling PlaceApi->PlaceGetOverlay");
            // verify the required parameter 'locationLat' is set
            if (locationLat == null)
                throw new ApiException(400, "Missing required parameter 'locationLat' when calling PlaceApi->PlaceGetOverlay");
            // verify the required parameter 'locationLon' is set
            if (locationLon == null)
                throw new ApiException(400, "Missing required parameter 'locationLon' when calling PlaceApi->PlaceGetOverlay");

            var localVarPath = "/Place/{type}/overlay/{z}/{Lat}/{Lon}/{width}/{height}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (z != null) localVarPathParams.Add("z", this.Configuration.ApiClient.ParameterToString(z)); // path parameter
            if (type != null) localVarPathParams.Add("type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (width != null) localVarPathParams.Add("width", this.Configuration.ApiClient.ParameterToString(width)); // path parameter
            if (height != null) localVarPathParams.Add("height", this.Configuration.ApiClient.ParameterToString(height)); // path parameter
            if (lat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lat", lat)); // query parameter
            if (lon != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lon", lon)); // query parameter
            if (locationLat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "location.lat", locationLat)); // query parameter
            if (locationLon != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "location.lon", locationLon)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlaceGetOverlay", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SystemObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SystemObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SystemObject)));
        }

        /// <summary>
        /// Gets the place overlay for a given set of co-ordinates and a given width/height. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="z">The zoom level</param>
        /// <param name="type">The place type (a valid list of place types can be obtained from the /Place/Meta/placeTypes endpoint)</param>
        /// <param name="width">The width of the requested overlay.</param>
        /// <param name="height">The height of the requested overlay.</param>
        /// <param name="lat"></param>
        /// <param name="lon"></param>
        /// <param name="locationLat"></param>
        /// <param name="locationLon"></param>
        /// <returns>Task of SystemObject</returns>
        public async System.Threading.Tasks.Task<SystemObject> PlaceGetOverlayAsync (int? z, List<string> type, int? width, int? height, string lat, string lon, double? locationLat, double? locationLon)
        {
             ApiResponse<SystemObject> localVarResponse = await PlaceGetOverlayAsyncWithHttpInfo(z, type, width, height, lat, lon, locationLat, locationLon);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the place overlay for a given set of co-ordinates and a given width/height. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="z">The zoom level</param>
        /// <param name="type">The place type (a valid list of place types can be obtained from the /Place/Meta/placeTypes endpoint)</param>
        /// <param name="width">The width of the requested overlay.</param>
        /// <param name="height">The height of the requested overlay.</param>
        /// <param name="lat"></param>
        /// <param name="lon"></param>
        /// <param name="locationLat"></param>
        /// <param name="locationLon"></param>
        /// <returns>Task of ApiResponse (SystemObject)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SystemObject>> PlaceGetOverlayAsyncWithHttpInfo (int? z, List<string> type, int? width, int? height, string lat, string lon, double? locationLat, double? locationLon)
        {
            // verify the required parameter 'z' is set
            if (z == null)
                throw new ApiException(400, "Missing required parameter 'z' when calling PlaceApi->PlaceGetOverlay");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling PlaceApi->PlaceGetOverlay");
            // verify the required parameter 'width' is set
            if (width == null)
                throw new ApiException(400, "Missing required parameter 'width' when calling PlaceApi->PlaceGetOverlay");
            // verify the required parameter 'height' is set
            if (height == null)
                throw new ApiException(400, "Missing required parameter 'height' when calling PlaceApi->PlaceGetOverlay");
            // verify the required parameter 'lat' is set
            if (lat == null)
                throw new ApiException(400, "Missing required parameter 'lat' when calling PlaceApi->PlaceGetOverlay");
            // verify the required parameter 'lon' is set
            if (lon == null)
                throw new ApiException(400, "Missing required parameter 'lon' when calling PlaceApi->PlaceGetOverlay");
            // verify the required parameter 'locationLat' is set
            if (locationLat == null)
                throw new ApiException(400, "Missing required parameter 'locationLat' when calling PlaceApi->PlaceGetOverlay");
            // verify the required parameter 'locationLon' is set
            if (locationLon == null)
                throw new ApiException(400, "Missing required parameter 'locationLon' when calling PlaceApi->PlaceGetOverlay");

            var localVarPath = "/Place/{type}/overlay/{z}/{Lat}/{Lon}/{width}/{height}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (z != null) localVarPathParams.Add("z", this.Configuration.ApiClient.ParameterToString(z)); // path parameter
            if (type != null) localVarPathParams.Add("type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (width != null) localVarPathParams.Add("width", this.Configuration.ApiClient.ParameterToString(width)); // path parameter
            if (height != null) localVarPathParams.Add("height", this.Configuration.ApiClient.ParameterToString(height)); // path parameter
            if (lat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lat", lat)); // query parameter
            if (lon != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lon", lon)); // query parameter
            if (locationLat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "location.lat", locationLat)); // query parameter
            if (locationLon != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "location.lon", locationLon)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlaceGetOverlay", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SystemObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SystemObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SystemObject)));
        }

        /// <summary>
        /// Gets the set of streets associated with a post code. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postcode"></param>
        /// <param name="postcodeInputPostcode"> (optional)</param>
        /// <returns>SystemObject</returns>
        public SystemObject PlaceGetStreetsByPostCode (string postcode, string postcodeInputPostcode = null)
        {
             ApiResponse<SystemObject> localVarResponse = PlaceGetStreetsByPostCodeWithHttpInfo(postcode, postcodeInputPostcode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the set of streets associated with a post code. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postcode"></param>
        /// <param name="postcodeInputPostcode"> (optional)</param>
        /// <returns>ApiResponse of SystemObject</returns>
        public ApiResponse< SystemObject > PlaceGetStreetsByPostCodeWithHttpInfo (string postcode, string postcodeInputPostcode = null)
        {
            // verify the required parameter 'postcode' is set
            if (postcode == null)
                throw new ApiException(400, "Missing required parameter 'postcode' when calling PlaceApi->PlaceGetStreetsByPostCode");

            var localVarPath = "/Place/Address/Streets/{Postcode}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (postcode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "postcode", postcode)); // query parameter
            if (postcodeInputPostcode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "postcodeInput.postcode", postcodeInputPostcode)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlaceGetStreetsByPostCode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SystemObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SystemObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SystemObject)));
        }

        /// <summary>
        /// Gets the set of streets associated with a post code. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postcode"></param>
        /// <param name="postcodeInputPostcode"> (optional)</param>
        /// <returns>Task of SystemObject</returns>
        public async System.Threading.Tasks.Task<SystemObject> PlaceGetStreetsByPostCodeAsync (string postcode, string postcodeInputPostcode = null)
        {
             ApiResponse<SystemObject> localVarResponse = await PlaceGetStreetsByPostCodeAsyncWithHttpInfo(postcode, postcodeInputPostcode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the set of streets associated with a post code. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postcode"></param>
        /// <param name="postcodeInputPostcode"> (optional)</param>
        /// <returns>Task of ApiResponse (SystemObject)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SystemObject>> PlaceGetStreetsByPostCodeAsyncWithHttpInfo (string postcode, string postcodeInputPostcode = null)
        {
            // verify the required parameter 'postcode' is set
            if (postcode == null)
                throw new ApiException(400, "Missing required parameter 'postcode' when calling PlaceApi->PlaceGetStreetsByPostCode");

            var localVarPath = "/Place/Address/Streets/{Postcode}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (postcode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "postcode", postcode)); // query parameter
            if (postcodeInputPostcode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "postcodeInput.postcode", postcodeInputPostcode)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlaceGetStreetsByPostCode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SystemObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SystemObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SystemObject)));
        }

        /// <summary>
        /// Gets a list of all of the available place property categories and keys. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TflApiPresentationEntitiesPlaceCategory&gt;</returns>
        public List<TflApiPresentationEntitiesPlaceCategory> PlaceMetaCategories ()
        {
             ApiResponse<List<TflApiPresentationEntitiesPlaceCategory>> localVarResponse = PlaceMetaCategoriesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of all of the available place property categories and keys. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TflApiPresentationEntitiesPlaceCategory&gt;</returns>
        public ApiResponse< List<TflApiPresentationEntitiesPlaceCategory> > PlaceMetaCategoriesWithHttpInfo ()
        {

            var localVarPath = "/Place/Meta/Categories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlaceMetaCategories", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TflApiPresentationEntitiesPlaceCategory>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TflApiPresentationEntitiesPlaceCategory>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TflApiPresentationEntitiesPlaceCategory>)));
        }

        /// <summary>
        /// Gets a list of all of the available place property categories and keys. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TflApiPresentationEntitiesPlaceCategory&gt;</returns>
        public async System.Threading.Tasks.Task<List<TflApiPresentationEntitiesPlaceCategory>> PlaceMetaCategoriesAsync ()
        {
             ApiResponse<List<TflApiPresentationEntitiesPlaceCategory>> localVarResponse = await PlaceMetaCategoriesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of all of the available place property categories and keys. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TflApiPresentationEntitiesPlaceCategory&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesPlaceCategory>>> PlaceMetaCategoriesAsyncWithHttpInfo ()
        {

            var localVarPath = "/Place/Meta/Categories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlaceMetaCategories", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TflApiPresentationEntitiesPlaceCategory>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TflApiPresentationEntitiesPlaceCategory>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TflApiPresentationEntitiesPlaceCategory>)));
        }

        /// <summary>
        /// Gets a list of the available types of Place. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TflApiPresentationEntitiesPlaceCategory&gt;</returns>
        public List<TflApiPresentationEntitiesPlaceCategory> PlaceMetaPlaceTypes ()
        {
             ApiResponse<List<TflApiPresentationEntitiesPlaceCategory>> localVarResponse = PlaceMetaPlaceTypesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of the available types of Place. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TflApiPresentationEntitiesPlaceCategory&gt;</returns>
        public ApiResponse< List<TflApiPresentationEntitiesPlaceCategory> > PlaceMetaPlaceTypesWithHttpInfo ()
        {

            var localVarPath = "/Place/Meta/PlaceTypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlaceMetaPlaceTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TflApiPresentationEntitiesPlaceCategory>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TflApiPresentationEntitiesPlaceCategory>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TflApiPresentationEntitiesPlaceCategory>)));
        }

        /// <summary>
        /// Gets a list of the available types of Place. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TflApiPresentationEntitiesPlaceCategory&gt;</returns>
        public async System.Threading.Tasks.Task<List<TflApiPresentationEntitiesPlaceCategory>> PlaceMetaPlaceTypesAsync ()
        {
             ApiResponse<List<TflApiPresentationEntitiesPlaceCategory>> localVarResponse = await PlaceMetaPlaceTypesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of the available types of Place. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TflApiPresentationEntitiesPlaceCategory&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesPlaceCategory>>> PlaceMetaPlaceTypesAsyncWithHttpInfo ()
        {

            var localVarPath = "/Place/Meta/PlaceTypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlaceMetaPlaceTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TflApiPresentationEntitiesPlaceCategory>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TflApiPresentationEntitiesPlaceCategory>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TflApiPresentationEntitiesPlaceCategory>)));
        }

        /// <summary>
        /// Gets all places that matches the given query 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the place, you can use the /Place/Types/{types} endpoint to get a list of places for a given type including their names.</param>
        /// <param name="types">A comma-separated list of the types to return. Max. approx 12 types. (optional)</param>
        /// <returns>List&lt;TflApiPresentationEntitiesPlace&gt;</returns>
        public List<TflApiPresentationEntitiesPlace> PlaceSearch (string name, List<string> types = null)
        {
             ApiResponse<List<TflApiPresentationEntitiesPlace>> localVarResponse = PlaceSearchWithHttpInfo(name, types);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all places that matches the given query 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the place, you can use the /Place/Types/{types} endpoint to get a list of places for a given type including their names.</param>
        /// <param name="types">A comma-separated list of the types to return. Max. approx 12 types. (optional)</param>
        /// <returns>ApiResponse of List&lt;TflApiPresentationEntitiesPlace&gt;</returns>
        public ApiResponse< List<TflApiPresentationEntitiesPlace> > PlaceSearchWithHttpInfo (string name, List<string> types = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PlaceApi->PlaceSearch");

            var localVarPath = "/Place/Search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (types != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "types", types)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlaceSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TflApiPresentationEntitiesPlace>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TflApiPresentationEntitiesPlace>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TflApiPresentationEntitiesPlace>)));
        }

        /// <summary>
        /// Gets all places that matches the given query 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the place, you can use the /Place/Types/{types} endpoint to get a list of places for a given type including their names.</param>
        /// <param name="types">A comma-separated list of the types to return. Max. approx 12 types. (optional)</param>
        /// <returns>Task of List&lt;TflApiPresentationEntitiesPlace&gt;</returns>
        public async System.Threading.Tasks.Task<List<TflApiPresentationEntitiesPlace>> PlaceSearchAsync (string name, List<string> types = null)
        {
             ApiResponse<List<TflApiPresentationEntitiesPlace>> localVarResponse = await PlaceSearchAsyncWithHttpInfo(name, types);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets all places that matches the given query 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the place, you can use the /Place/Types/{types} endpoint to get a list of places for a given type including their names.</param>
        /// <param name="types">A comma-separated list of the types to return. Max. approx 12 types. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TflApiPresentationEntitiesPlace&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesPlace>>> PlaceSearchAsyncWithHttpInfo (string name, List<string> types = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PlaceApi->PlaceSearch");

            var localVarPath = "/Place/Search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (types != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "types", types)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlaceSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TflApiPresentationEntitiesPlace>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TflApiPresentationEntitiesPlace>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TflApiPresentationEntitiesPlace>)));
        }

    }
}
