/* 
 * Transport for London Unified API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TflApiCommonPlaceGeo
    /// </summary>
    [DataContract]
    public partial class TflApiCommonPlaceGeo :  IEquatable<TflApiCommonPlaceGeo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TflApiCommonPlaceGeo" /> class.
        /// </summary>
        /// <param name="swLat">swLat.</param>
        /// <param name="swLon">swLon.</param>
        /// <param name="neLat">neLat.</param>
        /// <param name="neLon">neLon.</param>
        /// <param name="lat">lat.</param>
        /// <param name="lon">lon.</param>
        public TflApiCommonPlaceGeo(double? swLat = default(double?), double? swLon = default(double?), double? neLat = default(double?), double? neLon = default(double?), double? lat = default(double?), double? lon = default(double?))
        {
            this.SwLat = swLat;
            this.SwLon = swLon;
            this.NeLat = neLat;
            this.NeLon = neLon;
            this.Lat = lat;
            this.Lon = lon;
        }
        
        /// <summary>
        /// Gets or Sets SwLat
        /// </summary>
        [DataMember(Name="swLat", EmitDefaultValue=false)]
        public double? SwLat { get; set; }

        /// <summary>
        /// Gets or Sets SwLon
        /// </summary>
        [DataMember(Name="swLon", EmitDefaultValue=false)]
        public double? SwLon { get; set; }

        /// <summary>
        /// Gets or Sets NeLat
        /// </summary>
        [DataMember(Name="neLat", EmitDefaultValue=false)]
        public double? NeLat { get; set; }

        /// <summary>
        /// Gets or Sets NeLon
        /// </summary>
        [DataMember(Name="neLon", EmitDefaultValue=false)]
        public double? NeLon { get; set; }

        /// <summary>
        /// Gets or Sets Lat
        /// </summary>
        [DataMember(Name="lat", EmitDefaultValue=false)]
        public double? Lat { get; set; }

        /// <summary>
        /// Gets or Sets Lon
        /// </summary>
        [DataMember(Name="lon", EmitDefaultValue=false)]
        public double? Lon { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TflApiCommonPlaceGeo {\n");
            sb.Append("  SwLat: ").Append(SwLat).Append("\n");
            sb.Append("  SwLon: ").Append(SwLon).Append("\n");
            sb.Append("  NeLat: ").Append(NeLat).Append("\n");
            sb.Append("  NeLon: ").Append(NeLon).Append("\n");
            sb.Append("  Lat: ").Append(Lat).Append("\n");
            sb.Append("  Lon: ").Append(Lon).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TflApiCommonPlaceGeo);
        }

        /// <summary>
        /// Returns true if TflApiCommonPlaceGeo instances are equal
        /// </summary>
        /// <param name="input">Instance of TflApiCommonPlaceGeo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TflApiCommonPlaceGeo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SwLat == input.SwLat ||
                    (this.SwLat != null &&
                    this.SwLat.Equals(input.SwLat))
                ) && 
                (
                    this.SwLon == input.SwLon ||
                    (this.SwLon != null &&
                    this.SwLon.Equals(input.SwLon))
                ) && 
                (
                    this.NeLat == input.NeLat ||
                    (this.NeLat != null &&
                    this.NeLat.Equals(input.NeLat))
                ) && 
                (
                    this.NeLon == input.NeLon ||
                    (this.NeLon != null &&
                    this.NeLon.Equals(input.NeLon))
                ) && 
                (
                    this.Lat == input.Lat ||
                    (this.Lat != null &&
                    this.Lat.Equals(input.Lat))
                ) && 
                (
                    this.Lon == input.Lon ||
                    (this.Lon != null &&
                    this.Lon.Equals(input.Lon))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SwLat != null)
                    hashCode = hashCode * 59 + this.SwLat.GetHashCode();
                if (this.SwLon != null)
                    hashCode = hashCode * 59 + this.SwLon.GetHashCode();
                if (this.NeLat != null)
                    hashCode = hashCode * 59 + this.NeLat.GetHashCode();
                if (this.NeLon != null)
                    hashCode = hashCode * 59 + this.NeLon.GetHashCode();
                if (this.Lat != null)
                    hashCode = hashCode * 59 + this.Lat.GetHashCode();
                if (this.Lon != null)
                    hashCode = hashCode * 59 + this.Lon.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
