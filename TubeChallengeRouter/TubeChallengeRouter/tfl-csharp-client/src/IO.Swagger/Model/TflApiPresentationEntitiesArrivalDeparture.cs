/* 
 * Transport for London Unified API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// DTO to capture the prediction details
    /// </summary>
    [DataContract]
    public partial class TflApiPresentationEntitiesArrivalDeparture :  IEquatable<TflApiPresentationEntitiesArrivalDeparture>, IValidatableObject
    {
        /// <summary>
        /// Status of departure
        /// </summary>
        /// <value>Status of departure</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DepartureStatusEnum
        {
            
            /// <summary>
            /// Enum OnTime for value: OnTime
            /// </summary>
            [EnumMember(Value = "OnTime")]
            OnTime = 1,
            
            /// <summary>
            /// Enum Delayed for value: Delayed
            /// </summary>
            [EnumMember(Value = "Delayed")]
            Delayed = 2,
            
            /// <summary>
            /// Enum Cancelled for value: Cancelled
            /// </summary>
            [EnumMember(Value = "Cancelled")]
            Cancelled = 3,
            
            /// <summary>
            /// Enum NotStoppingAtStation for value: NotStoppingAtStation
            /// </summary>
            [EnumMember(Value = "NotStoppingAtStation")]
            NotStoppingAtStation = 4
        }

        /// <summary>
        /// Status of departure
        /// </summary>
        /// <value>Status of departure</value>
        [DataMember(Name="departureStatus", EmitDefaultValue=false)]
        public DepartureStatusEnum? DepartureStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TflApiPresentationEntitiesArrivalDeparture" /> class.
        /// </summary>
        /// <param name="platformName">Platform name (for bus, this is the stop letter).</param>
        /// <param name="destinationNaptanId">Naptan Identifier for the prediction&#39;s destination.</param>
        /// <param name="destinationName">Name of the destination.</param>
        /// <param name="naptanId">Identifier for the prediction.</param>
        /// <param name="stationName">Station name.</param>
        /// <param name="estimatedTimeOfArrival">Estimated time of arrival.</param>
        /// <param name="scheduledTimeOfArrival">Estimated time of arrival.</param>
        /// <param name="estimatedTimeOfDeparture">Estimated time of arrival.</param>
        /// <param name="scheduledTimeOfDeparture">Estimated time of arrival.</param>
        /// <param name="minutesAndSecondsToArrival">Estimated time of arrival.</param>
        /// <param name="minutesAndSecondsToDeparture">Estimated time of arrival.</param>
        /// <param name="cause">Reason for cancellation or delay.</param>
        /// <param name="departureStatus">Status of departure.</param>
        /// <param name="timing">Keep the original timestamp from MongoDb fo debugging purposes.</param>
        public TflApiPresentationEntitiesArrivalDeparture(string platformName = default(string), string destinationNaptanId = default(string), string destinationName = default(string), string naptanId = default(string), string stationName = default(string), DateTime? estimatedTimeOfArrival = default(DateTime?), DateTime? scheduledTimeOfArrival = default(DateTime?), DateTime? estimatedTimeOfDeparture = default(DateTime?), DateTime? scheduledTimeOfDeparture = default(DateTime?), string minutesAndSecondsToArrival = default(string), string minutesAndSecondsToDeparture = default(string), string cause = default(string), DepartureStatusEnum? departureStatus = default(DepartureStatusEnum?), TflApiPresentationEntitiesPredictionTiming timing = default(TflApiPresentationEntitiesPredictionTiming))
        {
            this.PlatformName = platformName;
            this.DestinationNaptanId = destinationNaptanId;
            this.DestinationName = destinationName;
            this.NaptanId = naptanId;
            this.StationName = stationName;
            this.EstimatedTimeOfArrival = estimatedTimeOfArrival;
            this.ScheduledTimeOfArrival = scheduledTimeOfArrival;
            this.EstimatedTimeOfDeparture = estimatedTimeOfDeparture;
            this.ScheduledTimeOfDeparture = scheduledTimeOfDeparture;
            this.MinutesAndSecondsToArrival = minutesAndSecondsToArrival;
            this.MinutesAndSecondsToDeparture = minutesAndSecondsToDeparture;
            this.Cause = cause;
            this.DepartureStatus = departureStatus;
            this.Timing = timing;
        }
        
        /// <summary>
        /// Platform name (for bus, this is the stop letter)
        /// </summary>
        /// <value>Platform name (for bus, this is the stop letter)</value>
        [DataMember(Name="platformName", EmitDefaultValue=false)]
        public string PlatformName { get; set; }

        /// <summary>
        /// Naptan Identifier for the prediction&#39;s destination
        /// </summary>
        /// <value>Naptan Identifier for the prediction&#39;s destination</value>
        [DataMember(Name="destinationNaptanId", EmitDefaultValue=false)]
        public string DestinationNaptanId { get; set; }

        /// <summary>
        /// Name of the destination
        /// </summary>
        /// <value>Name of the destination</value>
        [DataMember(Name="destinationName", EmitDefaultValue=false)]
        public string DestinationName { get; set; }

        /// <summary>
        /// Identifier for the prediction
        /// </summary>
        /// <value>Identifier for the prediction</value>
        [DataMember(Name="naptanId", EmitDefaultValue=false)]
        public string NaptanId { get; set; }

        /// <summary>
        /// Station name
        /// </summary>
        /// <value>Station name</value>
        [DataMember(Name="stationName", EmitDefaultValue=false)]
        public string StationName { get; set; }

        /// <summary>
        /// Estimated time of arrival
        /// </summary>
        /// <value>Estimated time of arrival</value>
        [DataMember(Name="estimatedTimeOfArrival", EmitDefaultValue=false)]
        public DateTime? EstimatedTimeOfArrival { get; set; }

        /// <summary>
        /// Estimated time of arrival
        /// </summary>
        /// <value>Estimated time of arrival</value>
        [DataMember(Name="scheduledTimeOfArrival", EmitDefaultValue=false)]
        public DateTime? ScheduledTimeOfArrival { get; set; }

        /// <summary>
        /// Estimated time of arrival
        /// </summary>
        /// <value>Estimated time of arrival</value>
        [DataMember(Name="estimatedTimeOfDeparture", EmitDefaultValue=false)]
        public DateTime? EstimatedTimeOfDeparture { get; set; }

        /// <summary>
        /// Estimated time of arrival
        /// </summary>
        /// <value>Estimated time of arrival</value>
        [DataMember(Name="scheduledTimeOfDeparture", EmitDefaultValue=false)]
        public DateTime? ScheduledTimeOfDeparture { get; set; }

        /// <summary>
        /// Estimated time of arrival
        /// </summary>
        /// <value>Estimated time of arrival</value>
        [DataMember(Name="minutesAndSecondsToArrival", EmitDefaultValue=false)]
        public string MinutesAndSecondsToArrival { get; set; }

        /// <summary>
        /// Estimated time of arrival
        /// </summary>
        /// <value>Estimated time of arrival</value>
        [DataMember(Name="minutesAndSecondsToDeparture", EmitDefaultValue=false)]
        public string MinutesAndSecondsToDeparture { get; set; }

        /// <summary>
        /// Reason for cancellation or delay
        /// </summary>
        /// <value>Reason for cancellation or delay</value>
        [DataMember(Name="cause", EmitDefaultValue=false)]
        public string Cause { get; set; }


        /// <summary>
        /// Keep the original timestamp from MongoDb fo debugging purposes
        /// </summary>
        /// <value>Keep the original timestamp from MongoDb fo debugging purposes</value>
        [DataMember(Name="timing", EmitDefaultValue=false)]
        public TflApiPresentationEntitiesPredictionTiming Timing { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TflApiPresentationEntitiesArrivalDeparture {\n");
            sb.Append("  PlatformName: ").Append(PlatformName).Append("\n");
            sb.Append("  DestinationNaptanId: ").Append(DestinationNaptanId).Append("\n");
            sb.Append("  DestinationName: ").Append(DestinationName).Append("\n");
            sb.Append("  NaptanId: ").Append(NaptanId).Append("\n");
            sb.Append("  StationName: ").Append(StationName).Append("\n");
            sb.Append("  EstimatedTimeOfArrival: ").Append(EstimatedTimeOfArrival).Append("\n");
            sb.Append("  ScheduledTimeOfArrival: ").Append(ScheduledTimeOfArrival).Append("\n");
            sb.Append("  EstimatedTimeOfDeparture: ").Append(EstimatedTimeOfDeparture).Append("\n");
            sb.Append("  ScheduledTimeOfDeparture: ").Append(ScheduledTimeOfDeparture).Append("\n");
            sb.Append("  MinutesAndSecondsToArrival: ").Append(MinutesAndSecondsToArrival).Append("\n");
            sb.Append("  MinutesAndSecondsToDeparture: ").Append(MinutesAndSecondsToDeparture).Append("\n");
            sb.Append("  Cause: ").Append(Cause).Append("\n");
            sb.Append("  DepartureStatus: ").Append(DepartureStatus).Append("\n");
            sb.Append("  Timing: ").Append(Timing).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TflApiPresentationEntitiesArrivalDeparture);
        }

        /// <summary>
        /// Returns true if TflApiPresentationEntitiesArrivalDeparture instances are equal
        /// </summary>
        /// <param name="input">Instance of TflApiPresentationEntitiesArrivalDeparture to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TflApiPresentationEntitiesArrivalDeparture input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PlatformName == input.PlatformName ||
                    (this.PlatformName != null &&
                    this.PlatformName.Equals(input.PlatformName))
                ) && 
                (
                    this.DestinationNaptanId == input.DestinationNaptanId ||
                    (this.DestinationNaptanId != null &&
                    this.DestinationNaptanId.Equals(input.DestinationNaptanId))
                ) && 
                (
                    this.DestinationName == input.DestinationName ||
                    (this.DestinationName != null &&
                    this.DestinationName.Equals(input.DestinationName))
                ) && 
                (
                    this.NaptanId == input.NaptanId ||
                    (this.NaptanId != null &&
                    this.NaptanId.Equals(input.NaptanId))
                ) && 
                (
                    this.StationName == input.StationName ||
                    (this.StationName != null &&
                    this.StationName.Equals(input.StationName))
                ) && 
                (
                    this.EstimatedTimeOfArrival == input.EstimatedTimeOfArrival ||
                    (this.EstimatedTimeOfArrival != null &&
                    this.EstimatedTimeOfArrival.Equals(input.EstimatedTimeOfArrival))
                ) && 
                (
                    this.ScheduledTimeOfArrival == input.ScheduledTimeOfArrival ||
                    (this.ScheduledTimeOfArrival != null &&
                    this.ScheduledTimeOfArrival.Equals(input.ScheduledTimeOfArrival))
                ) && 
                (
                    this.EstimatedTimeOfDeparture == input.EstimatedTimeOfDeparture ||
                    (this.EstimatedTimeOfDeparture != null &&
                    this.EstimatedTimeOfDeparture.Equals(input.EstimatedTimeOfDeparture))
                ) && 
                (
                    this.ScheduledTimeOfDeparture == input.ScheduledTimeOfDeparture ||
                    (this.ScheduledTimeOfDeparture != null &&
                    this.ScheduledTimeOfDeparture.Equals(input.ScheduledTimeOfDeparture))
                ) && 
                (
                    this.MinutesAndSecondsToArrival == input.MinutesAndSecondsToArrival ||
                    (this.MinutesAndSecondsToArrival != null &&
                    this.MinutesAndSecondsToArrival.Equals(input.MinutesAndSecondsToArrival))
                ) && 
                (
                    this.MinutesAndSecondsToDeparture == input.MinutesAndSecondsToDeparture ||
                    (this.MinutesAndSecondsToDeparture != null &&
                    this.MinutesAndSecondsToDeparture.Equals(input.MinutesAndSecondsToDeparture))
                ) && 
                (
                    this.Cause == input.Cause ||
                    (this.Cause != null &&
                    this.Cause.Equals(input.Cause))
                ) && 
                (
                    this.DepartureStatus == input.DepartureStatus ||
                    (this.DepartureStatus != null &&
                    this.DepartureStatus.Equals(input.DepartureStatus))
                ) && 
                (
                    this.Timing == input.Timing ||
                    (this.Timing != null &&
                    this.Timing.Equals(input.Timing))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PlatformName != null)
                    hashCode = hashCode * 59 + this.PlatformName.GetHashCode();
                if (this.DestinationNaptanId != null)
                    hashCode = hashCode * 59 + this.DestinationNaptanId.GetHashCode();
                if (this.DestinationName != null)
                    hashCode = hashCode * 59 + this.DestinationName.GetHashCode();
                if (this.NaptanId != null)
                    hashCode = hashCode * 59 + this.NaptanId.GetHashCode();
                if (this.StationName != null)
                    hashCode = hashCode * 59 + this.StationName.GetHashCode();
                if (this.EstimatedTimeOfArrival != null)
                    hashCode = hashCode * 59 + this.EstimatedTimeOfArrival.GetHashCode();
                if (this.ScheduledTimeOfArrival != null)
                    hashCode = hashCode * 59 + this.ScheduledTimeOfArrival.GetHashCode();
                if (this.EstimatedTimeOfDeparture != null)
                    hashCode = hashCode * 59 + this.EstimatedTimeOfDeparture.GetHashCode();
                if (this.ScheduledTimeOfDeparture != null)
                    hashCode = hashCode * 59 + this.ScheduledTimeOfDeparture.GetHashCode();
                if (this.MinutesAndSecondsToArrival != null)
                    hashCode = hashCode * 59 + this.MinutesAndSecondsToArrival.GetHashCode();
                if (this.MinutesAndSecondsToDeparture != null)
                    hashCode = hashCode * 59 + this.MinutesAndSecondsToDeparture.GetHashCode();
                if (this.Cause != null)
                    hashCode = hashCode * 59 + this.Cause.GetHashCode();
                if (this.DepartureStatus != null)
                    hashCode = hashCode * 59 + this.DepartureStatus.GetHashCode();
                if (this.Timing != null)
                    hashCode = hashCode * 59 + this.Timing.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
