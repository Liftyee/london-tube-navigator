/* 
 * Transport for London Unified API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// keep old RouteSection name so as not to break contract
    /// </summary>
    [DataContract]
    public partial class TflApiPresentationEntitiesDisruptedRoute :  IEquatable<TflApiPresentationEntitiesDisruptedRoute>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TflApiPresentationEntitiesDisruptedRoute" /> class.
        /// </summary>
        /// <param name="id">The Id of the route.</param>
        /// <param name="lineId">The Id of the Line.</param>
        /// <param name="routeCode">The route code.</param>
        /// <param name="name">Name such as \&quot;72\&quot;.</param>
        /// <param name="lineString">The co-ordinates of the route&#39;s path as a geoJSON lineString.</param>
        /// <param name="direction">Inbound or Outbound.</param>
        /// <param name="originationName">The name of the Origin StopPoint.</param>
        /// <param name="destinationName">The name of the Destination StopPoint.</param>
        /// <param name="via">(where applicable) via Charing Cross / Bank / King&#39;s Cross / Embankment / Newbury Park / Woodford.</param>
        /// <param name="isEntireRouteSection">Whether this represents the entire route section.</param>
        /// <param name="validTo">The DateTime that the Service containing this Route is valid until..</param>
        /// <param name="validFrom">The DateTime that the Service containing this Route is valid from..</param>
        /// <param name="routeSectionNaptanEntrySequence">routeSectionNaptanEntrySequence.</param>
        public TflApiPresentationEntitiesDisruptedRoute(string id = default(string), string lineId = default(string), string routeCode = default(string), string name = default(string), string lineString = default(string), string direction = default(string), string originationName = default(string), string destinationName = default(string), TflApiPresentationEntitiesRouteSectionNaptanEntrySequence via = default(TflApiPresentationEntitiesRouteSectionNaptanEntrySequence), bool? isEntireRouteSection = default(bool?), DateTime? validTo = default(DateTime?), DateTime? validFrom = default(DateTime?), List<TflApiPresentationEntitiesRouteSectionNaptanEntrySequence> routeSectionNaptanEntrySequence = default(List<TflApiPresentationEntitiesRouteSectionNaptanEntrySequence>))
        {
            this.Id = id;
            this.LineId = lineId;
            this.RouteCode = routeCode;
            this.Name = name;
            this.LineString = lineString;
            this.Direction = direction;
            this.OriginationName = originationName;
            this.DestinationName = destinationName;
            this.Via = via;
            this.IsEntireRouteSection = isEntireRouteSection;
            this.ValidTo = validTo;
            this.ValidFrom = validFrom;
            this.RouteSectionNaptanEntrySequence = routeSectionNaptanEntrySequence;
        }
        
        /// <summary>
        /// The Id of the route
        /// </summary>
        /// <value>The Id of the route</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The Id of the Line
        /// </summary>
        /// <value>The Id of the Line</value>
        [DataMember(Name="lineId", EmitDefaultValue=false)]
        public string LineId { get; set; }

        /// <summary>
        /// The route code
        /// </summary>
        /// <value>The route code</value>
        [DataMember(Name="routeCode", EmitDefaultValue=false)]
        public string RouteCode { get; set; }

        /// <summary>
        /// Name such as \&quot;72\&quot;
        /// </summary>
        /// <value>Name such as \&quot;72\&quot;</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The co-ordinates of the route&#39;s path as a geoJSON lineString
        /// </summary>
        /// <value>The co-ordinates of the route&#39;s path as a geoJSON lineString</value>
        [DataMember(Name="lineString", EmitDefaultValue=false)]
        public string LineString { get; set; }

        /// <summary>
        /// Inbound or Outbound
        /// </summary>
        /// <value>Inbound or Outbound</value>
        [DataMember(Name="direction", EmitDefaultValue=false)]
        public string Direction { get; set; }

        /// <summary>
        /// The name of the Origin StopPoint
        /// </summary>
        /// <value>The name of the Origin StopPoint</value>
        [DataMember(Name="originationName", EmitDefaultValue=false)]
        public string OriginationName { get; set; }

        /// <summary>
        /// The name of the Destination StopPoint
        /// </summary>
        /// <value>The name of the Destination StopPoint</value>
        [DataMember(Name="destinationName", EmitDefaultValue=false)]
        public string DestinationName { get; set; }

        /// <summary>
        /// (where applicable) via Charing Cross / Bank / King&#39;s Cross / Embankment / Newbury Park / Woodford
        /// </summary>
        /// <value>(where applicable) via Charing Cross / Bank / King&#39;s Cross / Embankment / Newbury Park / Woodford</value>
        [DataMember(Name="via", EmitDefaultValue=false)]
        public TflApiPresentationEntitiesRouteSectionNaptanEntrySequence Via { get; set; }

        /// <summary>
        /// Whether this represents the entire route section
        /// </summary>
        /// <value>Whether this represents the entire route section</value>
        [DataMember(Name="isEntireRouteSection", EmitDefaultValue=false)]
        public bool? IsEntireRouteSection { get; set; }

        /// <summary>
        /// The DateTime that the Service containing this Route is valid until.
        /// </summary>
        /// <value>The DateTime that the Service containing this Route is valid until.</value>
        [DataMember(Name="validTo", EmitDefaultValue=false)]
        public DateTime? ValidTo { get; set; }

        /// <summary>
        /// The DateTime that the Service containing this Route is valid from.
        /// </summary>
        /// <value>The DateTime that the Service containing this Route is valid from.</value>
        [DataMember(Name="validFrom", EmitDefaultValue=false)]
        public DateTime? ValidFrom { get; set; }

        /// <summary>
        /// Gets or Sets RouteSectionNaptanEntrySequence
        /// </summary>
        [DataMember(Name="routeSectionNaptanEntrySequence", EmitDefaultValue=false)]
        public List<TflApiPresentationEntitiesRouteSectionNaptanEntrySequence> RouteSectionNaptanEntrySequence { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TflApiPresentationEntitiesDisruptedRoute {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LineId: ").Append(LineId).Append("\n");
            sb.Append("  RouteCode: ").Append(RouteCode).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  LineString: ").Append(LineString).Append("\n");
            sb.Append("  Direction: ").Append(Direction).Append("\n");
            sb.Append("  OriginationName: ").Append(OriginationName).Append("\n");
            sb.Append("  DestinationName: ").Append(DestinationName).Append("\n");
            sb.Append("  Via: ").Append(Via).Append("\n");
            sb.Append("  IsEntireRouteSection: ").Append(IsEntireRouteSection).Append("\n");
            sb.Append("  ValidTo: ").Append(ValidTo).Append("\n");
            sb.Append("  ValidFrom: ").Append(ValidFrom).Append("\n");
            sb.Append("  RouteSectionNaptanEntrySequence: ").Append(RouteSectionNaptanEntrySequence).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TflApiPresentationEntitiesDisruptedRoute);
        }

        /// <summary>
        /// Returns true if TflApiPresentationEntitiesDisruptedRoute instances are equal
        /// </summary>
        /// <param name="input">Instance of TflApiPresentationEntitiesDisruptedRoute to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TflApiPresentationEntitiesDisruptedRoute input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.LineId == input.LineId ||
                    (this.LineId != null &&
                    this.LineId.Equals(input.LineId))
                ) && 
                (
                    this.RouteCode == input.RouteCode ||
                    (this.RouteCode != null &&
                    this.RouteCode.Equals(input.RouteCode))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.LineString == input.LineString ||
                    (this.LineString != null &&
                    this.LineString.Equals(input.LineString))
                ) && 
                (
                    this.Direction == input.Direction ||
                    (this.Direction != null &&
                    this.Direction.Equals(input.Direction))
                ) && 
                (
                    this.OriginationName == input.OriginationName ||
                    (this.OriginationName != null &&
                    this.OriginationName.Equals(input.OriginationName))
                ) && 
                (
                    this.DestinationName == input.DestinationName ||
                    (this.DestinationName != null &&
                    this.DestinationName.Equals(input.DestinationName))
                ) && 
                (
                    this.Via == input.Via ||
                    (this.Via != null &&
                    this.Via.Equals(input.Via))
                ) && 
                (
                    this.IsEntireRouteSection == input.IsEntireRouteSection ||
                    (this.IsEntireRouteSection != null &&
                    this.IsEntireRouteSection.Equals(input.IsEntireRouteSection))
                ) && 
                (
                    this.ValidTo == input.ValidTo ||
                    (this.ValidTo != null &&
                    this.ValidTo.Equals(input.ValidTo))
                ) && 
                (
                    this.ValidFrom == input.ValidFrom ||
                    (this.ValidFrom != null &&
                    this.ValidFrom.Equals(input.ValidFrom))
                ) && 
                (
                    this.RouteSectionNaptanEntrySequence == input.RouteSectionNaptanEntrySequence ||
                    this.RouteSectionNaptanEntrySequence != null &&
                    this.RouteSectionNaptanEntrySequence.SequenceEqual(input.RouteSectionNaptanEntrySequence)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.LineId != null)
                    hashCode = hashCode * 59 + this.LineId.GetHashCode();
                if (this.RouteCode != null)
                    hashCode = hashCode * 59 + this.RouteCode.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.LineString != null)
                    hashCode = hashCode * 59 + this.LineString.GetHashCode();
                if (this.Direction != null)
                    hashCode = hashCode * 59 + this.Direction.GetHashCode();
                if (this.OriginationName != null)
                    hashCode = hashCode * 59 + this.OriginationName.GetHashCode();
                if (this.DestinationName != null)
                    hashCode = hashCode * 59 + this.DestinationName.GetHashCode();
                if (this.Via != null)
                    hashCode = hashCode * 59 + this.Via.GetHashCode();
                if (this.IsEntireRouteSection != null)
                    hashCode = hashCode * 59 + this.IsEntireRouteSection.GetHashCode();
                if (this.ValidTo != null)
                    hashCode = hashCode * 59 + this.ValidTo.GetHashCode();
                if (this.ValidFrom != null)
                    hashCode = hashCode * 59 + this.ValidFrom.GetHashCode();
                if (this.RouteSectionNaptanEntrySequence != null)
                    hashCode = hashCode * 59 + this.RouteSectionNaptanEntrySequence.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
