/* 
 * Transport for London Unified API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TflApiPresentationEntitiesFaresFareStation
    /// </summary>
    [DataContract]
    public partial class TflApiPresentationEntitiesFaresFareStation :  IEquatable<TflApiPresentationEntitiesFaresFareStation>, IValidatableObject
    {
        /// <summary>
        /// Defines FareCategory
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FareCategoryEnum
        {
            
            /// <summary>
            /// Enum Cash for value: Cash
            /// </summary>
            [EnumMember(Value = "Cash")]
            Cash = 1,
            
            /// <summary>
            /// Enum Oyster for value: Oyster
            /// </summary>
            [EnumMember(Value = "Oyster")]
            Oyster = 2,
            
            /// <summary>
            /// Enum Contactless for value: Contactless
            /// </summary>
            [EnumMember(Value = "Contactless")]
            Contactless = 3,
            
            /// <summary>
            /// Enum ContactlessOnly for value: ContactlessOnly
            /// </summary>
            [EnumMember(Value = "ContactlessOnly")]
            ContactlessOnly = 4,
            
            /// <summary>
            /// Enum All for value: All
            /// </summary>
            [EnumMember(Value = "All")]
            All = 5
        }

        /// <summary>
        /// Gets or Sets FareCategory
        /// </summary>
        [DataMember(Name="fareCategory", EmitDefaultValue=false)]
        public FareCategoryEnum? FareCategory { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TflApiPresentationEntitiesFaresFareStation" /> class.
        /// </summary>
        /// <param name="atcoCode">atcoCode.</param>
        /// <param name="commonName">commonName.</param>
        /// <param name="fareCategory">fareCategory.</param>
        public TflApiPresentationEntitiesFaresFareStation(string atcoCode = default(string), string commonName = default(string), FareCategoryEnum? fareCategory = default(FareCategoryEnum?))
        {
            this.AtcoCode = atcoCode;
            this.CommonName = commonName;
            this.FareCategory = fareCategory;
        }
        
        /// <summary>
        /// Gets or Sets AtcoCode
        /// </summary>
        [DataMember(Name="atcoCode", EmitDefaultValue=false)]
        public string AtcoCode { get; set; }

        /// <summary>
        /// Gets or Sets CommonName
        /// </summary>
        [DataMember(Name="commonName", EmitDefaultValue=false)]
        public string CommonName { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TflApiPresentationEntitiesFaresFareStation {\n");
            sb.Append("  AtcoCode: ").Append(AtcoCode).Append("\n");
            sb.Append("  CommonName: ").Append(CommonName).Append("\n");
            sb.Append("  FareCategory: ").Append(FareCategory).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TflApiPresentationEntitiesFaresFareStation);
        }

        /// <summary>
        /// Returns true if TflApiPresentationEntitiesFaresFareStation instances are equal
        /// </summary>
        /// <param name="input">Instance of TflApiPresentationEntitiesFaresFareStation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TflApiPresentationEntitiesFaresFareStation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AtcoCode == input.AtcoCode ||
                    (this.AtcoCode != null &&
                    this.AtcoCode.Equals(input.AtcoCode))
                ) && 
                (
                    this.CommonName == input.CommonName ||
                    (this.CommonName != null &&
                    this.CommonName.Equals(input.CommonName))
                ) && 
                (
                    this.FareCategory == input.FareCategory ||
                    (this.FareCategory != null &&
                    this.FareCategory.Equals(input.FareCategory))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AtcoCode != null)
                    hashCode = hashCode * 59 + this.AtcoCode.GetHashCode();
                if (this.CommonName != null)
                    hashCode = hashCode * 59 + this.CommonName.GetHashCode();
                if (this.FareCategory != null)
                    hashCode = hashCode * 59 + this.FareCategory.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
