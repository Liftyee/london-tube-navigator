/* 
 * Transport for London Unified API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TflApiPresentationEntitiesFaresRecommendation
    /// </summary>
    [DataContract]
    public partial class TflApiPresentationEntitiesFaresRecommendation :  IEquatable<TflApiPresentationEntitiesFaresRecommendation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TflApiPresentationEntitiesFaresRecommendation" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="rule">rule.</param>
        /// <param name="rank">rank.</param>
        /// <param name="fareType">fareType.</param>
        /// <param name="product">product.</param>
        /// <param name="ticketType">ticketType.</param>
        /// <param name="ticketTime">ticketTime.</param>
        /// <param name="productType">productType.</param>
        /// <param name="discountCard">discountCard.</param>
        /// <param name="zones">zones.</param>
        /// <param name="cost">cost.</param>
        /// <param name="priceDescription">priceDescription.</param>
        /// <param name="priceComparison">priceComparison.</param>
        /// <param name="recommendedTopUp">recommendedTopUp.</param>
        /// <param name="notes">notes.</param>
        /// <param name="keyFeatures">keyFeatures.</param>
        /// <param name="gettingYourTicket">gettingYourTicket.</param>
        /// <param name="singleFare">singleFare.</param>
        public TflApiPresentationEntitiesFaresRecommendation(int? id = default(int?), int? rule = default(int?), int? rank = default(int?), string fareType = default(string), string product = default(string), string ticketType = default(string), string ticketTime = default(string), string productType = default(string), string discountCard = default(string), string zones = default(string), string cost = default(string), string priceDescription = default(string), string priceComparison = default(string), string recommendedTopUp = default(string), List<TflApiPresentationEntitiesMessage> notes = default(List<TflApiPresentationEntitiesMessage>), List<TflApiPresentationEntitiesMessage> keyFeatures = default(List<TflApiPresentationEntitiesMessage>), List<TflApiPresentationEntitiesMessage> gettingYourTicket = default(List<TflApiPresentationEntitiesMessage>), double? singleFare = default(double?))
        {
            this.Id = id;
            this.Rule = rule;
            this.Rank = rank;
            this.FareType = fareType;
            this.Product = product;
            this.TicketType = ticketType;
            this.TicketTime = ticketTime;
            this.ProductType = productType;
            this.DiscountCard = discountCard;
            this.Zones = zones;
            this.Cost = cost;
            this.PriceDescription = priceDescription;
            this.PriceComparison = priceComparison;
            this.RecommendedTopUp = recommendedTopUp;
            this.Notes = notes;
            this.KeyFeatures = keyFeatures;
            this.GettingYourTicket = gettingYourTicket;
            this.SingleFare = singleFare;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets Rule
        /// </summary>
        [DataMember(Name="rule", EmitDefaultValue=false)]
        public int? Rule { get; set; }

        /// <summary>
        /// Gets or Sets Rank
        /// </summary>
        [DataMember(Name="rank", EmitDefaultValue=false)]
        public int? Rank { get; set; }

        /// <summary>
        /// Gets or Sets FareType
        /// </summary>
        [DataMember(Name="fareType", EmitDefaultValue=false)]
        public string FareType { get; set; }

        /// <summary>
        /// Gets or Sets Product
        /// </summary>
        [DataMember(Name="product", EmitDefaultValue=false)]
        public string Product { get; set; }

        /// <summary>
        /// Gets or Sets TicketType
        /// </summary>
        [DataMember(Name="ticketType", EmitDefaultValue=false)]
        public string TicketType { get; set; }

        /// <summary>
        /// Gets or Sets TicketTime
        /// </summary>
        [DataMember(Name="ticketTime", EmitDefaultValue=false)]
        public string TicketTime { get; set; }

        /// <summary>
        /// Gets or Sets ProductType
        /// </summary>
        [DataMember(Name="productType", EmitDefaultValue=false)]
        public string ProductType { get; set; }

        /// <summary>
        /// Gets or Sets DiscountCard
        /// </summary>
        [DataMember(Name="discountCard", EmitDefaultValue=false)]
        public string DiscountCard { get; set; }

        /// <summary>
        /// Gets or Sets Zones
        /// </summary>
        [DataMember(Name="zones", EmitDefaultValue=false)]
        public string Zones { get; set; }

        /// <summary>
        /// Gets or Sets Cost
        /// </summary>
        [DataMember(Name="cost", EmitDefaultValue=false)]
        public string Cost { get; set; }

        /// <summary>
        /// Gets or Sets PriceDescription
        /// </summary>
        [DataMember(Name="priceDescription", EmitDefaultValue=false)]
        public string PriceDescription { get; set; }

        /// <summary>
        /// Gets or Sets PriceComparison
        /// </summary>
        [DataMember(Name="priceComparison", EmitDefaultValue=false)]
        public string PriceComparison { get; set; }

        /// <summary>
        /// Gets or Sets RecommendedTopUp
        /// </summary>
        [DataMember(Name="recommendedTopUp", EmitDefaultValue=false)]
        public string RecommendedTopUp { get; set; }

        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        [DataMember(Name="notes", EmitDefaultValue=false)]
        public List<TflApiPresentationEntitiesMessage> Notes { get; set; }

        /// <summary>
        /// Gets or Sets KeyFeatures
        /// </summary>
        [DataMember(Name="keyFeatures", EmitDefaultValue=false)]
        public List<TflApiPresentationEntitiesMessage> KeyFeatures { get; set; }

        /// <summary>
        /// Gets or Sets GettingYourTicket
        /// </summary>
        [DataMember(Name="gettingYourTicket", EmitDefaultValue=false)]
        public List<TflApiPresentationEntitiesMessage> GettingYourTicket { get; set; }

        /// <summary>
        /// Gets or Sets SingleFare
        /// </summary>
        [DataMember(Name="singleFare", EmitDefaultValue=false)]
        public double? SingleFare { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TflApiPresentationEntitiesFaresRecommendation {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Rule: ").Append(Rule).Append("\n");
            sb.Append("  Rank: ").Append(Rank).Append("\n");
            sb.Append("  FareType: ").Append(FareType).Append("\n");
            sb.Append("  Product: ").Append(Product).Append("\n");
            sb.Append("  TicketType: ").Append(TicketType).Append("\n");
            sb.Append("  TicketTime: ").Append(TicketTime).Append("\n");
            sb.Append("  ProductType: ").Append(ProductType).Append("\n");
            sb.Append("  DiscountCard: ").Append(DiscountCard).Append("\n");
            sb.Append("  Zones: ").Append(Zones).Append("\n");
            sb.Append("  Cost: ").Append(Cost).Append("\n");
            sb.Append("  PriceDescription: ").Append(PriceDescription).Append("\n");
            sb.Append("  PriceComparison: ").Append(PriceComparison).Append("\n");
            sb.Append("  RecommendedTopUp: ").Append(RecommendedTopUp).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  KeyFeatures: ").Append(KeyFeatures).Append("\n");
            sb.Append("  GettingYourTicket: ").Append(GettingYourTicket).Append("\n");
            sb.Append("  SingleFare: ").Append(SingleFare).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TflApiPresentationEntitiesFaresRecommendation);
        }

        /// <summary>
        /// Returns true if TflApiPresentationEntitiesFaresRecommendation instances are equal
        /// </summary>
        /// <param name="input">Instance of TflApiPresentationEntitiesFaresRecommendation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TflApiPresentationEntitiesFaresRecommendation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Rule == input.Rule ||
                    (this.Rule != null &&
                    this.Rule.Equals(input.Rule))
                ) && 
                (
                    this.Rank == input.Rank ||
                    (this.Rank != null &&
                    this.Rank.Equals(input.Rank))
                ) && 
                (
                    this.FareType == input.FareType ||
                    (this.FareType != null &&
                    this.FareType.Equals(input.FareType))
                ) && 
                (
                    this.Product == input.Product ||
                    (this.Product != null &&
                    this.Product.Equals(input.Product))
                ) && 
                (
                    this.TicketType == input.TicketType ||
                    (this.TicketType != null &&
                    this.TicketType.Equals(input.TicketType))
                ) && 
                (
                    this.TicketTime == input.TicketTime ||
                    (this.TicketTime != null &&
                    this.TicketTime.Equals(input.TicketTime))
                ) && 
                (
                    this.ProductType == input.ProductType ||
                    (this.ProductType != null &&
                    this.ProductType.Equals(input.ProductType))
                ) && 
                (
                    this.DiscountCard == input.DiscountCard ||
                    (this.DiscountCard != null &&
                    this.DiscountCard.Equals(input.DiscountCard))
                ) && 
                (
                    this.Zones == input.Zones ||
                    (this.Zones != null &&
                    this.Zones.Equals(input.Zones))
                ) && 
                (
                    this.Cost == input.Cost ||
                    (this.Cost != null &&
                    this.Cost.Equals(input.Cost))
                ) && 
                (
                    this.PriceDescription == input.PriceDescription ||
                    (this.PriceDescription != null &&
                    this.PriceDescription.Equals(input.PriceDescription))
                ) && 
                (
                    this.PriceComparison == input.PriceComparison ||
                    (this.PriceComparison != null &&
                    this.PriceComparison.Equals(input.PriceComparison))
                ) && 
                (
                    this.RecommendedTopUp == input.RecommendedTopUp ||
                    (this.RecommendedTopUp != null &&
                    this.RecommendedTopUp.Equals(input.RecommendedTopUp))
                ) && 
                (
                    this.Notes == input.Notes ||
                    this.Notes != null &&
                    this.Notes.SequenceEqual(input.Notes)
                ) && 
                (
                    this.KeyFeatures == input.KeyFeatures ||
                    this.KeyFeatures != null &&
                    this.KeyFeatures.SequenceEqual(input.KeyFeatures)
                ) && 
                (
                    this.GettingYourTicket == input.GettingYourTicket ||
                    this.GettingYourTicket != null &&
                    this.GettingYourTicket.SequenceEqual(input.GettingYourTicket)
                ) && 
                (
                    this.SingleFare == input.SingleFare ||
                    (this.SingleFare != null &&
                    this.SingleFare.Equals(input.SingleFare))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Rule != null)
                    hashCode = hashCode * 59 + this.Rule.GetHashCode();
                if (this.Rank != null)
                    hashCode = hashCode * 59 + this.Rank.GetHashCode();
                if (this.FareType != null)
                    hashCode = hashCode * 59 + this.FareType.GetHashCode();
                if (this.Product != null)
                    hashCode = hashCode * 59 + this.Product.GetHashCode();
                if (this.TicketType != null)
                    hashCode = hashCode * 59 + this.TicketType.GetHashCode();
                if (this.TicketTime != null)
                    hashCode = hashCode * 59 + this.TicketTime.GetHashCode();
                if (this.ProductType != null)
                    hashCode = hashCode * 59 + this.ProductType.GetHashCode();
                if (this.DiscountCard != null)
                    hashCode = hashCode * 59 + this.DiscountCard.GetHashCode();
                if (this.Zones != null)
                    hashCode = hashCode * 59 + this.Zones.GetHashCode();
                if (this.Cost != null)
                    hashCode = hashCode * 59 + this.Cost.GetHashCode();
                if (this.PriceDescription != null)
                    hashCode = hashCode * 59 + this.PriceDescription.GetHashCode();
                if (this.PriceComparison != null)
                    hashCode = hashCode * 59 + this.PriceComparison.GetHashCode();
                if (this.RecommendedTopUp != null)
                    hashCode = hashCode * 59 + this.RecommendedTopUp.GetHashCode();
                if (this.Notes != null)
                    hashCode = hashCode * 59 + this.Notes.GetHashCode();
                if (this.KeyFeatures != null)
                    hashCode = hashCode * 59 + this.KeyFeatures.GetHashCode();
                if (this.GettingYourTicket != null)
                    hashCode = hashCode * 59 + this.GettingYourTicket.GetHashCode();
                if (this.SingleFare != null)
                    hashCode = hashCode * 59 + this.SingleFare.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
