/* 
 * Transport for London Unified API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TflApiPresentationEntitiesFaresTicket
    /// </summary>
    [DataContract]
    public partial class TflApiPresentationEntitiesFaresTicket :  IEquatable<TflApiPresentationEntitiesFaresTicket>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TflApiPresentationEntitiesFaresTicket" /> class.
        /// </summary>
        /// <param name="passengerType">passengerType.</param>
        /// <param name="ticketType">ticketType.</param>
        /// <param name="ticketTime">ticketTime.</param>
        /// <param name="cost">cost.</param>
        /// <param name="description">description.</param>
        /// <param name="mode">mode.</param>
        /// <param name="displayOrder">displayOrder.</param>
        /// <param name="messages">messages.</param>
        public TflApiPresentationEntitiesFaresTicket(string passengerType = default(string), TflApiPresentationEntitiesFaresTicketType ticketType = default(TflApiPresentationEntitiesFaresTicketType), TflApiPresentationEntitiesFaresTicketTime ticketTime = default(TflApiPresentationEntitiesFaresTicketTime), string cost = default(string), string description = default(string), string mode = default(string), int? displayOrder = default(int?), List<TflApiPresentationEntitiesMessage> messages = default(List<TflApiPresentationEntitiesMessage>))
        {
            this.PassengerType = passengerType;
            this.TicketType = ticketType;
            this.TicketTime = ticketTime;
            this.Cost = cost;
            this.Description = description;
            this.Mode = mode;
            this.DisplayOrder = displayOrder;
            this.Messages = messages;
        }
        
        /// <summary>
        /// Gets or Sets PassengerType
        /// </summary>
        [DataMember(Name="passengerType", EmitDefaultValue=false)]
        public string PassengerType { get; set; }

        /// <summary>
        /// Gets or Sets TicketType
        /// </summary>
        [DataMember(Name="ticketType", EmitDefaultValue=false)]
        public TflApiPresentationEntitiesFaresTicketType TicketType { get; set; }

        /// <summary>
        /// Gets or Sets TicketTime
        /// </summary>
        [DataMember(Name="ticketTime", EmitDefaultValue=false)]
        public TflApiPresentationEntitiesFaresTicketTime TicketTime { get; set; }

        /// <summary>
        /// Gets or Sets Cost
        /// </summary>
        [DataMember(Name="cost", EmitDefaultValue=false)]
        public string Cost { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Mode
        /// </summary>
        [DataMember(Name="mode", EmitDefaultValue=false)]
        public string Mode { get; set; }

        /// <summary>
        /// Gets or Sets DisplayOrder
        /// </summary>
        [DataMember(Name="displayOrder", EmitDefaultValue=false)]
        public int? DisplayOrder { get; set; }

        /// <summary>
        /// Gets or Sets Messages
        /// </summary>
        [DataMember(Name="messages", EmitDefaultValue=false)]
        public List<TflApiPresentationEntitiesMessage> Messages { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TflApiPresentationEntitiesFaresTicket {\n");
            sb.Append("  PassengerType: ").Append(PassengerType).Append("\n");
            sb.Append("  TicketType: ").Append(TicketType).Append("\n");
            sb.Append("  TicketTime: ").Append(TicketTime).Append("\n");
            sb.Append("  Cost: ").Append(Cost).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  DisplayOrder: ").Append(DisplayOrder).Append("\n");
            sb.Append("  Messages: ").Append(Messages).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TflApiPresentationEntitiesFaresTicket);
        }

        /// <summary>
        /// Returns true if TflApiPresentationEntitiesFaresTicket instances are equal
        /// </summary>
        /// <param name="input">Instance of TflApiPresentationEntitiesFaresTicket to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TflApiPresentationEntitiesFaresTicket input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PassengerType == input.PassengerType ||
                    (this.PassengerType != null &&
                    this.PassengerType.Equals(input.PassengerType))
                ) && 
                (
                    this.TicketType == input.TicketType ||
                    (this.TicketType != null &&
                    this.TicketType.Equals(input.TicketType))
                ) && 
                (
                    this.TicketTime == input.TicketTime ||
                    (this.TicketTime != null &&
                    this.TicketTime.Equals(input.TicketTime))
                ) && 
                (
                    this.Cost == input.Cost ||
                    (this.Cost != null &&
                    this.Cost.Equals(input.Cost))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Mode == input.Mode ||
                    (this.Mode != null &&
                    this.Mode.Equals(input.Mode))
                ) && 
                (
                    this.DisplayOrder == input.DisplayOrder ||
                    (this.DisplayOrder != null &&
                    this.DisplayOrder.Equals(input.DisplayOrder))
                ) && 
                (
                    this.Messages == input.Messages ||
                    this.Messages != null &&
                    this.Messages.SequenceEqual(input.Messages)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PassengerType != null)
                    hashCode = hashCode * 59 + this.PassengerType.GetHashCode();
                if (this.TicketType != null)
                    hashCode = hashCode * 59 + this.TicketType.GetHashCode();
                if (this.TicketTime != null)
                    hashCode = hashCode * 59 + this.TicketTime.GetHashCode();
                if (this.Cost != null)
                    hashCode = hashCode * 59 + this.Cost.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Mode != null)
                    hashCode = hashCode * 59 + this.Mode.GetHashCode();
                if (this.DisplayOrder != null)
                    hashCode = hashCode * 59 + this.DisplayOrder.GetHashCode();
                if (this.Messages != null)
                    hashCode = hashCode * 59 + this.Messages.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
