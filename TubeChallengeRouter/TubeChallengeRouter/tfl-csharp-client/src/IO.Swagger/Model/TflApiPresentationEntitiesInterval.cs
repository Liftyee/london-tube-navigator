/* 
 * Transport for London Unified API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TflApiPresentationEntitiesInterval
    /// </summary>
    [DataContract]
    public partial class TflApiPresentationEntitiesInterval :  IEquatable<TflApiPresentationEntitiesInterval>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TflApiPresentationEntitiesInterval" /> class.
        /// </summary>
        /// <param name="stopId">stopId.</param>
        /// <param name="timeToArrival">timeToArrival.</param>
        public TflApiPresentationEntitiesInterval(string stopId = default(string), double? timeToArrival = default(double?))
        {
            this.StopId = stopId;
            this.TimeToArrival = timeToArrival;
        }
        
        /// <summary>
        /// Gets or Sets StopId
        /// </summary>
        [DataMember(Name="stopId", EmitDefaultValue=false)]
        public string StopId { get; set; }

        /// <summary>
        /// Gets or Sets TimeToArrival
        /// </summary>
        [DataMember(Name="timeToArrival", EmitDefaultValue=false)]
        public double? TimeToArrival { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TflApiPresentationEntitiesInterval {\n");
            sb.Append("  StopId: ").Append(StopId).Append("\n");
            sb.Append("  TimeToArrival: ").Append(TimeToArrival).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TflApiPresentationEntitiesInterval);
        }

        /// <summary>
        /// Returns true if TflApiPresentationEntitiesInterval instances are equal
        /// </summary>
        /// <param name="input">Instance of TflApiPresentationEntitiesInterval to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TflApiPresentationEntitiesInterval input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.StopId == input.StopId ||
                    (this.StopId != null &&
                    this.StopId.Equals(input.StopId))
                ) && 
                (
                    this.TimeToArrival == input.TimeToArrival ||
                    (this.TimeToArrival != null &&
                    this.TimeToArrival.Equals(input.TimeToArrival))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StopId != null)
                    hashCode = hashCode * 59 + this.StopId.GetHashCode();
                if (this.TimeToArrival != null)
                    hashCode = hashCode * 59 + this.TimeToArrival.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
