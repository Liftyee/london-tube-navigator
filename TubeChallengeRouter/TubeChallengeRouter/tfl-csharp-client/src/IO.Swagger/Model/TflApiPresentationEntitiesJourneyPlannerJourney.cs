/* 
 * Transport for London Unified API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Object that represents an end to end journey (see schematic).
    /// </summary>
    [DataContract]
    public partial class TflApiPresentationEntitiesJourneyPlannerJourney :  IEquatable<TflApiPresentationEntitiesJourneyPlannerJourney>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TflApiPresentationEntitiesJourneyPlannerJourney" /> class.
        /// </summary>
        /// <param name="startDateTime">startDateTime.</param>
        /// <param name="duration">duration.</param>
        /// <param name="arrivalDateTime">arrivalDateTime.</param>
        /// <param name="description">description.</param>
        /// <param name="alternativeRoute">alternativeRoute.</param>
        /// <param name="legs">legs.</param>
        /// <param name="fare">fare.</param>
        public TflApiPresentationEntitiesJourneyPlannerJourney(DateTime? startDateTime = default(DateTime?), int? duration = default(int?), DateTime? arrivalDateTime = default(DateTime?), string description = default(string), bool? alternativeRoute = default(bool?), List<TflApiPresentationEntitiesJourneyPlannerLeg> legs = default(List<TflApiPresentationEntitiesJourneyPlannerLeg>), TflApiPresentationEntitiesJourneyPlannerJourneyFare fare = default(TflApiPresentationEntitiesJourneyPlannerJourneyFare))
        {
            this.StartDateTime = startDateTime;
            this.Duration = duration;
            this.ArrivalDateTime = arrivalDateTime;
            this.Description = description;
            this.AlternativeRoute = alternativeRoute;
            this.Legs = legs;
            this.Fare = fare;
        }
        
        /// <summary>
        /// Gets or Sets StartDateTime
        /// </summary>
        [DataMember(Name="startDateTime", EmitDefaultValue=false)]
        public DateTime? StartDateTime { get; set; }

        /// <summary>
        /// Gets or Sets Duration
        /// </summary>
        [DataMember(Name="duration", EmitDefaultValue=false)]
        public int? Duration { get; set; }

        /// <summary>
        /// Gets or Sets ArrivalDateTime
        /// </summary>
        [DataMember(Name="arrivalDateTime", EmitDefaultValue=false)]
        public DateTime? ArrivalDateTime { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets AlternativeRoute
        /// </summary>
        [DataMember(Name="alternativeRoute", EmitDefaultValue=false)]
        public bool? AlternativeRoute { get; set; }

        /// <summary>
        /// Gets or Sets Legs
        /// </summary>
        [DataMember(Name="legs", EmitDefaultValue=false)]
        public List<TflApiPresentationEntitiesJourneyPlannerLeg> Legs { get; set; }

        /// <summary>
        /// Gets or Sets Fare
        /// </summary>
        [DataMember(Name="fare", EmitDefaultValue=false)]
        public TflApiPresentationEntitiesJourneyPlannerJourneyFare Fare { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TflApiPresentationEntitiesJourneyPlannerJourney {\n");
            sb.Append("  StartDateTime: ").Append(StartDateTime).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  ArrivalDateTime: ").Append(ArrivalDateTime).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  AlternativeRoute: ").Append(AlternativeRoute).Append("\n");
            sb.Append("  Legs: ").Append(Legs).Append("\n");
            sb.Append("  Fare: ").Append(Fare).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TflApiPresentationEntitiesJourneyPlannerJourney);
        }

        /// <summary>
        /// Returns true if TflApiPresentationEntitiesJourneyPlannerJourney instances are equal
        /// </summary>
        /// <param name="input">Instance of TflApiPresentationEntitiesJourneyPlannerJourney to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TflApiPresentationEntitiesJourneyPlannerJourney input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.StartDateTime == input.StartDateTime ||
                    (this.StartDateTime != null &&
                    this.StartDateTime.Equals(input.StartDateTime))
                ) && 
                (
                    this.Duration == input.Duration ||
                    (this.Duration != null &&
                    this.Duration.Equals(input.Duration))
                ) && 
                (
                    this.ArrivalDateTime == input.ArrivalDateTime ||
                    (this.ArrivalDateTime != null &&
                    this.ArrivalDateTime.Equals(input.ArrivalDateTime))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.AlternativeRoute == input.AlternativeRoute ||
                    (this.AlternativeRoute != null &&
                    this.AlternativeRoute.Equals(input.AlternativeRoute))
                ) && 
                (
                    this.Legs == input.Legs ||
                    this.Legs != null &&
                    this.Legs.SequenceEqual(input.Legs)
                ) && 
                (
                    this.Fare == input.Fare ||
                    (this.Fare != null &&
                    this.Fare.Equals(input.Fare))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StartDateTime != null)
                    hashCode = hashCode * 59 + this.StartDateTime.GetHashCode();
                if (this.Duration != null)
                    hashCode = hashCode * 59 + this.Duration.GetHashCode();
                if (this.ArrivalDateTime != null)
                    hashCode = hashCode * 59 + this.ArrivalDateTime.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.AlternativeRoute != null)
                    hashCode = hashCode * 59 + this.AlternativeRoute.GetHashCode();
                if (this.Legs != null)
                    hashCode = hashCode * 59 + this.Legs.GetHashCode();
                if (this.Fare != null)
                    hashCode = hashCode * 59 + this.Fare.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
