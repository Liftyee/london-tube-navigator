/* 
 * Transport for London Unified API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TflApiPresentationEntitiesJourneyPlannerLeg
    /// </summary>
    [DataContract]
    public partial class TflApiPresentationEntitiesJourneyPlannerLeg :  IEquatable<TflApiPresentationEntitiesJourneyPlannerLeg>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TflApiPresentationEntitiesJourneyPlannerLeg" /> class.
        /// </summary>
        /// <param name="duration">duration.</param>
        /// <param name="speed">speed.</param>
        /// <param name="instruction">Describes the action the user need to take for this section, E.g. \&quot;walk to the              district line\&quot;.</param>
        /// <param name="obstacles">obstacles.</param>
        /// <param name="departureTime">departureTime.</param>
        /// <param name="arrivalTime">arrivalTime.</param>
        /// <param name="departurePoint">departurePoint.</param>
        /// <param name="arrivalPoint">arrivalPoint.</param>
        /// <param name="path">path.</param>
        /// <param name="routeOptions">routeOptions.</param>
        /// <param name="mode">mode.</param>
        /// <param name="disruptions">disruptions.</param>
        /// <param name="plannedWorks">plannedWorks.</param>
        /// <param name="distance">distance.</param>
        /// <param name="scheduledDepartureTime">scheduledDepartureTime.</param>
        /// <param name="scheduledArrivalTime">scheduledArrivalTime.</param>
        /// <param name="interChangeDuration">interChangeDuration.</param>
        /// <param name="interChangePosition">interChangePosition.</param>
        public TflApiPresentationEntitiesJourneyPlannerLeg(int? duration = default(int?), string speed = default(string), TflApiPresentationEntitiesInstruction instruction = default(TflApiPresentationEntitiesInstruction), List<TflApiPresentationEntitiesJourneyPlannerObstacle> obstacles = default(List<TflApiPresentationEntitiesJourneyPlannerObstacle>), DateTime? departureTime = default(DateTime?), DateTime? arrivalTime = default(DateTime?), TflApiPresentationEntitiesPoint departurePoint = default(TflApiPresentationEntitiesPoint), TflApiPresentationEntitiesPoint arrivalPoint = default(TflApiPresentationEntitiesPoint), TflApiPresentationEntitiesJourneyPlannerPath path = default(TflApiPresentationEntitiesJourneyPlannerPath), List<TflApiPresentationEntitiesJourneyPlannerRouteOption> routeOptions = default(List<TflApiPresentationEntitiesJourneyPlannerRouteOption>), TflApiPresentationEntitiesIdentifier mode = default(TflApiPresentationEntitiesIdentifier), List<TflApiPresentationEntitiesDisruption> disruptions = default(List<TflApiPresentationEntitiesDisruption>), List<TflApiPresentationEntitiesJourneyPlannerPlannedWork> plannedWorks = default(List<TflApiPresentationEntitiesJourneyPlannerPlannedWork>), double? distance = default(double?), DateTime? scheduledDepartureTime = default(DateTime?), DateTime? scheduledArrivalTime = default(DateTime?), string interChangeDuration = default(string), string interChangePosition = default(string))
        {
            this.Duration = duration;
            this.Speed = speed;
            this.Instruction = instruction;
            this.Obstacles = obstacles;
            this.DepartureTime = departureTime;
            this.ArrivalTime = arrivalTime;
            this.DeparturePoint = departurePoint;
            this.ArrivalPoint = arrivalPoint;
            this.Path = path;
            this.RouteOptions = routeOptions;
            this.Mode = mode;
            this.Disruptions = disruptions;
            this.PlannedWorks = plannedWorks;
            this.Distance = distance;
            this.ScheduledDepartureTime = scheduledDepartureTime;
            this.ScheduledArrivalTime = scheduledArrivalTime;
            this.InterChangeDuration = interChangeDuration;
            this.InterChangePosition = interChangePosition;
        }
        
        /// <summary>
        /// Gets or Sets Duration
        /// </summary>
        [DataMember(Name="duration", EmitDefaultValue=false)]
        public int? Duration { get; set; }

        /// <summary>
        /// Gets or Sets Speed
        /// </summary>
        [DataMember(Name="speed", EmitDefaultValue=false)]
        public string Speed { get; set; }

        /// <summary>
        /// Describes the action the user need to take for this section, E.g. \&quot;walk to the              district line\&quot;
        /// </summary>
        /// <value>Describes the action the user need to take for this section, E.g. \&quot;walk to the              district line\&quot;</value>
        [DataMember(Name="instruction", EmitDefaultValue=false)]
        public TflApiPresentationEntitiesInstruction Instruction { get; set; }

        /// <summary>
        /// Gets or Sets Obstacles
        /// </summary>
        [DataMember(Name="obstacles", EmitDefaultValue=false)]
        public List<TflApiPresentationEntitiesJourneyPlannerObstacle> Obstacles { get; set; }

        /// <summary>
        /// Gets or Sets DepartureTime
        /// </summary>
        [DataMember(Name="departureTime", EmitDefaultValue=false)]
        public DateTime? DepartureTime { get; set; }

        /// <summary>
        /// Gets or Sets ArrivalTime
        /// </summary>
        [DataMember(Name="arrivalTime", EmitDefaultValue=false)]
        public DateTime? ArrivalTime { get; set; }

        /// <summary>
        /// Gets or Sets DeparturePoint
        /// </summary>
        [DataMember(Name="departurePoint", EmitDefaultValue=false)]
        public TflApiPresentationEntitiesPoint DeparturePoint { get; set; }

        /// <summary>
        /// Gets or Sets ArrivalPoint
        /// </summary>
        [DataMember(Name="arrivalPoint", EmitDefaultValue=false)]
        public TflApiPresentationEntitiesPoint ArrivalPoint { get; set; }

        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [DataMember(Name="path", EmitDefaultValue=false)]
        public TflApiPresentationEntitiesJourneyPlannerPath Path { get; set; }

        /// <summary>
        /// Gets or Sets RouteOptions
        /// </summary>
        [DataMember(Name="routeOptions", EmitDefaultValue=false)]
        public List<TflApiPresentationEntitiesJourneyPlannerRouteOption> RouteOptions { get; set; }

        /// <summary>
        /// Gets or Sets Mode
        /// </summary>
        [DataMember(Name="mode", EmitDefaultValue=false)]
        public TflApiPresentationEntitiesIdentifier Mode { get; set; }

        /// <summary>
        /// Gets or Sets Disruptions
        /// </summary>
        [DataMember(Name="disruptions", EmitDefaultValue=false)]
        public List<TflApiPresentationEntitiesDisruption> Disruptions { get; set; }

        /// <summary>
        /// Gets or Sets PlannedWorks
        /// </summary>
        [DataMember(Name="plannedWorks", EmitDefaultValue=false)]
        public List<TflApiPresentationEntitiesJourneyPlannerPlannedWork> PlannedWorks { get; set; }

        /// <summary>
        /// Gets or Sets Distance
        /// </summary>
        [DataMember(Name="distance", EmitDefaultValue=false)]
        public double? Distance { get; set; }

        /// <summary>
        /// Gets or Sets IsDisrupted
        /// </summary>
        [DataMember(Name="isDisrupted", EmitDefaultValue=false)]
        public bool? IsDisrupted { get; private set; }

        /// <summary>
        /// Gets or Sets HasFixedLocations
        /// </summary>
        [DataMember(Name="hasFixedLocations", EmitDefaultValue=false)]
        public bool? HasFixedLocations { get; private set; }

        /// <summary>
        /// Gets or Sets ScheduledDepartureTime
        /// </summary>
        [DataMember(Name="scheduledDepartureTime", EmitDefaultValue=false)]
        public DateTime? ScheduledDepartureTime { get; set; }

        /// <summary>
        /// Gets or Sets ScheduledArrivalTime
        /// </summary>
        [DataMember(Name="scheduledArrivalTime", EmitDefaultValue=false)]
        public DateTime? ScheduledArrivalTime { get; set; }

        /// <summary>
        /// Gets or Sets InterChangeDuration
        /// </summary>
        [DataMember(Name="interChangeDuration", EmitDefaultValue=false)]
        public string InterChangeDuration { get; set; }

        /// <summary>
        /// Gets or Sets InterChangePosition
        /// </summary>
        [DataMember(Name="interChangePosition", EmitDefaultValue=false)]
        public string InterChangePosition { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TflApiPresentationEntitiesJourneyPlannerLeg {\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  Speed: ").Append(Speed).Append("\n");
            sb.Append("  Instruction: ").Append(Instruction).Append("\n");
            sb.Append("  Obstacles: ").Append(Obstacles).Append("\n");
            sb.Append("  DepartureTime: ").Append(DepartureTime).Append("\n");
            sb.Append("  ArrivalTime: ").Append(ArrivalTime).Append("\n");
            sb.Append("  DeparturePoint: ").Append(DeparturePoint).Append("\n");
            sb.Append("  ArrivalPoint: ").Append(ArrivalPoint).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  RouteOptions: ").Append(RouteOptions).Append("\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  Disruptions: ").Append(Disruptions).Append("\n");
            sb.Append("  PlannedWorks: ").Append(PlannedWorks).Append("\n");
            sb.Append("  Distance: ").Append(Distance).Append("\n");
            sb.Append("  IsDisrupted: ").Append(IsDisrupted).Append("\n");
            sb.Append("  HasFixedLocations: ").Append(HasFixedLocations).Append("\n");
            sb.Append("  ScheduledDepartureTime: ").Append(ScheduledDepartureTime).Append("\n");
            sb.Append("  ScheduledArrivalTime: ").Append(ScheduledArrivalTime).Append("\n");
            sb.Append("  InterChangeDuration: ").Append(InterChangeDuration).Append("\n");
            sb.Append("  InterChangePosition: ").Append(InterChangePosition).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TflApiPresentationEntitiesJourneyPlannerLeg);
        }

        /// <summary>
        /// Returns true if TflApiPresentationEntitiesJourneyPlannerLeg instances are equal
        /// </summary>
        /// <param name="input">Instance of TflApiPresentationEntitiesJourneyPlannerLeg to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TflApiPresentationEntitiesJourneyPlannerLeg input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Duration == input.Duration ||
                    (this.Duration != null &&
                    this.Duration.Equals(input.Duration))
                ) && 
                (
                    this.Speed == input.Speed ||
                    (this.Speed != null &&
                    this.Speed.Equals(input.Speed))
                ) && 
                (
                    this.Instruction == input.Instruction ||
                    (this.Instruction != null &&
                    this.Instruction.Equals(input.Instruction))
                ) && 
                (
                    this.Obstacles == input.Obstacles ||
                    this.Obstacles != null &&
                    this.Obstacles.SequenceEqual(input.Obstacles)
                ) && 
                (
                    this.DepartureTime == input.DepartureTime ||
                    (this.DepartureTime != null &&
                    this.DepartureTime.Equals(input.DepartureTime))
                ) && 
                (
                    this.ArrivalTime == input.ArrivalTime ||
                    (this.ArrivalTime != null &&
                    this.ArrivalTime.Equals(input.ArrivalTime))
                ) && 
                (
                    this.DeparturePoint == input.DeparturePoint ||
                    (this.DeparturePoint != null &&
                    this.DeparturePoint.Equals(input.DeparturePoint))
                ) && 
                (
                    this.ArrivalPoint == input.ArrivalPoint ||
                    (this.ArrivalPoint != null &&
                    this.ArrivalPoint.Equals(input.ArrivalPoint))
                ) && 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.RouteOptions == input.RouteOptions ||
                    this.RouteOptions != null &&
                    this.RouteOptions.SequenceEqual(input.RouteOptions)
                ) && 
                (
                    this.Mode == input.Mode ||
                    (this.Mode != null &&
                    this.Mode.Equals(input.Mode))
                ) && 
                (
                    this.Disruptions == input.Disruptions ||
                    this.Disruptions != null &&
                    this.Disruptions.SequenceEqual(input.Disruptions)
                ) && 
                (
                    this.PlannedWorks == input.PlannedWorks ||
                    this.PlannedWorks != null &&
                    this.PlannedWorks.SequenceEqual(input.PlannedWorks)
                ) && 
                (
                    this.Distance == input.Distance ||
                    (this.Distance != null &&
                    this.Distance.Equals(input.Distance))
                ) && 
                (
                    this.IsDisrupted == input.IsDisrupted ||
                    (this.IsDisrupted != null &&
                    this.IsDisrupted.Equals(input.IsDisrupted))
                ) && 
                (
                    this.HasFixedLocations == input.HasFixedLocations ||
                    (this.HasFixedLocations != null &&
                    this.HasFixedLocations.Equals(input.HasFixedLocations))
                ) && 
                (
                    this.ScheduledDepartureTime == input.ScheduledDepartureTime ||
                    (this.ScheduledDepartureTime != null &&
                    this.ScheduledDepartureTime.Equals(input.ScheduledDepartureTime))
                ) && 
                (
                    this.ScheduledArrivalTime == input.ScheduledArrivalTime ||
                    (this.ScheduledArrivalTime != null &&
                    this.ScheduledArrivalTime.Equals(input.ScheduledArrivalTime))
                ) && 
                (
                    this.InterChangeDuration == input.InterChangeDuration ||
                    (this.InterChangeDuration != null &&
                    this.InterChangeDuration.Equals(input.InterChangeDuration))
                ) && 
                (
                    this.InterChangePosition == input.InterChangePosition ||
                    (this.InterChangePosition != null &&
                    this.InterChangePosition.Equals(input.InterChangePosition))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Duration != null)
                    hashCode = hashCode * 59 + this.Duration.GetHashCode();
                if (this.Speed != null)
                    hashCode = hashCode * 59 + this.Speed.GetHashCode();
                if (this.Instruction != null)
                    hashCode = hashCode * 59 + this.Instruction.GetHashCode();
                if (this.Obstacles != null)
                    hashCode = hashCode * 59 + this.Obstacles.GetHashCode();
                if (this.DepartureTime != null)
                    hashCode = hashCode * 59 + this.DepartureTime.GetHashCode();
                if (this.ArrivalTime != null)
                    hashCode = hashCode * 59 + this.ArrivalTime.GetHashCode();
                if (this.DeparturePoint != null)
                    hashCode = hashCode * 59 + this.DeparturePoint.GetHashCode();
                if (this.ArrivalPoint != null)
                    hashCode = hashCode * 59 + this.ArrivalPoint.GetHashCode();
                if (this.Path != null)
                    hashCode = hashCode * 59 + this.Path.GetHashCode();
                if (this.RouteOptions != null)
                    hashCode = hashCode * 59 + this.RouteOptions.GetHashCode();
                if (this.Mode != null)
                    hashCode = hashCode * 59 + this.Mode.GetHashCode();
                if (this.Disruptions != null)
                    hashCode = hashCode * 59 + this.Disruptions.GetHashCode();
                if (this.PlannedWorks != null)
                    hashCode = hashCode * 59 + this.PlannedWorks.GetHashCode();
                if (this.Distance != null)
                    hashCode = hashCode * 59 + this.Distance.GetHashCode();
                if (this.IsDisrupted != null)
                    hashCode = hashCode * 59 + this.IsDisrupted.GetHashCode();
                if (this.HasFixedLocations != null)
                    hashCode = hashCode * 59 + this.HasFixedLocations.GetHashCode();
                if (this.ScheduledDepartureTime != null)
                    hashCode = hashCode * 59 + this.ScheduledDepartureTime.GetHashCode();
                if (this.ScheduledArrivalTime != null)
                    hashCode = hashCode * 59 + this.ScheduledArrivalTime.GetHashCode();
                if (this.InterChangeDuration != null)
                    hashCode = hashCode * 59 + this.InterChangeDuration.GetHashCode();
                if (this.InterChangePosition != null)
                    hashCode = hashCode * 59 + this.InterChangePosition.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
