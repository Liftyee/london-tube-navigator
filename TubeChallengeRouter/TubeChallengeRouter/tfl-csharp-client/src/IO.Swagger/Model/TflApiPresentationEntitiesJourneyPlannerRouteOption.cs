/* 
 * Transport for London Unified API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TflApiPresentationEntitiesJourneyPlannerRouteOption
    /// </summary>
    [DataContract]
    public partial class TflApiPresentationEntitiesJourneyPlannerRouteOption :  IEquatable<TflApiPresentationEntitiesJourneyPlannerRouteOption>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TflApiPresentationEntitiesJourneyPlannerRouteOption" /> class.
        /// </summary>
        /// <param name="id">The Id of the route.</param>
        /// <param name="name">Name such as \&quot;72\&quot;.</param>
        /// <param name="directions">directions.</param>
        /// <param name="lineIdentifier">The line identifier (e.g. District Line), from where you can obtain line status information e.g. the rainbow board status \&quot;good service\&quot;..</param>
        /// <param name="direction">The direction of the route, i.e. outbound or inbound..</param>
        public TflApiPresentationEntitiesJourneyPlannerRouteOption(string id = default(string), string name = default(string), List<string> directions = default(List<string>), TflApiPresentationEntitiesIdentifier lineIdentifier = default(TflApiPresentationEntitiesIdentifier), string direction = default(string))
        {
            this.Id = id;
            this.Name = name;
            this.Directions = directions;
            this.LineIdentifier = lineIdentifier;
            this.Direction = direction;
        }
        
        /// <summary>
        /// The Id of the route
        /// </summary>
        /// <value>The Id of the route</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Name such as \&quot;72\&quot;
        /// </summary>
        /// <value>Name such as \&quot;72\&quot;</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Directions
        /// </summary>
        [DataMember(Name="directions", EmitDefaultValue=false)]
        public List<string> Directions { get; set; }

        /// <summary>
        /// The line identifier (e.g. District Line), from where you can obtain line status information e.g. the rainbow board status \&quot;good service\&quot;.
        /// </summary>
        /// <value>The line identifier (e.g. District Line), from where you can obtain line status information e.g. the rainbow board status \&quot;good service\&quot;.</value>
        [DataMember(Name="lineIdentifier", EmitDefaultValue=false)]
        public TflApiPresentationEntitiesIdentifier LineIdentifier { get; set; }

        /// <summary>
        /// The direction of the route, i.e. outbound or inbound.
        /// </summary>
        /// <value>The direction of the route, i.e. outbound or inbound.</value>
        [DataMember(Name="direction", EmitDefaultValue=false)]
        public string Direction { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TflApiPresentationEntitiesJourneyPlannerRouteOption {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Directions: ").Append(Directions).Append("\n");
            sb.Append("  LineIdentifier: ").Append(LineIdentifier).Append("\n");
            sb.Append("  Direction: ").Append(Direction).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TflApiPresentationEntitiesJourneyPlannerRouteOption);
        }

        /// <summary>
        /// Returns true if TflApiPresentationEntitiesJourneyPlannerRouteOption instances are equal
        /// </summary>
        /// <param name="input">Instance of TflApiPresentationEntitiesJourneyPlannerRouteOption to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TflApiPresentationEntitiesJourneyPlannerRouteOption input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Directions == input.Directions ||
                    this.Directions != null &&
                    this.Directions.SequenceEqual(input.Directions)
                ) && 
                (
                    this.LineIdentifier == input.LineIdentifier ||
                    (this.LineIdentifier != null &&
                    this.LineIdentifier.Equals(input.LineIdentifier))
                ) && 
                (
                    this.Direction == input.Direction ||
                    (this.Direction != null &&
                    this.Direction.Equals(input.Direction))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Directions != null)
                    hashCode = hashCode * 59 + this.Directions.GetHashCode();
                if (this.LineIdentifier != null)
                    hashCode = hashCode * 59 + this.LineIdentifier.GetHashCode();
                if (this.Direction != null)
                    hashCode = hashCode * 59 + this.Direction.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
