/* 
 * Transport for London Unified API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TflApiPresentationEntitiesJourneyPlannerSearchCriteria
    /// </summary>
    [DataContract]
    public partial class TflApiPresentationEntitiesJourneyPlannerSearchCriteria :  IEquatable<TflApiPresentationEntitiesJourneyPlannerSearchCriteria>, IValidatableObject
    {
        /// <summary>
        /// Defines DateTimeType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DateTimeTypeEnum
        {
            
            /// <summary>
            /// Enum Arriving for value: Arriving
            /// </summary>
            [EnumMember(Value = "Arriving")]
            Arriving = 1,
            
            /// <summary>
            /// Enum Departing for value: Departing
            /// </summary>
            [EnumMember(Value = "Departing")]
            Departing = 2
        }

        /// <summary>
        /// Gets or Sets DateTimeType
        /// </summary>
        [DataMember(Name="dateTimeType", EmitDefaultValue=false)]
        public DateTimeTypeEnum? DateTimeType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TflApiPresentationEntitiesJourneyPlannerSearchCriteria" /> class.
        /// </summary>
        /// <param name="dateTime">dateTime.</param>
        /// <param name="dateTimeType">dateTimeType.</param>
        /// <param name="timeAdjustments">timeAdjustments.</param>
        public TflApiPresentationEntitiesJourneyPlannerSearchCriteria(DateTime? dateTime = default(DateTime?), DateTimeTypeEnum? dateTimeType = default(DateTimeTypeEnum?), TflApiPresentationEntitiesJourneyPlannerTimeAdjustments timeAdjustments = default(TflApiPresentationEntitiesJourneyPlannerTimeAdjustments))
        {
            this.DateTime = dateTime;
            this.DateTimeType = dateTimeType;
            this.TimeAdjustments = timeAdjustments;
        }
        
        /// <summary>
        /// Gets or Sets DateTime
        /// </summary>
        [DataMember(Name="dateTime", EmitDefaultValue=false)]
        public DateTime? DateTime { get; set; }


        /// <summary>
        /// Gets or Sets TimeAdjustments
        /// </summary>
        [DataMember(Name="timeAdjustments", EmitDefaultValue=false)]
        public TflApiPresentationEntitiesJourneyPlannerTimeAdjustments TimeAdjustments { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TflApiPresentationEntitiesJourneyPlannerSearchCriteria {\n");
            sb.Append("  DateTime: ").Append(DateTime).Append("\n");
            sb.Append("  DateTimeType: ").Append(DateTimeType).Append("\n");
            sb.Append("  TimeAdjustments: ").Append(TimeAdjustments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TflApiPresentationEntitiesJourneyPlannerSearchCriteria);
        }

        /// <summary>
        /// Returns true if TflApiPresentationEntitiesJourneyPlannerSearchCriteria instances are equal
        /// </summary>
        /// <param name="input">Instance of TflApiPresentationEntitiesJourneyPlannerSearchCriteria to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TflApiPresentationEntitiesJourneyPlannerSearchCriteria input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DateTime == input.DateTime ||
                    (this.DateTime != null &&
                    this.DateTime.Equals(input.DateTime))
                ) && 
                (
                    this.DateTimeType == input.DateTimeType ||
                    (this.DateTimeType != null &&
                    this.DateTimeType.Equals(input.DateTimeType))
                ) && 
                (
                    this.TimeAdjustments == input.TimeAdjustments ||
                    (this.TimeAdjustments != null &&
                    this.TimeAdjustments.Equals(input.TimeAdjustments))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DateTime != null)
                    hashCode = hashCode * 59 + this.DateTime.GetHashCode();
                if (this.DateTimeType != null)
                    hashCode = hashCode * 59 + this.DateTimeType.GetHashCode();
                if (this.TimeAdjustments != null)
                    hashCode = hashCode * 59 + this.TimeAdjustments.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
