/* 
 * Transport for London Unified API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TflApiPresentationEntitiesMatchedStop
    /// </summary>
    [DataContract]
    public partial class TflApiPresentationEntitiesMatchedStop :  IEquatable<TflApiPresentationEntitiesMatchedStop>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TflApiPresentationEntitiesMatchedStop" /> class.
        /// </summary>
        /// <param name="routeId">routeId.</param>
        /// <param name="parentId">parentId.</param>
        /// <param name="stationId">stationId.</param>
        /// <param name="icsId">icsId.</param>
        /// <param name="topMostParentId">topMostParentId.</param>
        /// <param name="direction">direction.</param>
        /// <param name="towards">towards.</param>
        /// <param name="modes">modes.</param>
        /// <param name="stopType">stopType.</param>
        /// <param name="stopLetter">stopLetter.</param>
        /// <param name="zone">zone.</param>
        /// <param name="accessibilitySummary">accessibilitySummary.</param>
        /// <param name="hasDisruption">hasDisruption.</param>
        /// <param name="lines">lines.</param>
        /// <param name="status">status.</param>
        /// <param name="id">id.</param>
        /// <param name="url">url.</param>
        /// <param name="name">name.</param>
        /// <param name="lat">lat.</param>
        /// <param name="lon">lon.</param>
        public TflApiPresentationEntitiesMatchedStop(int? routeId = default(int?), string parentId = default(string), string stationId = default(string), string icsId = default(string), string topMostParentId = default(string), string direction = default(string), string towards = default(string), List<string> modes = default(List<string>), string stopType = default(string), string stopLetter = default(string), string zone = default(string), string accessibilitySummary = default(string), bool? hasDisruption = default(bool?), List<TflApiPresentationEntitiesIdentifier> lines = default(List<TflApiPresentationEntitiesIdentifier>), bool? status = default(bool?), string id = default(string), string url = default(string), string name = default(string), double? lat = default(double?), double? lon = default(double?))
        {
            this.RouteId = routeId;
            this.ParentId = parentId;
            this.StationId = stationId;
            this.IcsId = icsId;
            this.TopMostParentId = topMostParentId;
            this.Direction = direction;
            this.Towards = towards;
            this.Modes = modes;
            this.StopType = stopType;
            this.StopLetter = stopLetter;
            this.Zone = zone;
            this.AccessibilitySummary = accessibilitySummary;
            this.HasDisruption = hasDisruption;
            this.Lines = lines;
            this.Status = status;
            this.Id = id;
            this.Url = url;
            this.Name = name;
            this.Lat = lat;
            this.Lon = lon;
        }
        
        /// <summary>
        /// Gets or Sets RouteId
        /// </summary>
        [DataMember(Name="routeId", EmitDefaultValue=false)]
        public int? RouteId { get; set; }

        /// <summary>
        /// Gets or Sets ParentId
        /// </summary>
        [DataMember(Name="parentId", EmitDefaultValue=false)]
        public string ParentId { get; set; }

        /// <summary>
        /// Gets or Sets StationId
        /// </summary>
        [DataMember(Name="stationId", EmitDefaultValue=false)]
        public string StationId { get; set; }

        /// <summary>
        /// Gets or Sets IcsId
        /// </summary>
        [DataMember(Name="icsId", EmitDefaultValue=false)]
        public string IcsId { get; set; }

        /// <summary>
        /// Gets or Sets TopMostParentId
        /// </summary>
        [DataMember(Name="topMostParentId", EmitDefaultValue=false)]
        public string TopMostParentId { get; set; }

        /// <summary>
        /// Gets or Sets Direction
        /// </summary>
        [DataMember(Name="direction", EmitDefaultValue=false)]
        public string Direction { get; set; }

        /// <summary>
        /// Gets or Sets Towards
        /// </summary>
        [DataMember(Name="towards", EmitDefaultValue=false)]
        public string Towards { get; set; }

        /// <summary>
        /// Gets or Sets Modes
        /// </summary>
        [DataMember(Name="modes", EmitDefaultValue=false)]
        public List<string> Modes { get; set; }

        /// <summary>
        /// Gets or Sets StopType
        /// </summary>
        [DataMember(Name="stopType", EmitDefaultValue=false)]
        public string StopType { get; set; }

        /// <summary>
        /// Gets or Sets StopLetter
        /// </summary>
        [DataMember(Name="stopLetter", EmitDefaultValue=false)]
        public string StopLetter { get; set; }

        /// <summary>
        /// Gets or Sets Zone
        /// </summary>
        [DataMember(Name="zone", EmitDefaultValue=false)]
        public string Zone { get; set; }

        /// <summary>
        /// Gets or Sets AccessibilitySummary
        /// </summary>
        [DataMember(Name="accessibilitySummary", EmitDefaultValue=false)]
        public string AccessibilitySummary { get; set; }

        /// <summary>
        /// Gets or Sets HasDisruption
        /// </summary>
        [DataMember(Name="hasDisruption", EmitDefaultValue=false)]
        public bool? HasDisruption { get; set; }

        /// <summary>
        /// Gets or Sets Lines
        /// </summary>
        [DataMember(Name="lines", EmitDefaultValue=false)]
        public List<TflApiPresentationEntitiesIdentifier> Lines { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public bool? Status { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Lat
        /// </summary>
        [DataMember(Name="lat", EmitDefaultValue=false)]
        public double? Lat { get; set; }

        /// <summary>
        /// Gets or Sets Lon
        /// </summary>
        [DataMember(Name="lon", EmitDefaultValue=false)]
        public double? Lon { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TflApiPresentationEntitiesMatchedStop {\n");
            sb.Append("  RouteId: ").Append(RouteId).Append("\n");
            sb.Append("  ParentId: ").Append(ParentId).Append("\n");
            sb.Append("  StationId: ").Append(StationId).Append("\n");
            sb.Append("  IcsId: ").Append(IcsId).Append("\n");
            sb.Append("  TopMostParentId: ").Append(TopMostParentId).Append("\n");
            sb.Append("  Direction: ").Append(Direction).Append("\n");
            sb.Append("  Towards: ").Append(Towards).Append("\n");
            sb.Append("  Modes: ").Append(Modes).Append("\n");
            sb.Append("  StopType: ").Append(StopType).Append("\n");
            sb.Append("  StopLetter: ").Append(StopLetter).Append("\n");
            sb.Append("  Zone: ").Append(Zone).Append("\n");
            sb.Append("  AccessibilitySummary: ").Append(AccessibilitySummary).Append("\n");
            sb.Append("  HasDisruption: ").Append(HasDisruption).Append("\n");
            sb.Append("  Lines: ").Append(Lines).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Lat: ").Append(Lat).Append("\n");
            sb.Append("  Lon: ").Append(Lon).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TflApiPresentationEntitiesMatchedStop);
        }

        /// <summary>
        /// Returns true if TflApiPresentationEntitiesMatchedStop instances are equal
        /// </summary>
        /// <param name="input">Instance of TflApiPresentationEntitiesMatchedStop to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TflApiPresentationEntitiesMatchedStop input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RouteId == input.RouteId ||
                    (this.RouteId != null &&
                    this.RouteId.Equals(input.RouteId))
                ) && 
                (
                    this.ParentId == input.ParentId ||
                    (this.ParentId != null &&
                    this.ParentId.Equals(input.ParentId))
                ) && 
                (
                    this.StationId == input.StationId ||
                    (this.StationId != null &&
                    this.StationId.Equals(input.StationId))
                ) && 
                (
                    this.IcsId == input.IcsId ||
                    (this.IcsId != null &&
                    this.IcsId.Equals(input.IcsId))
                ) && 
                (
                    this.TopMostParentId == input.TopMostParentId ||
                    (this.TopMostParentId != null &&
                    this.TopMostParentId.Equals(input.TopMostParentId))
                ) && 
                (
                    this.Direction == input.Direction ||
                    (this.Direction != null &&
                    this.Direction.Equals(input.Direction))
                ) && 
                (
                    this.Towards == input.Towards ||
                    (this.Towards != null &&
                    this.Towards.Equals(input.Towards))
                ) && 
                (
                    this.Modes == input.Modes ||
                    this.Modes != null &&
                    this.Modes.SequenceEqual(input.Modes)
                ) && 
                (
                    this.StopType == input.StopType ||
                    (this.StopType != null &&
                    this.StopType.Equals(input.StopType))
                ) && 
                (
                    this.StopLetter == input.StopLetter ||
                    (this.StopLetter != null &&
                    this.StopLetter.Equals(input.StopLetter))
                ) && 
                (
                    this.Zone == input.Zone ||
                    (this.Zone != null &&
                    this.Zone.Equals(input.Zone))
                ) && 
                (
                    this.AccessibilitySummary == input.AccessibilitySummary ||
                    (this.AccessibilitySummary != null &&
                    this.AccessibilitySummary.Equals(input.AccessibilitySummary))
                ) && 
                (
                    this.HasDisruption == input.HasDisruption ||
                    (this.HasDisruption != null &&
                    this.HasDisruption.Equals(input.HasDisruption))
                ) && 
                (
                    this.Lines == input.Lines ||
                    this.Lines != null &&
                    this.Lines.SequenceEqual(input.Lines)
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Lat == input.Lat ||
                    (this.Lat != null &&
                    this.Lat.Equals(input.Lat))
                ) && 
                (
                    this.Lon == input.Lon ||
                    (this.Lon != null &&
                    this.Lon.Equals(input.Lon))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RouteId != null)
                    hashCode = hashCode * 59 + this.RouteId.GetHashCode();
                if (this.ParentId != null)
                    hashCode = hashCode * 59 + this.ParentId.GetHashCode();
                if (this.StationId != null)
                    hashCode = hashCode * 59 + this.StationId.GetHashCode();
                if (this.IcsId != null)
                    hashCode = hashCode * 59 + this.IcsId.GetHashCode();
                if (this.TopMostParentId != null)
                    hashCode = hashCode * 59 + this.TopMostParentId.GetHashCode();
                if (this.Direction != null)
                    hashCode = hashCode * 59 + this.Direction.GetHashCode();
                if (this.Towards != null)
                    hashCode = hashCode * 59 + this.Towards.GetHashCode();
                if (this.Modes != null)
                    hashCode = hashCode * 59 + this.Modes.GetHashCode();
                if (this.StopType != null)
                    hashCode = hashCode * 59 + this.StopType.GetHashCode();
                if (this.StopLetter != null)
                    hashCode = hashCode * 59 + this.StopLetter.GetHashCode();
                if (this.Zone != null)
                    hashCode = hashCode * 59 + this.Zone.GetHashCode();
                if (this.AccessibilitySummary != null)
                    hashCode = hashCode * 59 + this.AccessibilitySummary.GetHashCode();
                if (this.HasDisruption != null)
                    hashCode = hashCode * 59 + this.HasDisruption.GetHashCode();
                if (this.Lines != null)
                    hashCode = hashCode * 59 + this.Lines.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Lat != null)
                    hashCode = hashCode * 59 + this.Lat.GetHashCode();
                if (this.Lon != null)
                    hashCode = hashCode * 59 + this.Lon.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
