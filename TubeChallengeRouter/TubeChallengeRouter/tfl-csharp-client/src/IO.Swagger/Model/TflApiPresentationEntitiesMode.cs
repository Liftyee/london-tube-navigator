/* 
 * Transport for London Unified API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TflApiPresentationEntitiesMode
    /// </summary>
    [DataContract]
    public partial class TflApiPresentationEntitiesMode :  IEquatable<TflApiPresentationEntitiesMode>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TflApiPresentationEntitiesMode" /> class.
        /// </summary>
        /// <param name="isTflService">isTflService.</param>
        /// <param name="isFarePaying">isFarePaying.</param>
        /// <param name="isScheduledService">isScheduledService.</param>
        /// <param name="modeName">modeName.</param>
        /// <param name="motType">motType.</param>
        /// <param name="network">network.</param>
        public TflApiPresentationEntitiesMode(bool? isTflService = default(bool?), bool? isFarePaying = default(bool?), bool? isScheduledService = default(bool?), string modeName = default(string), string motType = default(string), string network = default(string))
        {
            this.IsTflService = isTflService;
            this.IsFarePaying = isFarePaying;
            this.IsScheduledService = isScheduledService;
            this.ModeName = modeName;
            this.MotType = motType;
            this.Network = network;
        }
        
        /// <summary>
        /// Gets or Sets IsTflService
        /// </summary>
        [DataMember(Name="isTflService", EmitDefaultValue=false)]
        public bool? IsTflService { get; set; }

        /// <summary>
        /// Gets or Sets IsFarePaying
        /// </summary>
        [DataMember(Name="isFarePaying", EmitDefaultValue=false)]
        public bool? IsFarePaying { get; set; }

        /// <summary>
        /// Gets or Sets IsScheduledService
        /// </summary>
        [DataMember(Name="isScheduledService", EmitDefaultValue=false)]
        public bool? IsScheduledService { get; set; }

        /// <summary>
        /// Gets or Sets ModeName
        /// </summary>
        [DataMember(Name="modeName", EmitDefaultValue=false)]
        public string ModeName { get; set; }

        /// <summary>
        /// Gets or Sets MotType
        /// </summary>
        [DataMember(Name="motType", EmitDefaultValue=false)]
        public string MotType { get; set; }

        /// <summary>
        /// Gets or Sets Network
        /// </summary>
        [DataMember(Name="network", EmitDefaultValue=false)]
        public string Network { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TflApiPresentationEntitiesMode {\n");
            sb.Append("  IsTflService: ").Append(IsTflService).Append("\n");
            sb.Append("  IsFarePaying: ").Append(IsFarePaying).Append("\n");
            sb.Append("  IsScheduledService: ").Append(IsScheduledService).Append("\n");
            sb.Append("  ModeName: ").Append(ModeName).Append("\n");
            sb.Append("  MotType: ").Append(MotType).Append("\n");
            sb.Append("  Network: ").Append(Network).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TflApiPresentationEntitiesMode);
        }

        /// <summary>
        /// Returns true if TflApiPresentationEntitiesMode instances are equal
        /// </summary>
        /// <param name="input">Instance of TflApiPresentationEntitiesMode to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TflApiPresentationEntitiesMode input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IsTflService == input.IsTflService ||
                    (this.IsTflService != null &&
                    this.IsTflService.Equals(input.IsTflService))
                ) && 
                (
                    this.IsFarePaying == input.IsFarePaying ||
                    (this.IsFarePaying != null &&
                    this.IsFarePaying.Equals(input.IsFarePaying))
                ) && 
                (
                    this.IsScheduledService == input.IsScheduledService ||
                    (this.IsScheduledService != null &&
                    this.IsScheduledService.Equals(input.IsScheduledService))
                ) && 
                (
                    this.ModeName == input.ModeName ||
                    (this.ModeName != null &&
                    this.ModeName.Equals(input.ModeName))
                ) && 
                (
                    this.MotType == input.MotType ||
                    (this.MotType != null &&
                    this.MotType.Equals(input.MotType))
                ) && 
                (
                    this.Network == input.Network ||
                    (this.Network != null &&
                    this.Network.Equals(input.Network))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IsTflService != null)
                    hashCode = hashCode * 59 + this.IsTflService.GetHashCode();
                if (this.IsFarePaying != null)
                    hashCode = hashCode * 59 + this.IsFarePaying.GetHashCode();
                if (this.IsScheduledService != null)
                    hashCode = hashCode * 59 + this.IsScheduledService.GetHashCode();
                if (this.ModeName != null)
                    hashCode = hashCode * 59 + this.ModeName.GetHashCode();
                if (this.MotType != null)
                    hashCode = hashCode * 59 + this.MotType.GetHashCode();
                if (this.Network != null)
                    hashCode = hashCode * 59 + this.Network.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
