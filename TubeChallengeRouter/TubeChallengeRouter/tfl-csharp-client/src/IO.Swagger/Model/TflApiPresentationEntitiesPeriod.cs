/* 
 * Transport for London Unified API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TflApiPresentationEntitiesPeriod
    /// </summary>
    [DataContract]
    public partial class TflApiPresentationEntitiesPeriod :  IEquatable<TflApiPresentationEntitiesPeriod>, IValidatableObject
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum Normal for value: Normal
            /// </summary>
            [EnumMember(Value = "Normal")]
            Normal = 1,
            
            /// <summary>
            /// Enum FrequencyHours for value: FrequencyHours
            /// </summary>
            [EnumMember(Value = "FrequencyHours")]
            FrequencyHours = 2,
            
            /// <summary>
            /// Enum FrequencyMinutes for value: FrequencyMinutes
            /// </summary>
            [EnumMember(Value = "FrequencyMinutes")]
            FrequencyMinutes = 3,
            
            /// <summary>
            /// Enum Unknown for value: Unknown
            /// </summary>
            [EnumMember(Value = "Unknown")]
            Unknown = 4
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TflApiPresentationEntitiesPeriod" /> class.
        /// </summary>
        /// <param name="type">type.</param>
        /// <param name="fromTime">fromTime.</param>
        /// <param name="toTime">toTime.</param>
        /// <param name="frequency">frequency.</param>
        public TflApiPresentationEntitiesPeriod(TypeEnum? type = default(TypeEnum?), TflApiPresentationEntitiesTwentyFourHourClockTime fromTime = default(TflApiPresentationEntitiesTwentyFourHourClockTime), TflApiPresentationEntitiesTwentyFourHourClockTime toTime = default(TflApiPresentationEntitiesTwentyFourHourClockTime), TflApiPresentationEntitiesServiceFrequency frequency = default(TflApiPresentationEntitiesServiceFrequency))
        {
            this.Type = type;
            this.FromTime = fromTime;
            this.ToTime = toTime;
            this.Frequency = frequency;
        }
        

        /// <summary>
        /// Gets or Sets FromTime
        /// </summary>
        [DataMember(Name="fromTime", EmitDefaultValue=false)]
        public TflApiPresentationEntitiesTwentyFourHourClockTime FromTime { get; set; }

        /// <summary>
        /// Gets or Sets ToTime
        /// </summary>
        [DataMember(Name="toTime", EmitDefaultValue=false)]
        public TflApiPresentationEntitiesTwentyFourHourClockTime ToTime { get; set; }

        /// <summary>
        /// Gets or Sets Frequency
        /// </summary>
        [DataMember(Name="frequency", EmitDefaultValue=false)]
        public TflApiPresentationEntitiesServiceFrequency Frequency { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TflApiPresentationEntitiesPeriod {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  FromTime: ").Append(FromTime).Append("\n");
            sb.Append("  ToTime: ").Append(ToTime).Append("\n");
            sb.Append("  Frequency: ").Append(Frequency).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TflApiPresentationEntitiesPeriod);
        }

        /// <summary>
        /// Returns true if TflApiPresentationEntitiesPeriod instances are equal
        /// </summary>
        /// <param name="input">Instance of TflApiPresentationEntitiesPeriod to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TflApiPresentationEntitiesPeriod input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.FromTime == input.FromTime ||
                    (this.FromTime != null &&
                    this.FromTime.Equals(input.FromTime))
                ) && 
                (
                    this.ToTime == input.ToTime ||
                    (this.ToTime != null &&
                    this.ToTime.Equals(input.ToTime))
                ) && 
                (
                    this.Frequency == input.Frequency ||
                    (this.Frequency != null &&
                    this.Frequency.Equals(input.Frequency))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.FromTime != null)
                    hashCode = hashCode * 59 + this.FromTime.GetHashCode();
                if (this.ToTime != null)
                    hashCode = hashCode * 59 + this.ToTime.GetHashCode();
                if (this.Frequency != null)
                    hashCode = hashCode * 59 + this.Frequency.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
