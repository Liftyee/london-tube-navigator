/* 
 * Transport for London Unified API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TflApiPresentationEntitiesRouteSearchMatch
    /// </summary>
    [DataContract]
    public partial class TflApiPresentationEntitiesRouteSearchMatch :  IEquatable<TflApiPresentationEntitiesRouteSearchMatch>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TflApiPresentationEntitiesRouteSearchMatch" /> class.
        /// </summary>
        /// <param name="lineId">lineId.</param>
        /// <param name="mode">mode.</param>
        /// <param name="lineName">lineName.</param>
        /// <param name="lineRouteSection">lineRouteSection.</param>
        /// <param name="matchedRouteSections">matchedRouteSections.</param>
        /// <param name="matchedStops">matchedStops.</param>
        /// <param name="id">id.</param>
        /// <param name="url">url.</param>
        /// <param name="name">name.</param>
        /// <param name="lat">lat.</param>
        /// <param name="lon">lon.</param>
        public TflApiPresentationEntitiesRouteSearchMatch(string lineId = default(string), string mode = default(string), string lineName = default(string), List<TflApiPresentationEntitiesLineRouteSection> lineRouteSection = default(List<TflApiPresentationEntitiesLineRouteSection>), List<TflApiPresentationEntitiesMatchedRouteSections> matchedRouteSections = default(List<TflApiPresentationEntitiesMatchedRouteSections>), List<TflApiPresentationEntitiesMatchedStop> matchedStops = default(List<TflApiPresentationEntitiesMatchedStop>), string id = default(string), string url = default(string), string name = default(string), double? lat = default(double?), double? lon = default(double?))
        {
            this.LineId = lineId;
            this.Mode = mode;
            this.LineName = lineName;
            this.LineRouteSection = lineRouteSection;
            this.MatchedRouteSections = matchedRouteSections;
            this.MatchedStops = matchedStops;
            this.Id = id;
            this.Url = url;
            this.Name = name;
            this.Lat = lat;
            this.Lon = lon;
        }
        
        /// <summary>
        /// Gets or Sets LineId
        /// </summary>
        [DataMember(Name="lineId", EmitDefaultValue=false)]
        public string LineId { get; set; }

        /// <summary>
        /// Gets or Sets Mode
        /// </summary>
        [DataMember(Name="mode", EmitDefaultValue=false)]
        public string Mode { get; set; }

        /// <summary>
        /// Gets or Sets LineName
        /// </summary>
        [DataMember(Name="lineName", EmitDefaultValue=false)]
        public string LineName { get; set; }

        /// <summary>
        /// Gets or Sets LineRouteSection
        /// </summary>
        [DataMember(Name="lineRouteSection", EmitDefaultValue=false)]
        public List<TflApiPresentationEntitiesLineRouteSection> LineRouteSection { get; set; }

        /// <summary>
        /// Gets or Sets MatchedRouteSections
        /// </summary>
        [DataMember(Name="matchedRouteSections", EmitDefaultValue=false)]
        public List<TflApiPresentationEntitiesMatchedRouteSections> MatchedRouteSections { get; set; }

        /// <summary>
        /// Gets or Sets MatchedStops
        /// </summary>
        [DataMember(Name="matchedStops", EmitDefaultValue=false)]
        public List<TflApiPresentationEntitiesMatchedStop> MatchedStops { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Lat
        /// </summary>
        [DataMember(Name="lat", EmitDefaultValue=false)]
        public double? Lat { get; set; }

        /// <summary>
        /// Gets or Sets Lon
        /// </summary>
        [DataMember(Name="lon", EmitDefaultValue=false)]
        public double? Lon { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TflApiPresentationEntitiesRouteSearchMatch {\n");
            sb.Append("  LineId: ").Append(LineId).Append("\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  LineName: ").Append(LineName).Append("\n");
            sb.Append("  LineRouteSection: ").Append(LineRouteSection).Append("\n");
            sb.Append("  MatchedRouteSections: ").Append(MatchedRouteSections).Append("\n");
            sb.Append("  MatchedStops: ").Append(MatchedStops).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Lat: ").Append(Lat).Append("\n");
            sb.Append("  Lon: ").Append(Lon).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TflApiPresentationEntitiesRouteSearchMatch);
        }

        /// <summary>
        /// Returns true if TflApiPresentationEntitiesRouteSearchMatch instances are equal
        /// </summary>
        /// <param name="input">Instance of TflApiPresentationEntitiesRouteSearchMatch to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TflApiPresentationEntitiesRouteSearchMatch input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LineId == input.LineId ||
                    (this.LineId != null &&
                    this.LineId.Equals(input.LineId))
                ) && 
                (
                    this.Mode == input.Mode ||
                    (this.Mode != null &&
                    this.Mode.Equals(input.Mode))
                ) && 
                (
                    this.LineName == input.LineName ||
                    (this.LineName != null &&
                    this.LineName.Equals(input.LineName))
                ) && 
                (
                    this.LineRouteSection == input.LineRouteSection ||
                    this.LineRouteSection != null &&
                    this.LineRouteSection.SequenceEqual(input.LineRouteSection)
                ) && 
                (
                    this.MatchedRouteSections == input.MatchedRouteSections ||
                    this.MatchedRouteSections != null &&
                    this.MatchedRouteSections.SequenceEqual(input.MatchedRouteSections)
                ) && 
                (
                    this.MatchedStops == input.MatchedStops ||
                    this.MatchedStops != null &&
                    this.MatchedStops.SequenceEqual(input.MatchedStops)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Lat == input.Lat ||
                    (this.Lat != null &&
                    this.Lat.Equals(input.Lat))
                ) && 
                (
                    this.Lon == input.Lon ||
                    (this.Lon != null &&
                    this.Lon.Equals(input.Lon))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LineId != null)
                    hashCode = hashCode * 59 + this.LineId.GetHashCode();
                if (this.Mode != null)
                    hashCode = hashCode * 59 + this.Mode.GetHashCode();
                if (this.LineName != null)
                    hashCode = hashCode * 59 + this.LineName.GetHashCode();
                if (this.LineRouteSection != null)
                    hashCode = hashCode * 59 + this.LineRouteSection.GetHashCode();
                if (this.MatchedRouteSections != null)
                    hashCode = hashCode * 59 + this.MatchedRouteSections.GetHashCode();
                if (this.MatchedStops != null)
                    hashCode = hashCode * 59 + this.MatchedStops.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Lat != null)
                    hashCode = hashCode * 59 + this.Lat.GetHashCode();
                if (this.Lon != null)
                    hashCode = hashCode * 59 + this.Lon.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
