/* 
 * Transport for London Unified API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// A paged response containing StopPoints
    /// </summary>
    [DataContract]
    public partial class TflApiPresentationEntitiesStopPointsResponse :  IEquatable<TflApiPresentationEntitiesStopPointsResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TflApiPresentationEntitiesStopPointsResponse" /> class.
        /// </summary>
        /// <param name="centrePoint">The centre latitude/longitude of this list of StopPoints.</param>
        /// <param name="stopPoints">Collection of stop points.</param>
        /// <param name="pageSize">The maximum size of the page in this response i.e. the maximum number of StopPoints.</param>
        /// <param name="total">The total number of StopPoints available across all pages.</param>
        /// <param name="page">The index of this page.</param>
        public TflApiPresentationEntitiesStopPointsResponse(List<double?> centrePoint = default(List<double?>), List<TflApiPresentationEntitiesStopPoint> stopPoints = default(List<TflApiPresentationEntitiesStopPoint>), int? pageSize = default(int?), int? total = default(int?), int? page = default(int?))
        {
            this.CentrePoint = centrePoint;
            this.StopPoints = stopPoints;
            this.PageSize = pageSize;
            this.Total = total;
            this.Page = page;
        }
        
        /// <summary>
        /// The centre latitude/longitude of this list of StopPoints
        /// </summary>
        /// <value>The centre latitude/longitude of this list of StopPoints</value>
        [DataMember(Name="centrePoint", EmitDefaultValue=false)]
        public List<double?> CentrePoint { get; set; }

        /// <summary>
        /// Collection of stop points
        /// </summary>
        /// <value>Collection of stop points</value>
        [DataMember(Name="stopPoints", EmitDefaultValue=false)]
        public List<TflApiPresentationEntitiesStopPoint> StopPoints { get; set; }

        /// <summary>
        /// The maximum size of the page in this response i.e. the maximum number of StopPoints
        /// </summary>
        /// <value>The maximum size of the page in this response i.e. the maximum number of StopPoints</value>
        [DataMember(Name="pageSize", EmitDefaultValue=false)]
        public int? PageSize { get; set; }

        /// <summary>
        /// The total number of StopPoints available across all pages
        /// </summary>
        /// <value>The total number of StopPoints available across all pages</value>
        [DataMember(Name="total", EmitDefaultValue=false)]
        public int? Total { get; set; }

        /// <summary>
        /// The index of this page
        /// </summary>
        /// <value>The index of this page</value>
        [DataMember(Name="page", EmitDefaultValue=false)]
        public int? Page { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TflApiPresentationEntitiesStopPointsResponse {\n");
            sb.Append("  CentrePoint: ").Append(CentrePoint).Append("\n");
            sb.Append("  StopPoints: ").Append(StopPoints).Append("\n");
            sb.Append("  PageSize: ").Append(PageSize).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  Page: ").Append(Page).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TflApiPresentationEntitiesStopPointsResponse);
        }

        /// <summary>
        /// Returns true if TflApiPresentationEntitiesStopPointsResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of TflApiPresentationEntitiesStopPointsResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TflApiPresentationEntitiesStopPointsResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CentrePoint == input.CentrePoint ||
                    this.CentrePoint != null &&
                    this.CentrePoint.SequenceEqual(input.CentrePoint)
                ) && 
                (
                    this.StopPoints == input.StopPoints ||
                    this.StopPoints != null &&
                    this.StopPoints.SequenceEqual(input.StopPoints)
                ) && 
                (
                    this.PageSize == input.PageSize ||
                    (this.PageSize != null &&
                    this.PageSize.Equals(input.PageSize))
                ) && 
                (
                    this.Total == input.Total ||
                    (this.Total != null &&
                    this.Total.Equals(input.Total))
                ) && 
                (
                    this.Page == input.Page ||
                    (this.Page != null &&
                    this.Page.Equals(input.Page))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CentrePoint != null)
                    hashCode = hashCode * 59 + this.CentrePoint.GetHashCode();
                if (this.StopPoints != null)
                    hashCode = hashCode * 59 + this.StopPoints.GetHashCode();
                if (this.PageSize != null)
                    hashCode = hashCode * 59 + this.PageSize.GetHashCode();
                if (this.Total != null)
                    hashCode = hashCode * 59 + this.Total.GetHashCode();
                if (this.Page != null)
                    hashCode = hashCode * 59 + this.Page.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
