/* 
 * Transport for London Unified API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TflApiPresentationEntitiesStreetSegment
    /// </summary>
    [DataContract]
    public partial class TflApiPresentationEntitiesStreetSegment :  IEquatable<TflApiPresentationEntitiesStreetSegment>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TflApiPresentationEntitiesStreetSegment" /> class.
        /// </summary>
        /// <param name="toid">A 16 digit unique integer identifying a OS ITN (Ordnance Survey Integrated Transport Network) road link..</param>
        /// <param name="lineString">geoJSON formatted LineString containing two latitude/longitude (WGS84) pairs that identify the start and end points of the street segment..</param>
        /// <param name="sourceSystemId">The ID from the source system of the disruption that this street belongs to..</param>
        /// <param name="sourceSystemKey">The key of the source system of the disruption that this street belongs to..</param>
        public TflApiPresentationEntitiesStreetSegment(string toid = default(string), string lineString = default(string), long? sourceSystemId = default(long?), string sourceSystemKey = default(string))
        {
            this.Toid = toid;
            this.LineString = lineString;
            this.SourceSystemId = sourceSystemId;
            this.SourceSystemKey = sourceSystemKey;
        }
        
        /// <summary>
        /// A 16 digit unique integer identifying a OS ITN (Ordnance Survey Integrated Transport Network) road link.
        /// </summary>
        /// <value>A 16 digit unique integer identifying a OS ITN (Ordnance Survey Integrated Transport Network) road link.</value>
        [DataMember(Name="toid", EmitDefaultValue=false)]
        public string Toid { get; set; }

        /// <summary>
        /// geoJSON formatted LineString containing two latitude/longitude (WGS84) pairs that identify the start and end points of the street segment.
        /// </summary>
        /// <value>geoJSON formatted LineString containing two latitude/longitude (WGS84) pairs that identify the start and end points of the street segment.</value>
        [DataMember(Name="lineString", EmitDefaultValue=false)]
        public string LineString { get; set; }

        /// <summary>
        /// The ID from the source system of the disruption that this street belongs to.
        /// </summary>
        /// <value>The ID from the source system of the disruption that this street belongs to.</value>
        [DataMember(Name="sourceSystemId", EmitDefaultValue=false)]
        public long? SourceSystemId { get; set; }

        /// <summary>
        /// The key of the source system of the disruption that this street belongs to.
        /// </summary>
        /// <value>The key of the source system of the disruption that this street belongs to.</value>
        [DataMember(Name="sourceSystemKey", EmitDefaultValue=false)]
        public string SourceSystemKey { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TflApiPresentationEntitiesStreetSegment {\n");
            sb.Append("  Toid: ").Append(Toid).Append("\n");
            sb.Append("  LineString: ").Append(LineString).Append("\n");
            sb.Append("  SourceSystemId: ").Append(SourceSystemId).Append("\n");
            sb.Append("  SourceSystemKey: ").Append(SourceSystemKey).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TflApiPresentationEntitiesStreetSegment);
        }

        /// <summary>
        /// Returns true if TflApiPresentationEntitiesStreetSegment instances are equal
        /// </summary>
        /// <param name="input">Instance of TflApiPresentationEntitiesStreetSegment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TflApiPresentationEntitiesStreetSegment input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Toid == input.Toid ||
                    (this.Toid != null &&
                    this.Toid.Equals(input.Toid))
                ) && 
                (
                    this.LineString == input.LineString ||
                    (this.LineString != null &&
                    this.LineString.Equals(input.LineString))
                ) && 
                (
                    this.SourceSystemId == input.SourceSystemId ||
                    (this.SourceSystemId != null &&
                    this.SourceSystemId.Equals(input.SourceSystemId))
                ) && 
                (
                    this.SourceSystemKey == input.SourceSystemKey ||
                    (this.SourceSystemKey != null &&
                    this.SourceSystemKey.Equals(input.SourceSystemKey))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Toid != null)
                    hashCode = hashCode * 59 + this.Toid.GetHashCode();
                if (this.LineString != null)
                    hashCode = hashCode * 59 + this.LineString.GetHashCode();
                if (this.SourceSystemId != null)
                    hashCode = hashCode * 59 + this.SourceSystemId.GetHashCode();
                if (this.SourceSystemKey != null)
                    hashCode = hashCode * 59 + this.SourceSystemKey.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
