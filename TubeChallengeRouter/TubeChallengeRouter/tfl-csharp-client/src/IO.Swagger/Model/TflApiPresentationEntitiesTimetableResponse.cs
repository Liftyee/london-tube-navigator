/* 
 * Transport for London Unified API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TflApiPresentationEntitiesTimetableResponse
    /// </summary>
    [DataContract]
    public partial class TflApiPresentationEntitiesTimetableResponse :  IEquatable<TflApiPresentationEntitiesTimetableResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TflApiPresentationEntitiesTimetableResponse" /> class.
        /// </summary>
        /// <param name="lineId">lineId.</param>
        /// <param name="lineName">lineName.</param>
        /// <param name="direction">direction.</param>
        /// <param name="pdfUrl">pdfUrl.</param>
        /// <param name="stations">stations.</param>
        /// <param name="stops">stops.</param>
        /// <param name="timetable">timetable.</param>
        /// <param name="disambiguation">disambiguation.</param>
        /// <param name="statusErrorMessage">statusErrorMessage.</param>
        public TflApiPresentationEntitiesTimetableResponse(string lineId = default(string), string lineName = default(string), string direction = default(string), string pdfUrl = default(string), List<TflApiPresentationEntitiesMatchedStop> stations = default(List<TflApiPresentationEntitiesMatchedStop>), List<TflApiPresentationEntitiesMatchedStop> stops = default(List<TflApiPresentationEntitiesMatchedStop>), TflApiPresentationEntitiesTimetable timetable = default(TflApiPresentationEntitiesTimetable), TflApiPresentationEntitiesTimetablesDisambiguation disambiguation = default(TflApiPresentationEntitiesTimetablesDisambiguation), string statusErrorMessage = default(string))
        {
            this.LineId = lineId;
            this.LineName = lineName;
            this.Direction = direction;
            this.PdfUrl = pdfUrl;
            this.Stations = stations;
            this.Stops = stops;
            this.Timetable = timetable;
            this.Disambiguation = disambiguation;
            this.StatusErrorMessage = statusErrorMessage;
        }
        
        /// <summary>
        /// Gets or Sets LineId
        /// </summary>
        [DataMember(Name="lineId", EmitDefaultValue=false)]
        public string LineId { get; set; }

        /// <summary>
        /// Gets or Sets LineName
        /// </summary>
        [DataMember(Name="lineName", EmitDefaultValue=false)]
        public string LineName { get; set; }

        /// <summary>
        /// Gets or Sets Direction
        /// </summary>
        [DataMember(Name="direction", EmitDefaultValue=false)]
        public string Direction { get; set; }

        /// <summary>
        /// Gets or Sets PdfUrl
        /// </summary>
        [DataMember(Name="pdfUrl", EmitDefaultValue=false)]
        public string PdfUrl { get; set; }

        /// <summary>
        /// Gets or Sets Stations
        /// </summary>
        [DataMember(Name="stations", EmitDefaultValue=false)]
        public List<TflApiPresentationEntitiesMatchedStop> Stations { get; set; }

        /// <summary>
        /// Gets or Sets Stops
        /// </summary>
        [DataMember(Name="stops", EmitDefaultValue=false)]
        public List<TflApiPresentationEntitiesMatchedStop> Stops { get; set; }

        /// <summary>
        /// Gets or Sets Timetable
        /// </summary>
        [DataMember(Name="timetable", EmitDefaultValue=false)]
        public TflApiPresentationEntitiesTimetable Timetable { get; set; }

        /// <summary>
        /// Gets or Sets Disambiguation
        /// </summary>
        [DataMember(Name="disambiguation", EmitDefaultValue=false)]
        public TflApiPresentationEntitiesTimetablesDisambiguation Disambiguation { get; set; }

        /// <summary>
        /// Gets or Sets StatusErrorMessage
        /// </summary>
        [DataMember(Name="statusErrorMessage", EmitDefaultValue=false)]
        public string StatusErrorMessage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TflApiPresentationEntitiesTimetableResponse {\n");
            sb.Append("  LineId: ").Append(LineId).Append("\n");
            sb.Append("  LineName: ").Append(LineName).Append("\n");
            sb.Append("  Direction: ").Append(Direction).Append("\n");
            sb.Append("  PdfUrl: ").Append(PdfUrl).Append("\n");
            sb.Append("  Stations: ").Append(Stations).Append("\n");
            sb.Append("  Stops: ").Append(Stops).Append("\n");
            sb.Append("  Timetable: ").Append(Timetable).Append("\n");
            sb.Append("  Disambiguation: ").Append(Disambiguation).Append("\n");
            sb.Append("  StatusErrorMessage: ").Append(StatusErrorMessage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TflApiPresentationEntitiesTimetableResponse);
        }

        /// <summary>
        /// Returns true if TflApiPresentationEntitiesTimetableResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of TflApiPresentationEntitiesTimetableResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TflApiPresentationEntitiesTimetableResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LineId == input.LineId ||
                    (this.LineId != null &&
                    this.LineId.Equals(input.LineId))
                ) && 
                (
                    this.LineName == input.LineName ||
                    (this.LineName != null &&
                    this.LineName.Equals(input.LineName))
                ) && 
                (
                    this.Direction == input.Direction ||
                    (this.Direction != null &&
                    this.Direction.Equals(input.Direction))
                ) && 
                (
                    this.PdfUrl == input.PdfUrl ||
                    (this.PdfUrl != null &&
                    this.PdfUrl.Equals(input.PdfUrl))
                ) && 
                (
                    this.Stations == input.Stations ||
                    this.Stations != null &&
                    this.Stations.SequenceEqual(input.Stations)
                ) && 
                (
                    this.Stops == input.Stops ||
                    this.Stops != null &&
                    this.Stops.SequenceEqual(input.Stops)
                ) && 
                (
                    this.Timetable == input.Timetable ||
                    (this.Timetable != null &&
                    this.Timetable.Equals(input.Timetable))
                ) && 
                (
                    this.Disambiguation == input.Disambiguation ||
                    (this.Disambiguation != null &&
                    this.Disambiguation.Equals(input.Disambiguation))
                ) && 
                (
                    this.StatusErrorMessage == input.StatusErrorMessage ||
                    (this.StatusErrorMessage != null &&
                    this.StatusErrorMessage.Equals(input.StatusErrorMessage))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LineId != null)
                    hashCode = hashCode * 59 + this.LineId.GetHashCode();
                if (this.LineName != null)
                    hashCode = hashCode * 59 + this.LineName.GetHashCode();
                if (this.Direction != null)
                    hashCode = hashCode * 59 + this.Direction.GetHashCode();
                if (this.PdfUrl != null)
                    hashCode = hashCode * 59 + this.PdfUrl.GetHashCode();
                if (this.Stations != null)
                    hashCode = hashCode * 59 + this.Stations.GetHashCode();
                if (this.Stops != null)
                    hashCode = hashCode * 59 + this.Stops.GetHashCode();
                if (this.Timetable != null)
                    hashCode = hashCode * 59 + this.Timetable.GetHashCode();
                if (this.Disambiguation != null)
                    hashCode = hashCode * 59 + this.Disambiguation.GetHashCode();
                if (this.StatusErrorMessage != null)
                    hashCode = hashCode * 59 + this.StatusErrorMessage.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
