@startuml

class DijkstraCostNetwork {
    + DijkstraCostNetwork(logger:ILogger)
    <<internal>> <<override>> Initialise() : void
    + <<override>> CostFunction(startId:string, endId:string, path:List<string>) : int
    + <<override>> CostFunction(startId:string, endId:string) : int
    - DijkstraLookup(startId:string, endId:string, path:List<string>) : int
    + <<override>> Swap(route:Route, idxA:int, idxB:int) : void
    + <<override>> TakeAndInsert(route:Route, takeFrom:int, insertBefore:int) : void
    - UpdatePathReturnCost(route:Route, idxA:int) : int
}
Network <|-- DijkstraCostNetwork

abstract class Network {
    # NEdges : int
    # <<const>> InfCost : int = 1000000000
    + Network(logger:ILogger)
    <<internal>> <<virtual>> Initialise() : void
    + AddStationId(naptanId:string, name:string?) : void
    + LinkStationsPartial(startId:string, endId:string, direction:Dir, line:Line?) : void
    + UpdateLink(startId:string, endId:string, newTime:TimeSpan) : void
    + HasStationById(id:string) : bool
    + <<override>> ToString() : string
    + GetStationIDs() : List<string>
    + {abstract} CostFunction(startId:string, endId:string, path:List<string>) : int
    + {abstract} CostFunction(startId:string, endId:string) : int
    + GenerateRandomRoute() : Route
    + CostFunction(route:Route) : int
    + RouteToStringStationSeq(route:Route) : string
    + RouteDetailsToStream(route:Route, outStream:Stream) : void
    + Swap(route:Route, idxA:int, idxB:int) : void
    + TakeAndInsert(route:Route, takeFrom:int, insertBefore:int) : void
    + RecalculateRouteCosts(route:Route) : void
    + RecalculateRouteData(route:Route) : void
}
class FloydCostNetwork {
    + FloydCostNetwork(logger:ILogger)
    <<internal>> <<override>> Initialise() : void
    + <<override>> CostFunction(startId:string, endId:string) : int
    - PreprocessFloyd() : void
    + EnumerateCostMatrix() : string
}
Network <|-- FloydCostNetwork
Network o--> Station

@enduml
