@startuml

scale max 1024 width
enum Priority {
    Smallest,
    Largest,
}
class "PriorityQueue`1"<T> {
    - _nodeCount : int
    + Count : int <<get>>
    + PriorityQueue(size:int, prio:Priority)
    + Insert(item:T) : void
    + Pop() : T
    - PushUp(currentPosition:int) : void
    - PushDown(currentPosition:int) : void
    - OutOfOrder(node1:T, node2:T) : bool
    - SwapIndices(pos1:int, pos2:int) : void
    + Top() : T
}
"PriorityQueue`1" --> "_priority" Priority
class TflModelWrapper {
    - <<readonly>> _cachePath : string
    - <<const>> MaxCacheAge : int = 30
    - <<const>> PercentOfTotal : int = 90
    - <<const>> InitialPercent : double = 3.0
    + TflModelWrapper(logger:ILogger, cachePath:string)
    - AddLineSeqLinks(segments:List<>, network:Network, currentLineId:string, direction:Dir) : void
    - EnsureCacheUpdated() : void
    + PopulateNetworkStructure(network:Network) : void
    + SetProgressCallback(callback:Action<double>) : void
    - PopulateNetworkStructureFromCache(network:Network) : void
    - UpdateStructureCache() : void
    - UpdateTimingsLib() : void
    - PopulateNetworkTimesTimingsLib(network:Network) : void
}
INetworkDataSource <|-- TflModelWrapper
class LinearNetwork {
    - <<readonly>> _numNodes : int
    + LinearNetwork(nNodes:int)
    + PopulateNetworkStructure(network:Network) : void
    + SetProgressCallback(callback:Action<double>) : void
}
class TestNetwork1 {
    + PopulateNetworkStructure(network:Network) : void
    + SetProgressCallback(callback:Action<double>) : void
}
INetworkDataSource <|-- LinearNetwork
INetworkDataSource <|-- TestNetwork1
struct Route {
    + Count : int <<get>>
    + Cost : int <<get>>
    + Duration : int <<get>>
    + Route(stations:List<string>, cost:int, intermediateStations:List<List<string>>?)
    + Route(stations:List<string>)
    + <<override>> ToString() : string
    + UpdateCost(newCost:int) : void
    - InterStationCount() : int
    + InterCount : int <<get>>
}
Route <-- SolverControlViewModel
Network "_tube" <-- SolverControlViewModel
NetworkFactory "_tubeFactory" <-- SolverControlViewModel
class Station {
    + <<readonly>> Name : string?
    + <<readonly>> NaptanId : string
    + Station(naptan:string)
    + Station(naptan:string, name:string)
    + AddLink(newLink:Link) : void
    + GetLinks() : List<Link>
    + CostTo(destId:string) : int
    + HasLink(destId:string) : bool
    <<internal>> GetLinkByDestId(id:string) : Link
    + ModifyLink(lineId:string, destId:string, newTime:TimeSpan) : void
    + ModifyLink(destId:string, newTime:TimeSpan) : void
}
interface INetworkDataSource {
    + PopulateNetworkStructure(network:Network) : void
    + SetProgressCallback(callback:Action<double>) : void
}
enum NetworkType {
    Floyd,
    Dijkstra,
}
class NetworkFactory {
    + NetworkFactory(dataSource:INetworkDataSource)
    + Generate(type:NetworkType, logger:ILogger) : Network
}
NetworkFactory --> "_dataSource" INetworkDataSource
class DijkstraCostNetwork {
    + DijkstraCostNetwork(logger:ILogger)
    <<internal>> <<override>> Initialise() : void
    + <<override>> CostFunction(startId:string, endId:string, path:List<string>) : int
    + <<override>> CostFunction(startId:string, endId:string) : int
    - DijkstraLookup(startId:string, endId:string, path:List<string>) : int
    + <<override>> Swap(route:Route, idxA:int, idxB:int) : void
    + <<override>> TakeAndInsert(route:Route, takeFrom:int, insertBefore:int) : void
    - UpdatePath(route:Route, idxA:int) : int
}
struct DijkstraNode {
    + <<readonly>> StationId : string
    + <<readonly>> Cost : int
    + CompareTo(other:DijkstraNode) : int
    + DijkstraNode(stationId:string, cost:int)
}
Network <|-- DijkstraCostNetwork
DijkstraCostNetwork +-- DijkstraNode
enum Dir {
    Inbound,
    Outbound,
    Bidirectional,
}
class Line {
    + <<readonly>> Name : string
    + <<readonly>> Id : string
    + Line(id:string, name:string)
}
struct Link {
    <<internal>> Line : Line? <<get>>
    + Link(end:Station, line:Line?, dir:Dir)
    <<internal>> SetDuration(duration:TimeSpan) : void
    <<internal>> SetLine(line:Line) : void
    + GetCost() : int
}
Link --> "Destination" Station
Link --> "Duration" TimeSpan
Link --> "Dir" Dir
abstract class Network {
    # NEdges : int
    # <<const>> InfCost : int = 1000000000
    + Network(logger:ILogger)
    <<internal>> <<virtual>> Initialise() : void
    + AddStationId(naptanId:string, name:string?) : void
    + LinkStationsPartial(startId:string, endId:string, direction:Dir, lineId:string?) : void
    + UpdateLink(startId:string, endId:string, newTime:TimeSpan) : void
    + HasStationById(id:string) : bool
    + AddLine(id:string, name:string) : void
    + <<override>> ToString() : string
    + GetStationIDs() : List<string>
    + {abstract} CostFunction(startId:string, endId:string, path:List<string>) : int
    + {abstract} CostFunction(startId:string, endId:string) : int
    + <<virtual>> GenerateRandomRoute() : Route
    + <<virtual>> CostFunction(route:Route) : int
    + <<virtual>> CostFunction(route:Route, idxA:int, idxB:int) : int
    + RouteToStringStationSeq(route:Route) : string
    + RouteDetailsToStream(route:Route, outStream:Stream) : void
    + <<virtual>> Swap(route:Route, idxA:int, idxB:int) : void
    + <<virtual>> TakeAndInsert(route:Route, takeFrom:int, insertBefore:int) : void
    + RecalculateRouteData(route:Route) : void
    + GetStationName(id:string) : string
}
class FloydCostNetwork {
    + FloydCostNetwork(logger:ILogger)
    <<internal>> <<override>> Initialise() : void
    + <<override>> CostFunction(startId:string, endId:string, path:List<string>) : int
    + <<override>> CostFunction(startId:string, endId:string) : int
    - PreprocessFloyd() : void
    + EnumerateCostMatrix() : string
}
Network <|-- FloydCostNetwork
class StrictAnnealingSolver {
    + StrictAnnealingSolver(logger:ILogger)
    + StrictAnnealingSolver(logger:ILogger, progressCallback:Action<double>)
    + <<override>> Solve(net:Network) : Route
}
AnnealingSolver <|-- StrictAnnealingSolver
ISolver <|-- StrictAnnealingSolver
interface ISolver {
    + Solve(network:Network) : Route
    + SetRandomSwapProbability(prob:double) : void
    + GetRandomSwapProbability() : double
    + SetMaxIterations(max:int) : void
    + GetMaxIterations() : int
    + SetCoolDownFactor(factor:double) : void
    + GetCoolDownFactor() : double
}
class AnnealingSolver {
    - _randomSwapProbability : double
    # MaxIterations : int
    # CoolDownFactor : double
    + AnnealingSolver(logger:ILogger)
    + AnnealingSolver(logger:ILogger, progressCallback:Action<double>)
    # PickRandomOperation(generator:Random) : AnnealOpType
    + <<virtual>> Solve(net:Network) : Route
    - {static} RevertOperation(net:Network, operation:AnnealOpType, route:Route, stationA:int, stationB:int) : Route
    + SetRandomSwapProbability(probability:double) : void
    + GetRandomSwapProbability() : double
    + SetMaxIterations(max:int) : void
    + GetMaxIterations() : int
    + SetCoolDownFactor(factor:double) : void
    + GetCoolDownFactor() : double
}
enum AnnealOpType {
    SwapRandom,
    SwapIntermediate,
    Transpose,
}
class NegativeCostException {
    + NegativeCostException(cost:int)
}
class CostMismatchException {
    + CostMismatchException(calculatedCost:int, routeCost:int)
}
ISolver <|-- AnnealingSolver
AnnealingSolver +-- AnnealOpType
AnnealingSolver +-- NegativeCostException
ApplicationException <|-- NegativeCostException
AnnealingSolver +-- CostMismatchException
ApplicationException <|-- CostMismatchException

class SolverControlViewModel {
    - _startStationName : string?
    - _solveProgress : double
    - _swapProb : double
    - _tempFactor : double
    - _maxIterations : int
    - _source : INetworkDataSource?
    - _tubeFactory : NetworkFactory?
    - _tube : Network?
    + SolveProgress : double <<get>> <<set>>
    + SwapProb : double <<get>> <<set>>
    + TempFactor : double <<get>> <<set>>
    + MaxIterations : int <<get>> <<set>>
    + SolverControlViewModel()
    - InitializeNetwork() : void
    - RunSolve() : void
    - <<async>> SolveRouteAsync() : Task
    - FormatMins(mins:int) : string
    - ShowSolverResult(result:Route) : void
    - SetProgress(progress:double) : void
    - {static} GetCachePath() : string
    - WriteRouteToFile(tube:Network, route:Route) : void
}
SolverControlViewModel --> "_solver" ISolver
@enduml
