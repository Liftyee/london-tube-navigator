@startuml

scale max 1024 width
enum Priority {
    Smallest,
    Largest,
}
class "PriorityQueue"<T> {
    - _nodeCount : int
    + Count : int <<get>>
    + PriorityQueue()
    + Insert() : void
    + Pop() : T
    - PushUp() : void
    - PushDown() : void
    - OutOfOrder() : bool
    - SwapIndices() : void
    + Top() : T
}
"PriorityQueue" --> "_priority" Priority
class TflModelWrapper {
    - <<readonly>> _cachePath : string
    - <<const>> MaxCacheAge : int = 30
    - <<const>> PercentOfTotal : int = 90
    - <<const>> InitialPercent : double = 3.0
    + TflModelWrapper()
    - AddLineSeqLinks() : void
    - EnsureCacheUpdated() : void
    + PopulateNetworkStructure() : void
    + SetProgressCallback() : void
    - PopulateNetworkStructureFromCache() : void
    - UpdateStructureCache() : void
    - UpdateTimingsLib() : void
    - PopulateNetworkTimesTimingsLib() : void
}
INetworkDataSource <|-- TflModelWrapper
struct Route {
    + Count : int <<get>>
    + Cost : int <<get>>
    + Duration : int <<get>>
    + Route()
    + Route()
    + <<override>> ToString() : string
    + UpdateCost() : void
    - InterStationCount() : int
    + InterCount : int <<get>>
}
SolverControlViewModel --> Route 
SolverControlViewModel --> "_tube" Network 
SolverControlViewModel --> "_tubeFactory" NetworkFactory 
class Station {
    + <<readonly>> Name : string?
    + <<readonly>> NaptanId : string
    + Station()
    + Station()
    + AddLink() : void
    + GetLinks() : List<Link>
    + CostTo() : int
    + HasLink() : bool
    <<internal>> GetLinkByDestId() : Link
    + ModifyLink() : void
    + ModifyLink() : void
}
interface INetworkDataSource {
    + PopulateNetworkStructure() : void
    + SetProgressCallback() : void
}
enum NetworkType {
    Floyd,
    Dijkstra,
}
NetworkFactory --> NetworkType
class NetworkFactory {
    + NetworkFactory()
    + Generate() : Network
}
NetworkFactory --> "_dataSource" INetworkDataSource
class DijkstraCostNetwork {
    + DijkstraCostNetwork()
    <<internal>> <<override>> Initialise() : void
    + <<override>> CostFunction() : int
    + <<override>> CostFunction() : int
    - DijkstraLookup() : int
    + <<override>> Swap() : void
    + <<override>> TakeAndInsert() : void
    - UpdatePath() : int
}
struct DijkstraNode {
    + <<readonly>> StationId : string
    + <<readonly>> Cost : int
    + CompareTo() : int
    + DijkstraNode()
}
Network <|-- DijkstraCostNetwork
DijkstraCostNetwork +-- DijkstraNode
DijkstraCostNetwork --> PriorityQueue
enum Dir {
    Inbound,
    Outbound,
    Bidirectional,
}
class Line {
    + <<readonly>> Name : string
    + <<readonly>> Id : string
    + Line()
}
struct Link {
    <<internal>> Line : Line? <<get>>
    + Link()
    <<internal>> SetDuration() : void
    <<internal>> SetLine() : void
    + GetCost() : int
}
Link --> "Destination" Station
Link --> "Dir" Dir
Network --* Station
Network --* Line
Station --* Link
abstract class Network {
    # NEdges : int
    # <<const>> InfCost : int = 1000000000
    + Network()
    <<internal>> <<virtual>> Initialise() : void
    + AddStationId() : void
    + LinkStationsPartial() : void
    + UpdateLink() : void
    + HasStationById() : bool
    + AddLine() : void
    + <<override>> ToString() : string
    + GetStationIDs() : List<string>
    + {abstract} CostFunction() : int
    + <<virtual>> GenerateRandomRoute() : Route
    + <<virtual>> CostFunction() : int
    + RouteToStringStationSeq() : string
    + RouteDetailsToStream() : void
    + <<virtual>> Swap() : void
    + <<virtual>> TakeAndInsert() : void
    + RecalculateRouteData() : void
    + GetStationName() : string
}
class FloydCostNetwork {
    + FloydCostNetwork()
    <<internal>> <<override>> Initialise() : void
    + <<override>> CostFunction() : int
    - PreprocessFloyd() : void
    + EnumerateCostMatrix() : string
}
Network <|-- FloydCostNetwork
class StrictAnnealingSolver {
    + StrictAnnealingSolver()
    + <<override>> Solve() : Route
}
AnnealingSolver <|-- StrictAnnealingSolver
ISolver <|-- StrictAnnealingSolver
interface ISolver {
    + Solve() : Route
    + SetRandomSwapProbability() : void
    + GetRandomSwapProbability() : double
    + SetMaxIterations() : void
    + GetMaxIterations() : int
    + SetCoolDownFactor() : void
    + GetCoolDownFactor() : double
}
class AnnealingSolver {
    - _randomSwapProbability : double
    # MaxIterations : int
    # CoolDownFactor : double
    + AnnealingSolver()
    + AnnealingSolver()
    # PickRandomOperation() : AnnealOpType
    + <<virtual>> Solve() : Route
    - {static} RevertOperation() : Route
    + SetRandomSwapProbability() : void
    + GetRandomSwapProbability() : double
    + SetMaxIterations() : void
    + GetMaxIterations() : int
    + SetCoolDownFactor() : void
    + GetCoolDownFactor() : double
}
enum AnnealOpType {
    SwapRandom,
    SwapIntermediate,
    Transpose,
}
class NegativeCostException {
    + NegativeCostException()
}
class CostMismatchException {
    + CostMismatchException()
}
ISolver <|-- AnnealingSolver
AnnealingSolver +-- AnnealOpType
AnnealingSolver +-- NegativeCostException
ApplicationException <|-- NegativeCostException
AnnealingSolver +-- CostMismatchException
ApplicationException <|-- CostMismatchException

class SolverControlViewModel {
    - _startStationName : string?
    - _solveProgress : double
    - _swapProb : double
    - _tempFactor : double
    - _maxIterations : int
    - _source : INetworkDataSource?
    - _tubeFactory : NetworkFactory?
    - _tube : Network?
    + SolveProgress : double <<get>> <<set>>
    + SwapProb : double <<get>> <<set>>
    + TempFactor : double <<get>> <<set>>
    + MaxIterations : int <<get>> <<set>>
    + SolverControlViewModel()
    - InitializeNetwork() : void
    - RunSolve() : void
    - <<async>> SolveRouteAsync() : Task
    - FormatMins() : string
    - ShowSolverResult() : void
    - SetProgress() : void
    - {static} GetCachePath() : string
    - WriteRouteToFile() : void
}
SolverControlViewModel --> "_solver" ISolver
@enduml
