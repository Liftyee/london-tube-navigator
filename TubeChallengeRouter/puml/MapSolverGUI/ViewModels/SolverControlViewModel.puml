@startuml
class SolverControlViewModel {
    - _startStationName : string?
    - _solveProgress : double
    - _swapProb : double
    - _tempFactor : double
    - _maxIterations : int
    - <<readonly>> _solver : ISolver
    + SolveCommand : ICommand <<get>>
    + TestControls : ICommand <<get>>
    + OutputLog : ObservableCollection<string> <<get>>
    - {static} UILogger : UIOutputSink <<get>>
    - {static} <<readonly>> Logger : ILogger
    + SolveProgress : double <<get>> <<set>>
    + StartStation : string? <<get>> <<set>>
    + SwapProb : double <<get>> <<set>>
    + TempFactor : double <<get>> <<set>>
    + MaxIterations : int <<get>> <<set>>
    + SolverControlViewModel()
    - RunSolve() : void
    - <<async>> TestOutputs() : Task
    - <<async>> SolveRouteAsync() : Task
    - ShowSolverResult(result:Route) : void
    - SetProgress(progress:double) : void
    - {static} GetCachePath() : string
    - WriteRouteToFile(tube:Network, route:Route) : void
}
class UIOutputSink {
    - _outputLog : ObservableCollection<string>?
    + Emit(logEvent:LogEvent) : void
    + AddOutput(output:ObservableCollection<string>) : void
}
ReactiveObject <|-- SolverControlViewModel
SolverControlViewModel +-- UIOutputSink
ILogEventSink <|-- UIOutputSink
@enduml
