@startuml
class SolverControlViewModel {
    - _startStationName : string?
    - _solveProgress : double
    - _swapProb : double
    - _tempFactor : double
    - _maxIterations : int
    - _source : INetworkDataSource?
    - _tubeFactory : NetworkFactory?
    - _tube : Network?
    + SolveProgress : double <<get>> <<set>>
    + SwapProb : double <<get>> <<set>>
    + TempFactor : double <<get>> <<set>>
    + MaxIterations : int <<get>> <<set>>
    + SolverControlViewModel()
    - InitializeNetwork() : void
    - RunSolve() : void
    - <<async>> SolveRouteAsync() : Task
    - FormatMins(mins:int) : string
    - ShowSolverResult(result:Route) : void
    - SetProgress(progress:double) : void
    - {static} GetCachePath() : string
    - WriteRouteToFile(tube:Network, route:Route) : void
}
class "ObservableCollection`1"<T> {
}
class UiOutputSink {
    - _outputLog : ObservableCollection<string>?
    + Emit(logEvent:LogEvent) : void
    + AddOutput(output:ObservableCollection<string>) : void
}
ReactiveObject <|-- SolverControlViewModel
SolverControlViewModel --> "_solver" ISolver
SolverControlViewModel --> "SolveCommand" ICommand
SolverControlViewModel o-> "OutputLog<string>" "ObservableCollection`1"
SolverControlViewModel o-> "UiLogger" UiOutputSink
SolverControlViewModel o-> "Logger" ILogger
SolverControlViewModel +-- UiOutputSink
ILogEventSink <|-- UiOutputSink
@enduml
