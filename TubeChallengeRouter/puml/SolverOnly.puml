@startuml
class AnnealingSolver {
    - _randomSwapProbability : double
    # MaxIterations : int
    # CoolDownFactor : double
    + AnnealingSolver(logger:ILogger)
    + AnnealingSolver(logger:ILogger, progressCallback:Action<double>)
    # PickRandomOperation(generator:Random) : AnnealOpType
    + <<virtual>> Solve(net:Network) : Route
    - {static} RevertOperation(net:Network, operation:AnnealOpType, 
    route:Route, stationA:int, stationB:int) : Route
    + SetRandomSwapProbability(probability:double) : void
    + GetRandomSwapProbability() : double
    + SetMaxIterations(max:int) : void
    + GetMaxIterations() : int
    + SetCoolDownFactor(factor:double) : void
    + GetCoolDownFactor() : double
}
enum AnnealOpType {
    SwapRandom,
    SwapIntermediate,
    Transpose,
}
class NegativeCostException {
    + NegativeCostException(cost:int)
}
class CostMismatchException {
    + CostMismatchException(calculatedCost:int, routeCost:int)
}
class StrictAnnealingSolver {
    + StrictAnnealingSolver(logger:ILogger)
    + StrictAnnealingSolver(logger:ILogger, progressCallback:Action<double>)
    + <<override>> Solve(net:Network) : Route
}
AnnealingSolver <|-- StrictAnnealingSolver
ISolver <|-- StrictAnnealingSolver
ISolver <|-- AnnealingSolver
AnnealingSolver +-- AnnealOpType
AnnealingSolver +-- NegativeCostException
AnnealingSolver +-- CostMismatchException
@enduml
