@startuml
class AnnealingSolver {
    - _randomSwapProbability : double
    # MaxIterations : int
    # CoolDownFactor : double
    + AnnealingSolver(logger:ILogger)
    + Solve(net:Network) : Route
    + SetProgressCallback(callback:Action<double>) : void
    + SetRandomSwapProbability(probability:double) : void
    + GetRandomSwapProbability() : double
    + SetMaxIterations(max:int) : void
    + GetMaxIterations() : int
    + SetCoolDownFactor(factor:double) : void
    + GetCoolDownFactor() : double
}
enum AnnealOpType {
    SwapRandom,
    SwapIntermediate,
    Transpose,
}
class NegativeCostException {
    + NegativeCostException(cost:int)
}
class CostMismatchException {
    + CostMismatchException(calculatedCost:int, routeCost:int)
}
interface ISolver {
    + Solve(net:Network) : Route
    + SetProgressCallback(callback:Action<double>) : void
}
ISolver <|-- AnnealingSolver
AnnealingSolver +-- AnnealOpType
AnnealingSolver +-- NegativeCostException
AnnealingSolver +-- CostMismatchException
@enduml
