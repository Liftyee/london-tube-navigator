@startuml
class DijkstraCostNetwork {
    + DijkstraCostNetwork(logger:ILogger)
    <<internal>> <<override>> Initialise() : void
    + <<override>> CostFunction(startId:string, endId:string, path:List<string>) : int
    + <<override>> CostFunction(startId:string, endId:string) : int
    - DijkstraLookup(startId:string, endId:string, path:List<string>) : int
    + <<override>> Swap(route:Route, idxA:int, idxB:int) : void
    + <<override>> TakeAndInsert(route:Route, takeFrom:int, insertBefore:int) : void
    - UpdatePath(route:Route, idxA:int) : int
}
struct DijkstraNode {
    + <<readonly>> StationId : string
    + <<readonly>> Cost : int
    + CompareTo(other:DijkstraNode) : int
    + DijkstraNode(stationId:string, cost:int)
}
class "Dictionary`2"<T1,T2> {
}
class "IComparable`1"<T> {
}
Network <|-- DijkstraCostNetwork
DijkstraCostNetwork --> "_costCache<string,Dictionary<string, int?>>" "Dictionary`2"
DijkstraCostNetwork --> "_pathCache<string,Dictionary<string, List<string>>>" "Dictionary`2"
DijkstraCostNetwork +-- DijkstraNode
"IComparable`1" "<DijkstraNode>" <|-- DijkstraNode
@enduml
