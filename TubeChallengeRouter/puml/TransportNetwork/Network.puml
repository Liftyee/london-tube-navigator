@startuml
class Network {
    # <<const>> INF_COST : int = 1000000000
    + StationCount : int <<get>>
    # NEdges : int
    + Network(logger:ILogger)
    <<internal>> <<virtual>> Initialise() : void
    + AddStation(stationToAdd:Station) : void
    + AddStationByIdIfNotPresent(naptanId:string) : void
    + AddStationByIdIfNotPresent(naptanId:string, name:string) : void
    + WriteStationsToFile(file:FileStream) : void
    + LinkStationsPartial(startId:string, endId:string, direction:Dir, line:Line?) : void
    + UpdateLink(startId:string, endId:string, newTime:TimeSpan) : void
    + HasStationById(ID:string) : bool
    + <<override>> ToString() : string
    + EnumerateStations() : string
    - GetStations() : List<Station>
    + GetStationIDs() : List<string>
    + <<virtual>> CostFunction(startId:string, endId:string, path:List<string>) : int
    + <<virtual>> CostFunction(startId:string, endId:string) : int
    + <<virtual>> GenerateRandomRoute() : Route
    + <<virtual>> CostFunction(route:Route) : int
    + <<virtual>> TravelTime(route:Route) : TimeSpan
    + <<virtual>> TravelTime(startId:string, endId:string) : TimeSpan
    + RouteToStringStationSeq(route:Route) : string
    + RouteDetailsToStream(route:Route, outStream:Stream) : void
    # <<virtual>> RemoveStationFromTotals(route:Route, index:int) : void
    + <<virtual>> Swap(route:Route, idxA:int, idxB:int) : void
    + <<virtual>> TakeAndInsert(route:Route, takeFrom:int, insertBefore:int) : void
    + RecalculateRouteCosts(route:Route) : void
    + RecalculateRouteData(route:Route) : void
}
class "Dictionary`2"<T1,T2> {
}
Network --> "Stations<string,Station>" "Dictionary`2"
Network --> "Lines<int,Line>" "Dictionary`2"
Network --> "Logger" ILogger
@enduml
