@startuml
interface IBikePointApi {
}
class BikePointApi <<partial>> {
    + BikePointApi(basePath:String)
    + BikePointApi(configuration:IO.Swagger.Client.Configuration)
    + GetBasePath() : String
    + SetBasePath(basePath:String) : void
    + DefaultHeader() : IDictionary<String, String>
    + AddDefaultHeader(key:string, value:string) : void
    + BikePointGet(id:string) : TflApiPresentationEntitiesPlace
    + BikePointGetWithHttpInfo(id:string) : ApiResponse< TflApiPresentationEntitiesPlace >
    + <<async>> BikePointGetAsync(id:string) : System.Threading.Tasks.Task<TflApiPresentationEntitiesPlace>
    + <<async>> BikePointGetAsyncWithHttpInfo(id:string) : System.Threading.Tasks.Task<ApiResponse<TflApiPresentationEntitiesPlace>>
    + BikePointGetAll() : List<TflApiPresentationEntitiesPlace>
    + BikePointGetAllWithHttpInfo() : ApiResponse< List<TflApiPresentationEntitiesPlace> >
    + <<async>> BikePointGetAllAsync() : System.Threading.Tasks.Task<List<TflApiPresentationEntitiesPlace>>
    + <<async>> BikePointGetAllAsyncWithHttpInfo() : System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesPlace>>>
    + BikePointSearch(query:string) : List<TflApiPresentationEntitiesPlace>
    + BikePointSearchWithHttpInfo(query:string) : ApiResponse< List<TflApiPresentationEntitiesPlace> >
    + <<async>> BikePointSearchAsync(query:string) : System.Threading.Tasks.Task<List<TflApiPresentationEntitiesPlace>>
    + <<async>> BikePointSearchAsyncWithHttpInfo(query:string) : System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesPlace>>>
}
IApiAccessor <|-- IBikePointApi
IBikePointApi <|-- BikePointApi
@enduml
