@startuml
interface IJourneyApi {
}
class JourneyApi <<partial>> {
    + JourneyApi(basePath:String)
    + JourneyApi(configuration:IO.Swagger.Client.Configuration)
    + GetBasePath() : String
    + SetBasePath(basePath:String) : void
    + DefaultHeader() : IDictionary<String, String>
    + AddDefaultHeader(key:string, value:string) : void
    + JourneyJourneyResults(from:string, to:string, via:string, nationalSearch:bool?, date:string, time:string, timeIs:string, journeyPreference:string, mode:List<string>, accessibilityPreference:List<string>, fromName:string, toName:string, viaName:string, maxTransferMinutes:string, maxWalkingMinutes:string, walkingSpeed:string, cyclePreference:string, adjustment:string, bikeProficiency:List<string>, alternativeCycle:bool?, alternativeWalking:bool?, applyHtmlMarkup:bool?, useMultiModalCall:bool?, walkingOptimization:bool?, taxiOnlyTrip:bool?, routeBetweenEntrances:bool?, useRealTimeLiveArrivals:bool?, calcOneDirection:bool?, includeAlternativeRoutes:bool?, overrideMultiModalScenario:int?) : TflApiPresentationEntitiesJourneyPlannerItineraryResult
    + JourneyJourneyResultsWithHttpInfo(from:string, to:string, via:string, nationalSearch:bool?, date:string, time:string, timeIs:string, journeyPreference:string, mode:List<string>, accessibilityPreference:List<string>, fromName:string, toName:string, viaName:string, maxTransferMinutes:string, maxWalkingMinutes:string, walkingSpeed:string, cyclePreference:string, adjustment:string, bikeProficiency:List<string>, alternativeCycle:bool?, alternativeWalking:bool?, applyHtmlMarkup:bool?, useMultiModalCall:bool?, walkingOptimization:bool?, taxiOnlyTrip:bool?, routeBetweenEntrances:bool?, useRealTimeLiveArrivals:bool?, calcOneDirection:bool?, includeAlternativeRoutes:bool?, overrideMultiModalScenario:int?) : ApiResponse< TflApiPresentationEntitiesJourneyPlannerItineraryResult >
    + <<async>> JourneyJourneyResultsAsync(from:string, to:string, via:string, nationalSearch:bool?, date:string, time:string, timeIs:string, journeyPreference:string, mode:List<string>, accessibilityPreference:List<string>, fromName:string, toName:string, viaName:string, maxTransferMinutes:string, maxWalkingMinutes:string, walkingSpeed:string, cyclePreference:string, adjustment:string, bikeProficiency:List<string>, alternativeCycle:bool?, alternativeWalking:bool?, applyHtmlMarkup:bool?, useMultiModalCall:bool?, walkingOptimization:bool?, taxiOnlyTrip:bool?, routeBetweenEntrances:bool?, useRealTimeLiveArrivals:bool?, calcOneDirection:bool?, includeAlternativeRoutes:bool?, overrideMultiModalScenario:int?) : System.Threading.Tasks.Task<TflApiPresentationEntitiesJourneyPlannerItineraryResult>
    + <<async>> JourneyJourneyResultsAsyncWithHttpInfo(from:string, to:string, via:string, nationalSearch:bool?, date:string, time:string, timeIs:string, journeyPreference:string, mode:List<string>, accessibilityPreference:List<string>, fromName:string, toName:string, viaName:string, maxTransferMinutes:string, maxWalkingMinutes:string, walkingSpeed:string, cyclePreference:string, adjustment:string, bikeProficiency:List<string>, alternativeCycle:bool?, alternativeWalking:bool?, applyHtmlMarkup:bool?, useMultiModalCall:bool?, walkingOptimization:bool?, taxiOnlyTrip:bool?, routeBetweenEntrances:bool?, useRealTimeLiveArrivals:bool?, calcOneDirection:bool?, includeAlternativeRoutes:bool?, overrideMultiModalScenario:int?) : System.Threading.Tasks.Task<ApiResponse<TflApiPresentationEntitiesJourneyPlannerItineraryResult>>
    + JourneyMeta() : List<TflApiPresentationEntitiesMode>
    + JourneyMetaWithHttpInfo() : ApiResponse< List<TflApiPresentationEntitiesMode> >
    + <<async>> JourneyMetaAsync() : System.Threading.Tasks.Task<List<TflApiPresentationEntitiesMode>>
    + <<async>> JourneyMetaAsyncWithHttpInfo() : System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesMode>>>
}
IApiAccessor <|-- IJourneyApi
IJourneyApi <|-- JourneyApi
@enduml
