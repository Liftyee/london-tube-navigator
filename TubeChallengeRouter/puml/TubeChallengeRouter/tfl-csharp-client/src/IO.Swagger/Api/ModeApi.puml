@startuml
interface IModeApi {
}
class ModeApi <<partial>> {
    + ModeApi(basePath:String)
    + ModeApi(configuration:IO.Swagger.Client.Configuration)
    + GetBasePath() : String
    + SetBasePath(basePath:String) : void
    + DefaultHeader() : IDictionary<String, String>
    + AddDefaultHeader(key:string, value:string) : void
    + ModeArrivals(mode:string, count:int?) : List<TflApiPresentationEntitiesPrediction>
    + ModeArrivalsWithHttpInfo(mode:string, count:int?) : ApiResponse< List<TflApiPresentationEntitiesPrediction> >
    + <<async>> ModeArrivalsAsync(mode:string, count:int?) : System.Threading.Tasks.Task<List<TflApiPresentationEntitiesPrediction>>
    + <<async>> ModeArrivalsAsyncWithHttpInfo(mode:string, count:int?) : System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesPrediction>>>
    + ModeGetActiveServiceTypes() : List<TflApiPresentationEntitiesActiveServiceType>
    + ModeGetActiveServiceTypesWithHttpInfo() : ApiResponse< List<TflApiPresentationEntitiesActiveServiceType> >
    + <<async>> ModeGetActiveServiceTypesAsync() : System.Threading.Tasks.Task<List<TflApiPresentationEntitiesActiveServiceType>>
    + <<async>> ModeGetActiveServiceTypesAsyncWithHttpInfo() : System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesActiveServiceType>>>
}
IApiAccessor <|-- IModeApi
IModeApi <|-- ModeApi
@enduml
