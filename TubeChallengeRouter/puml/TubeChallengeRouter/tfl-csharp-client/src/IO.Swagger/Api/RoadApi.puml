@startuml
interface IRoadApi {
}
class RoadApi <<partial>> {
    + RoadApi(basePath:String)
    + RoadApi(configuration:IO.Swagger.Client.Configuration)
    + GetBasePath() : String
    + SetBasePath(basePath:String) : void
    + DefaultHeader() : IDictionary<String, String>
    + AddDefaultHeader(key:string, value:string) : void
    + RoadDisruptedStreets(startDate:DateTime?, endDate:DateTime?) : SystemObject
    + RoadDisruptedStreetsWithHttpInfo(startDate:DateTime?, endDate:DateTime?) : ApiResponse< SystemObject >
    + <<async>> RoadDisruptedStreetsAsync(startDate:DateTime?, endDate:DateTime?) : System.Threading.Tasks.Task<SystemObject>
    + <<async>> RoadDisruptedStreetsAsyncWithHttpInfo(startDate:DateTime?, endDate:DateTime?) : System.Threading.Tasks.Task<ApiResponse<SystemObject>>
    + RoadDisruption(ids:List<string>, stripContent:bool?, severities:List<string>, categories:List<string>, closures:bool?) : List<TflApiPresentationEntitiesRoadDisruption>
    + RoadDisruptionWithHttpInfo(ids:List<string>, stripContent:bool?, severities:List<string>, categories:List<string>, closures:bool?) : ApiResponse< List<TflApiPresentationEntitiesRoadDisruption> >
    + <<async>> RoadDisruptionAsync(ids:List<string>, stripContent:bool?, severities:List<string>, categories:List<string>, closures:bool?) : System.Threading.Tasks.Task<List<TflApiPresentationEntitiesRoadDisruption>>
    + <<async>> RoadDisruptionAsyncWithHttpInfo(ids:List<string>, stripContent:bool?, severities:List<string>, categories:List<string>, closures:bool?) : System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesRoadDisruption>>>
    + RoadDisruptionById(disruptionIds:List<string>, stripContent:bool?) : TflApiPresentationEntitiesRoadDisruption
    + RoadDisruptionByIdWithHttpInfo(disruptionIds:List<string>, stripContent:bool?) : ApiResponse< TflApiPresentationEntitiesRoadDisruption >
    + <<async>> RoadDisruptionByIdAsync(disruptionIds:List<string>, stripContent:bool?) : System.Threading.Tasks.Task<TflApiPresentationEntitiesRoadDisruption>
    + <<async>> RoadDisruptionByIdAsyncWithHttpInfo(disruptionIds:List<string>, stripContent:bool?) : System.Threading.Tasks.Task<ApiResponse<TflApiPresentationEntitiesRoadDisruption>>
    + RoadGet() : List<TflApiPresentationEntitiesRoadCorridor>
    + RoadGetWithHttpInfo() : ApiResponse< List<TflApiPresentationEntitiesRoadCorridor> >
    + <<async>> RoadGetAsync() : System.Threading.Tasks.Task<List<TflApiPresentationEntitiesRoadCorridor>>
    + <<async>> RoadGetAsyncWithHttpInfo() : System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesRoadCorridor>>>
    + RoadGet_0(ids:List<string>) : List<TflApiPresentationEntitiesRoadCorridor>
    + RoadGet_0WithHttpInfo(ids:List<string>) : ApiResponse< List<TflApiPresentationEntitiesRoadCorridor> >
    + <<async>> RoadGet_0Async(ids:List<string>) : System.Threading.Tasks.Task<List<TflApiPresentationEntitiesRoadCorridor>>
    + <<async>> RoadGet_0AsyncWithHttpInfo(ids:List<string>) : System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesRoadCorridor>>>
    + RoadMetaCategories() : List<string>
    + RoadMetaCategoriesWithHttpInfo() : ApiResponse< List<string> >
    + <<async>> RoadMetaCategoriesAsync() : System.Threading.Tasks.Task<List<string>>
    + <<async>> RoadMetaCategoriesAsyncWithHttpInfo() : System.Threading.Tasks.Task<ApiResponse<List<string>>>
    + RoadMetaSeverities() : List<TflApiPresentationEntitiesStatusSeverity>
    + RoadMetaSeveritiesWithHttpInfo() : ApiResponse< List<TflApiPresentationEntitiesStatusSeverity> >
    + <<async>> RoadMetaSeveritiesAsync() : System.Threading.Tasks.Task<List<TflApiPresentationEntitiesStatusSeverity>>
    + <<async>> RoadMetaSeveritiesAsyncWithHttpInfo() : System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesStatusSeverity>>>
    + RoadStatus(ids:List<string>, dateRangeNullableStartDate:DateTime?, dateRangeNullableEndDate:DateTime?) : List<TflApiPresentationEntitiesRoadCorridor>
    + RoadStatusWithHttpInfo(ids:List<string>, dateRangeNullableStartDate:DateTime?, dateRangeNullableEndDate:DateTime?) : ApiResponse< List<TflApiPresentationEntitiesRoadCorridor> >
    + <<async>> RoadStatusAsync(ids:List<string>, dateRangeNullableStartDate:DateTime?, dateRangeNullableEndDate:DateTime?) : System.Threading.Tasks.Task<List<TflApiPresentationEntitiesRoadCorridor>>
    + <<async>> RoadStatusAsyncWithHttpInfo(ids:List<string>, dateRangeNullableStartDate:DateTime?, dateRangeNullableEndDate:DateTime?) : System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesRoadCorridor>>>
}
IApiAccessor <|-- IRoadApi
IRoadApi <|-- RoadApi
@enduml
