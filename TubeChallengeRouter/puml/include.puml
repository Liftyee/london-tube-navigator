@startuml
enum Priority {
    Smallest,
    Largest,
}
class "PriorityQueue`1"<T> <<sealed>> {
    - _nodeCount : int
    + Count : int <<get>>
    + PriorityQueue(size:int, prio:Priority)
    + Insert(item:T) : void
    + Pop() : T
    - push_up(currentPosition:int) : void
    - push_down(currentPosition:int) : void
    - OutOfOrder(node1:T, node2:T) : bool
    - SwapIndices(pos1:int, pos2:int) : void
    + Top() : T
}
class "IComparable`1"<T> {
}
"PriorityQueue`1" --> "_priority" Priority
class SolverTests {
    + Setup() : void
    + Test1() : void
}
class TflModelWrapper {
    - _cachePath : string
    - <<const>> MaxCacheAge : int = 30
    - <<const>> PercentOfTotal : int = 90
    - <<const>> InitialPercent : double = 3.0
    + TflModelWrapper(logger:ILogger, cachePath:string)
    <<internal>> GetSequenceById(segments:List<TflApiPresentationEntitiesStopPointSequence>, id:int) : TflApiPresentationEntitiesStopPointSequence
    <<internal>> GetFirstStop(segment:TflApiPresentationEntitiesStopPointSequence) : TflApiPresentationEntitiesMatchedStop
    <<internal>> GetLastStop(segment:TflApiPresentationEntitiesStopPointSequence) : TflApiPresentationEntitiesMatchedStop
    + AddLinksForLineSequence(segments:List<TflApiPresentationEntitiesStopPointSequence>, network:Network, currentLine:Line, direction:Dir) : void
    + PopulateNetworkStructure(network:Network) : void
    + SetProgressCallback(callback:Action<double>) : void
    - PopulateNetworkStructureFromCache(network:Network) : void
    - UpdateStructureCache() : void
    - UpdateTimingsLib() : void
    - PopulateNetworkTimesTimingsLib(network:Network) : void
    - PopulateNetworkTimes(network:Network) : void
    - UpdateTimetableCache() : void
}
class "Action`1"<T> {
}
INetworkDataSource <|-- TflModelWrapper
TflModelWrapper --> "_stationFetcher" StopPointApi
TflModelWrapper --> "_lineApi" LineApi
TflModelWrapper --> "_logger" ILogger
TflModelWrapper o-> "_progressCallback<double>" "Action`1"
class LinearNetwork {
    - <<readonly>> _numNodes : int
    + LinearNetwork(nNodes:int)
    + PopulateNetworkStructure(network:Network) : void
    + SetProgressCallback(callback:Action<double>) : void
}
class TestNetwork1 {
    + PopulateNetworkStructure(network:Network) : void
    + SetProgressCallback(callback:Action<double>) : void
}
class InvalidBranchIdException {
    + InvalidBranchIdException(message:string)
}
INetworkDataSource <|-- LinearNetwork
INetworkDataSource <|-- TestNetwork1
Exception <|-- InvalidBranchIdException
class App <<partial>> {
    + <<override>> Initialize() : void
    + <<override>> OnFrameworkInitializationCompleted() : void
}
Application <|-- App
class Program <<sealed>> {
    + {static} Main(args:string[]) : void
    + {static} BuildAvaloniaApp() : AppBuilder
}
class ViewLocator {
    + Build(data:object?) : Control?
    + Match(data:object?) : bool
}
IDataTemplate <|-- ViewLocator
interface ITimetable {
}
class Route {
    - _cost : int
    + Count : int <<get>>
    + Cost : int <<get>>
    + Route(stations:List<string>, duration:TimeSpan, cost:int, intermediateStations:List<List<string>>?)
    + Route(stations:List<string>)
    + <<override>> ToString() : string
    + GetTargetPath() : List<string>
    <<internal>> GetIntermediateStations(segmentIndex:int) : List<string>
    <<internal>> GetIntermediateStations() : List<List<string>>
    + UpdateDuration(newDuration:TimeSpan) : void
    + UpdateCost(newCost:int) : void
    + UpdateIntermediateStations(segmentIndex:int, updateTo:List<string>) : void
    + Copy() : Route
    + InterStationCount() : int
}
class "List`1"<T> {
}
Route --> "TargetStations<string>" "List`1"
Route --> "IntermediateStations<List<string>>" "List`1"
Route --> "_duration" TimeSpan
Route --> "Duration" TimeSpan
class Station {
    + <<readonly>> Name : string?
    + <<readonly>> NaptanId : string
    + Station(naptan:string)
    + Station(naptan:string, name:string)
    + AddLink(newLink:Link) : void
    + GetLinks() : List<Link>
    + CostTo(destId:string) : int
    + HasLink(destId:string) : bool
    <<internal>> GetLinkByDestId(id:string) : Link
    + ModifyLink(lineId:string, destId:string, newTime:TimeSpan) : void
    + ModifyLink(destId:string, newTime:TimeSpan) : void
}
class "HashSet`1"<T> {
}
Station --> "_links<Link>" "HashSet`1"
interface INetworkDataSource {
    + PopulateNetworkStructure(network:Network) : void
    + SetProgressCallback(callback:Action<double>) : void
}
enum NetworkType {
    Simple,
    Floyd,
    Dijkstra,
}
class NetworkFactory {
    + NetworkFactory(dataSource:INetworkDataSource)
    + Generate(type:NetworkType, logger:ILogger) : Network
}
NetworkFactory --> "_dataSource" INetworkDataSource
class DijkstraCostNetwork {
    + DijkstraCostNetwork(logger:ILogger)
    <<internal>> <<override>> Initialise() : void
    + <<override>> CostFunction(startId:string, endId:string, path:List<string>) : int
    + <<override>> CostFunction(startId:string, endId:string) : int
    - DijkstraLookup(startId:string, endId:string, path:List<string>) : int
    + <<override>> Swap(route:Route, idxA:int, idxB:int) : void
    + <<override>> TakeAndInsert(route:Route, takeFrom:int, insertBefore:int) : void
    - UpdatePathReturnCost(route:Route, idxA:int) : int
}
struct DijkstraNode {
    + <<readonly>> StationId : string
    + <<readonly>> Cost : int
    + CompareTo(other:DijkstraNode) : int
    + DijkstraNode(stationId:string, cost:int)
}
class "Dictionary`2"<T1,T2> {
}
class "IComparable`1"<T> {
}
Network <|-- DijkstraCostNetwork
DijkstraCostNetwork --> "_costCache<string,Dictionary<string, int?>>" "Dictionary`2"
DijkstraCostNetwork --> "_pathCache<string,Dictionary<string, List<string>>>" "Dictionary`2"
DijkstraCostNetwork +-- DijkstraNode
"IComparable`1" "<DijkstraNode>" <|-- DijkstraNode
enum Dir {
    Inbound,
    Outbound,
    Bidirectional,
}
class Line {
    + <<readonly>> Name : string
    + <<readonly>> Id : string
    + Line(id:string, name:string)
}
struct Link {
    - _trainTimes : ITimetable?
    + Line : Line? <<get>>
    - _durationEdited : bool
    + Link(start:Station, end:Station, line:Line?, dir:Dir)
    <<internal>> SetDuration(duration:TimeSpan) : void
    <<internal>> SetLine(line:Line) : void
    + <<override>> Equals(other:Object) : bool
    + GetCost() : int
}
Link --> "Destination" Station
Link --> "Origin" Station
Link --> "Duration" TimeSpan
Link --> "Dir" Dir
abstract class Network {
    # NEdges : int
    # <<const>> InfCost : int = 1000000000
    + Network(logger:ILogger)
    <<internal>> <<virtual>> Initialise() : void
    - AddStationObject(stationToAdd:Station) : void
    + AddStationId(naptanId:string, name:string?) : void
    + WriteStationsToFile(file:FileStream) : void
    + LinkStationsPartial(startId:string, endId:string, direction:Dir, line:Line?) : void
    + UpdateLink(startId:string, endId:string, newTime:TimeSpan) : void
    + HasStationById(id:string) : bool
    + <<override>> ToString() : string
    + GetStationIDs() : List<string>
    + <<virtual>> CostFunction(startId:string, endId:string, path:List<string>) : int
    + <<virtual>> CostFunction(startId:string, endId:string) : int
    + <<virtual>> GenerateRandomRoute() : Route
    + <<virtual>> CostFunction(route:Route) : int
    + <<virtual>> TravelTime(route:Route) : TimeSpan
    + <<virtual>> TravelTime(startId:string, endId:string) : TimeSpan
    + RouteToStringStationSeq(route:Route) : string
    + RouteDetailsToStream(route:Route, outStream:Stream) : void
    # <<virtual>> RemoveStationFromTotals(route:Route, index:int) : void
    + <<virtual>> Swap(route:Route, idxA:int, idxB:int) : void
    + <<virtual>> TakeAndInsert(route:Route, takeFrom:int, insertBefore:int) : void
    + RecalculateRouteCosts(route:Route) : void
    + RecalculateRouteData(route:Route) : void
}
class "Dictionary`2"<T1,T2> {
}
Network --> "Stations<string,Station>" "Dictionary`2"
Network --> "Lines<int,Line>" "Dictionary`2"
Network --> "Logger" ILogger
class FloydCostNetwork {
    + FloydCostNetwork(logger:ILogger)
    <<internal>> <<override>> Initialise() : void
    + <<override>> CostFunction(startId:string, endId:string) : int
    - PreprocessFloyd() : void
    + EnumerateCostMatrix() : string
}
class "Dictionary`2"<T1,T2> {
}
Network <|-- FloydCostNetwork
FloydCostNetwork --> "_costMatrix<string,Dictionary<string, int>>" "Dictionary`2"
class StrictAnnealingSolver {
    + StrictAnnealingSolver(logger:ILogger)
    + StrictAnnealingSolver(logger:ILogger, progressCallback:Action<double>)
    + <<override>> Solve(net:Network) : Route
}
AnnealingSolver <|-- StrictAnnealingSolver
ISolver <|-- StrictAnnealingSolver
interface ISolver {
    + Solve(network:Network) : Route
    + SetRandomSwapProbability(prob:double) : void
    + GetRandomSwapProbability() : double
    + SetMaxIterations(max:int) : void
    + GetMaxIterations() : int
    + SetCoolDownFactor(factor:double) : void
    + GetCoolDownFactor() : double
}
class AnnealingSolver {
    - _randomSwapProbability : double
    # MaxIterations : int
    # CoolDownFactor : double
    + AnnealingSolver(logger:ILogger)
    + AnnealingSolver(logger:ILogger, progressCallback:Action<double>)
    # PickRandomOperation(generator:Random) : AnnealOpType
    + <<virtual>> Solve(net:Network) : Route
    - {static} RevertOperation(net:Network, operation:AnnealOpType, route:Route, stationA:int, stationB:int) : Route
    + SetRandomSwapProbability(probability:double) : void
    + GetRandomSwapProbability() : double
    + SetMaxIterations(max:int) : void
    + GetMaxIterations() : int
    + SetCoolDownFactor(factor:double) : void
    + GetCoolDownFactor() : double
}
class "Action`1"<T> {
}
enum AnnealOpType {
    SwapRandom,
    SwapIntermediate,
    Transpose,
}
class NegativeCostException {
    + NegativeCostException(cost:int)
}
class CostMismatchException {
    + CostMismatchException(calculatedCost:int, routeCost:int)
}
ISolver <|-- AnnealingSolver
AnnealingSolver --> "Logger" ILogger
AnnealingSolver o-> "ProgressCallback<double>" "Action`1"
AnnealingSolver +-- AnnealOpType
AnnealingSolver +-- NegativeCostException
ApplicationException <|-- NegativeCostException
AnnealingSolver +-- CostMismatchException
ApplicationException <|-- CostMismatchException
class MainWindow <<partial>> {
    + MainWindow()
}
Window <|-- MainWindow
class SolverControlViewModel {
    - _startStationName : string?
    - _solveProgress : double
    - _swapProb : double
    - _tempFactor : double
    - _maxIterations : int
    - _tube : Network?
    + SolveProgress : double <<get>> <<set>>
    + StartStation : string? <<get>> <<set>>
    + SwapProb : double <<get>> <<set>>
    + TempFactor : double <<get>> <<set>>
    + MaxIterations : int <<get>> <<set>>
    + SolverControlViewModel()
    - InitializeNetwork() : void
    - RunSolve() : void
    - <<async>> TestOutputs() : Task
    - <<async>> SolveRouteAsync() : Task
    - ShowSolverResult(result:Route) : void
    - SetProgress(progress:double) : void
    - {static} GetCachePath() : string
    - WriteRouteToFile(tube:Network, route:Route) : void
}
class "ObservableCollection`1"<T> {
}
class UiOutputSink {
    - _outputLog : ObservableCollection<string>?
    + Emit(logEvent:LogEvent) : void
    + AddOutput(output:ObservableCollection<string>) : void
}
ReactiveObject <|-- SolverControlViewModel
SolverControlViewModel --> "_solver" ISolver
SolverControlViewModel --> "_source" INetworkDataSource
SolverControlViewModel --> "_tubeFactory" NetworkFactory
SolverControlViewModel --> "SolveCommand" ICommand
SolverControlViewModel o-> "OutputLog<string>" "ObservableCollection`1"
SolverControlViewModel o-> "UiLogger" UiOutputSink
SolverControlViewModel o-> "Logger" ILogger
SolverControlViewModel +-- UiOutputSink
ILogEventSink <|-- UiOutputSink
class SvgMapViewModel {
    - _stationName : string?
    - _showSvg : bool
    - AddToConvo(content:string) : void
    + SvgMapViewModel()
    + StationName : string? <<get>> <<set>>
    + ShowSvg : bool <<get>> <<set>>
    + UpdateSvg() : void
    - OpenThePodBayDoors() : void
    + CanvasControl_OnDraw(sender:object?, e:SKCanvasEventArgs) : void
    - HideGroup(canvas:SKCanvas, groupId:string) : void
    - HideSvg() : void
}
class "ObservableCollection`1"<T> {
}
ReactiveObject <|-- SvgMapViewModel
SvgMapViewModel --> "TestCommand" ICommand
SvgMapViewModel o-> "ConversationLog<string>" "ObservableCollection`1"
SvgMapViewModel --> "_svgMap" SKSvg
SvgMapViewModel --> "SvgMap" SKSvg
class ViewModelBase {
}
class ReactiveViewModel {
    + ReactiveViewModel()
    - _name : string?
    + Name : string? <<get>> <<set>>
    + Greeting : string <<get>>
}
ReactiveObject <|-- ViewModelBase
ReactiveObject <|-- ReactiveViewModel
@enduml
