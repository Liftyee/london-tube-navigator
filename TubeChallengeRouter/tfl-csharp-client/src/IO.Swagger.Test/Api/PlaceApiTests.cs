/* 
 * Transport for London Unified API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing PlaceApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class PlaceApiTests
    {
        private PlaceApi _instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            _instance = new PlaceApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of PlaceApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' PlaceApi
            //Assert.IsInstanceOfType(typeof(PlaceApi), instance, "instance is a PlaceApi");
        }

        
        /// <summary>
        /// Test PlaceGet
        /// </summary>
        [Test]
        public void PlaceGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //bool? includeChildren = null;
            //var response = instance.PlaceGet(id, includeChildren);
            //Assert.IsInstanceOf<List<TflApiPresentationEntitiesPlace>> (response, "response is List<TflApiPresentationEntitiesPlace>");
        }
        
        /// <summary>
        /// Test PlaceGetAt
        /// </summary>
        [Test]
        public void PlaceGetAtTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> type = null;
            //string lat = null;
            //string lon = null;
            //double? locationLat = null;
            //double? locationLon = null;
            //var response = instance.PlaceGetAt(type, lat, lon, locationLat, locationLon);
            //Assert.IsInstanceOf<SystemObject> (response, "response is SystemObject");
        }
        
        /// <summary>
        /// Test PlaceGetByGeo
        /// </summary>
        [Test]
        public void PlaceGetByGeoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //double? radius = null;
            //List<string> categories = null;
            //bool? includeChildren = null;
            //List<string> type = null;
            //bool? activeOnly = null;
            //int? numberOfPlacesToReturn = null;
            //double? placeGeoSwLat = null;
            //double? placeGeoSwLon = null;
            //double? placeGeoNeLat = null;
            //double? placeGeoNeLon = null;
            //double? placeGeoLat = null;
            //double? placeGeoLon = null;
            //var response = instance.PlaceGetByGeo(radius, categories, includeChildren, type, activeOnly, numberOfPlacesToReturn, placeGeoSwLat, placeGeoSwLon, placeGeoNeLat, placeGeoNeLon, placeGeoLat, placeGeoLon);
            //Assert.IsInstanceOf<List<TflApiPresentationEntitiesStopPoint>> (response, "response is List<TflApiPresentationEntitiesStopPoint>");
        }
        
        /// <summary>
        /// Test PlaceGetByType
        /// </summary>
        [Test]
        public void PlaceGetByTypeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> types = null;
            //bool? activeOnly = null;
            //var response = instance.PlaceGetByType(types, activeOnly);
            //Assert.IsInstanceOf<List<TflApiPresentationEntitiesPlace>> (response, "response is List<TflApiPresentationEntitiesPlace>");
        }
        
        /// <summary>
        /// Test PlaceGetOverlay
        /// </summary>
        [Test]
        public void PlaceGetOverlayTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? z = null;
            //List<string> type = null;
            //int? width = null;
            //int? height = null;
            //string lat = null;
            //string lon = null;
            //double? locationLat = null;
            //double? locationLon = null;
            //var response = instance.PlaceGetOverlay(z, type, width, height, lat, lon, locationLat, locationLon);
            //Assert.IsInstanceOf<SystemObject> (response, "response is SystemObject");
        }
        
        /// <summary>
        /// Test PlaceGetStreetsByPostCode
        /// </summary>
        [Test]
        public void PlaceGetStreetsByPostCodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string postcode = null;
            //string postcodeInputPostcode = null;
            //var response = instance.PlaceGetStreetsByPostCode(postcode, postcodeInputPostcode);
            //Assert.IsInstanceOf<SystemObject> (response, "response is SystemObject");
        }
        
        /// <summary>
        /// Test PlaceMetaCategories
        /// </summary>
        [Test]
        public void PlaceMetaCategoriesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.PlaceMetaCategories();
            //Assert.IsInstanceOf<List<TflApiPresentationEntitiesPlaceCategory>> (response, "response is List<TflApiPresentationEntitiesPlaceCategory>");
        }
        
        /// <summary>
        /// Test PlaceMetaPlaceTypes
        /// </summary>
        [Test]
        public void PlaceMetaPlaceTypesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.PlaceMetaPlaceTypes();
            //Assert.IsInstanceOf<List<TflApiPresentationEntitiesPlaceCategory>> (response, "response is List<TflApiPresentationEntitiesPlaceCategory>");
        }
        
        /// <summary>
        /// Test PlaceSearch
        /// </summary>
        [Test]
        public void PlaceSearchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //List<string> types = null;
            //var response = instance.PlaceSearch(name, types);
            //Assert.IsInstanceOf<List<TflApiPresentationEntitiesPlace>> (response, "response is List<TflApiPresentationEntitiesPlace>");
        }
        
    }

}
