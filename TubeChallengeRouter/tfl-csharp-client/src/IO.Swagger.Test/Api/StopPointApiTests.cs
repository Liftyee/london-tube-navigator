/* 
 * Transport for London Unified API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing StopPointApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class StopPointApiTests
    {
        private StopPointApi _instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            _instance = new StopPointApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of StopPointApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' StopPointApi
            //Assert.IsInstanceOfType(typeof(StopPointApi), instance, "instance is a StopPointApi");
        }

        
        /// <summary>
        /// Test StopPointArrivalDepartures
        /// </summary>
        [Test]
        public void StopPointArrivalDeparturesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<string> lineIds = null;
            //var response = instance.StopPointArrivalDepartures(id, lineIds);
            //Assert.IsInstanceOf<List<TflApiPresentationEntitiesArrivalDeparture>> (response, "response is List<TflApiPresentationEntitiesArrivalDeparture>");
        }
        
        /// <summary>
        /// Test StopPointArrivals
        /// </summary>
        [Test]
        public void StopPointArrivalsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.StopPointArrivals(id);
            //Assert.IsInstanceOf<List<TflApiPresentationEntitiesPrediction>> (response, "response is List<TflApiPresentationEntitiesPrediction>");
        }
        
        /// <summary>
        /// Test StopPointCrowding
        /// </summary>
        [Test]
        public void StopPointCrowdingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string line = null;
            //string direction = null;
            //var response = instance.StopPointCrowding(id, line, direction);
            //Assert.IsInstanceOf<List<TflApiPresentationEntitiesStopPoint>> (response, "response is List<TflApiPresentationEntitiesStopPoint>");
        }
        
        /// <summary>
        /// Test StopPointDirection
        /// </summary>
        [Test]
        public void StopPointDirectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string toStopPointId = null;
            //string lineId = null;
            //var response = instance.StopPointDirection(id, toStopPointId, lineId);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test StopPointDisruption
        /// </summary>
        [Test]
        public void StopPointDisruptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> ids = null;
            //bool? getFamily = null;
            //bool? includeRouteBlockedStops = null;
            //bool? flattenResponse = null;
            //var response = instance.StopPointDisruption(ids, getFamily, includeRouteBlockedStops, flattenResponse);
            //Assert.IsInstanceOf<List<TflApiPresentationEntitiesDisruptedPoint>> (response, "response is List<TflApiPresentationEntitiesDisruptedPoint>");
        }
        
        /// <summary>
        /// Test StopPointDisruptionByMode
        /// </summary>
        [Test]
        public void StopPointDisruptionByModeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> modes = null;
            //bool? includeRouteBlockedStops = null;
            //var response = instance.StopPointDisruptionByMode(modes, includeRouteBlockedStops);
            //Assert.IsInstanceOf<List<TflApiPresentationEntitiesDisruptedPoint>> (response, "response is List<TflApiPresentationEntitiesDisruptedPoint>");
        }
        
        /// <summary>
        /// Test StopPointGet
        /// </summary>
        [Test]
        public void StopPointGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<string> placeTypes = null;
            //var response = instance.StopPointGet(id, placeTypes);
            //Assert.IsInstanceOf<List<TflApiPresentationEntitiesPlace>> (response, "response is List<TflApiPresentationEntitiesPlace>");
        }
        
        /// <summary>
        /// Test StopPointGetByGeoPoint
        /// </summary>
        [Test]
        public void StopPointGetByGeoPointTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> stopTypes = null;
            //double? locationLat = null;
            //double? locationLon = null;
            //int? radius = null;
            //bool? useStopPointHierarchy = null;
            //List<string> modes = null;
            //List<string> categories = null;
            //bool? returnLines = null;
            //var response = instance.StopPointGetByGeoPoint(stopTypes, locationLat, locationLon, radius, useStopPointHierarchy, modes, categories, returnLines);
            //Assert.IsInstanceOf<TflApiPresentationEntitiesStopPointsResponse> (response, "response is TflApiPresentationEntitiesStopPointsResponse");
        }
        
        /// <summary>
        /// Test StopPointGetByMode
        /// </summary>
        [Test]
        public void StopPointGetByModeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> modes = null;
            //int? page = null;
            //var response = instance.StopPointGetByMode(modes, page);
            //Assert.IsInstanceOf<TflApiPresentationEntitiesStopPointsResponse> (response, "response is TflApiPresentationEntitiesStopPointsResponse");
        }
        
        /// <summary>
        /// Test StopPointGetBySms
        /// </summary>
        [Test]
        public void StopPointGetBySmsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string output = null;
            //var response = instance.StopPointGetBySms(id, output);
            //Assert.IsInstanceOf<SystemObject> (response, "response is SystemObject");
        }
        
        /// <summary>
        /// Test StopPointGetByType
        /// </summary>
        [Test]
        public void StopPointGetByTypeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> types = null;
            //var response = instance.StopPointGetByType(types);
            //Assert.IsInstanceOf<List<TflApiPresentationEntitiesStopPoint>> (response, "response is List<TflApiPresentationEntitiesStopPoint>");
        }
        
        /// <summary>
        /// Test StopPointGetByTypeWithPagination
        /// </summary>
        [Test]
        public void StopPointGetByTypeWithPaginationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> types = null;
            //int? page = null;
            //var response = instance.StopPointGetByTypeWithPagination(types, page);
            //Assert.IsInstanceOf<List<TflApiPresentationEntitiesStopPoint>> (response, "response is List<TflApiPresentationEntitiesStopPoint>");
        }
        
        /// <summary>
        /// Test StopPointGetCarParksById
        /// </summary>
        [Test]
        public void StopPointGetCarParksByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string stopPointId = null;
            //var response = instance.StopPointGetCarParksById(stopPointId);
            //Assert.IsInstanceOf<List<TflApiPresentationEntitiesPlace>> (response, "response is List<TflApiPresentationEntitiesPlace>");
        }
        
        /// <summary>
        /// Test StopPointGetId
        /// </summary>
        [Test]
        public void StopPointGetIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> ids = null;
            //bool? includeCrowdingData = null;
            //var response = instance.StopPointGetId(ids, includeCrowdingData);
            //Assert.IsInstanceOf<List<TflApiPresentationEntitiesStopPoint>> (response, "response is List<TflApiPresentationEntitiesStopPoint>");
        }
        
        /// <summary>
        /// Test StopPointGetServiceTypes
        /// </summary>
        [Test]
        public void StopPointGetServiceTypesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<string> lineIds = null;
            //List<string> modes = null;
            //var response = instance.StopPointGetServiceTypes(id, lineIds, modes);
            //Assert.IsInstanceOf<List<TflApiPresentationEntitiesLineServiceType>> (response, "response is List<TflApiPresentationEntitiesLineServiceType>");
        }
        
        /// <summary>
        /// Test StopPointGetTaxiRanksByIds
        /// </summary>
        [Test]
        public void StopPointGetTaxiRanksByIdsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string stopPointId = null;
            //var response = instance.StopPointGetTaxiRanksByIds(stopPointId);
            //Assert.IsInstanceOf<List<TflApiPresentationEntitiesPlace>> (response, "response is List<TflApiPresentationEntitiesPlace>");
        }
        
        /// <summary>
        /// Test StopPointMetaCategories
        /// </summary>
        [Test]
        public void StopPointMetaCategoriesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.StopPointMetaCategories();
            //Assert.IsInstanceOf<List<TflApiPresentationEntitiesStopPointCategory>> (response, "response is List<TflApiPresentationEntitiesStopPointCategory>");
        }
        
        /// <summary>
        /// Test StopPointMetaModes
        /// </summary>
        [Test]
        public void StopPointMetaModesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.StopPointMetaModes();
            //Assert.IsInstanceOf<List<TflApiPresentationEntitiesMode>> (response, "response is List<TflApiPresentationEntitiesMode>");
        }
        
        /// <summary>
        /// Test StopPointMetaStopTypes
        /// </summary>
        [Test]
        public void StopPointMetaStopTypesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.StopPointMetaStopTypes();
            //Assert.IsInstanceOf<List<string>> (response, "response is List<string>");
        }
        
        /// <summary>
        /// Test StopPointReachableFrom
        /// </summary>
        [Test]
        public void StopPointReachableFromTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string lineId = null;
            //List<string> serviceTypes = null;
            //var response = instance.StopPointReachableFrom(id, lineId, serviceTypes);
            //Assert.IsInstanceOf<List<TflApiPresentationEntitiesStopPoint>> (response, "response is List<TflApiPresentationEntitiesStopPoint>");
        }
        
        /// <summary>
        /// Test StopPointRoute
        /// </summary>
        [Test]
        public void StopPointRouteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<string> serviceTypes = null;
            //var response = instance.StopPointRoute(id, serviceTypes);
            //Assert.IsInstanceOf<List<TflApiPresentationEntitiesStopPointRouteSection>> (response, "response is List<TflApiPresentationEntitiesStopPointRouteSection>");
        }
        
        /// <summary>
        /// Test StopPointSearch
        /// </summary>
        [Test]
        public void StopPointSearchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string query = null;
            //List<string> modes = null;
            //bool? faresOnly = null;
            //int? maxResults = null;
            //List<string> lines = null;
            //bool? includeHubs = null;
            //bool? tflOperatedNationalRailStationsOnly = null;
            //var response = instance.StopPointSearch(query, modes, faresOnly, maxResults, lines, includeHubs, tflOperatedNationalRailStationsOnly);
            //Assert.IsInstanceOf<TflApiPresentationEntitiesSearchResponse> (response, "response is TflApiPresentationEntitiesSearchResponse");
        }
        
        /// <summary>
        /// Test StopPointSearch_0
        /// </summary>
        [Test]
        public void StopPointSearch_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string query = null;
            //List<string> modes = null;
            //bool? faresOnly = null;
            //int? maxResults = null;
            //List<string> lines = null;
            //bool? includeHubs = null;
            //bool? tflOperatedNationalRailStationsOnly = null;
            //var response = instance.StopPointSearch_0(query, modes, faresOnly, maxResults, lines, includeHubs, tflOperatedNationalRailStationsOnly);
            //Assert.IsInstanceOf<TflApiPresentationEntitiesSearchResponse> (response, "response is TflApiPresentationEntitiesSearchResponse");
        }
        
    }

}
