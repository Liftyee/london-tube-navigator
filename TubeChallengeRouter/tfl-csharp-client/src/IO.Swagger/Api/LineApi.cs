/* 
 * Transport for London Unified API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILineApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Gets lines that match the specified line ids.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.</param>
        /// <returns>List&lt;TflApiPresentationEntitiesLine&gt;</returns>
        List<TflApiPresentationEntitiesLine> LineGet (List<string> ids);

        /// <summary>
        /// Gets lines that match the specified line ids.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.</param>
        /// <returns>ApiResponse of List&lt;TflApiPresentationEntitiesLine&gt;</returns>
        ApiResponse<List<TflApiPresentationEntitiesLine>> LineGetWithHttpInfo (List<string> ids);
        /// <summary>
        /// Gets lines that serve the given modes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modes">A comma-separated list of modes e.g. tube,dlr</param>
        /// <returns>List&lt;TflApiPresentationEntitiesLine&gt;</returns>
        List<TflApiPresentationEntitiesLine> LineGetByMode (List<string> modes);

        /// <summary>
        /// Gets lines that serve the given modes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modes">A comma-separated list of modes e.g. tube,dlr</param>
        /// <returns>ApiResponse of List&lt;TflApiPresentationEntitiesLine&gt;</returns>
        ApiResponse<List<TflApiPresentationEntitiesLine>> LineGetByModeWithHttpInfo (List<string> modes);
        /// <summary>
        /// Gets all valid routes for given line id, including the sequence of stops on each route.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A single line id e.g. victoria</param>
        /// <param name="direction">The direction of travel. Can be inbound or outbound.</param>
        /// <param name="serviceTypes">A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)</param>
        /// <param name="excludeCrowding">That excludes crowding from line disruptions. Can be true or false. (optional)</param>
        /// <returns>TflApiPresentationEntitiesRouteSequence</returns>
        TflApiPresentationEntitiesRouteSequence LineRouteSequence (string id, string direction, List<string> serviceTypes = null, bool? excludeCrowding = null);

        /// <summary>
        /// Gets all valid routes for given line id, including the sequence of stops on each route.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A single line id e.g. victoria</param>
        /// <param name="direction">The direction of travel. Can be inbound or outbound.</param>
        /// <param name="serviceTypes">A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)</param>
        /// <param name="excludeCrowding">That excludes crowding from line disruptions. Can be true or false. (optional)</param>
        /// <returns>ApiResponse of TflApiPresentationEntitiesRouteSequence</returns>
        ApiResponse<TflApiPresentationEntitiesRouteSequence> LineRouteSequenceWithHttpInfo (string id, string direction, List<string> serviceTypes = null, bool? excludeCrowding = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Gets lines that match the specified line ids.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.</param>
        /// <returns>Task of List&lt;TflApiPresentationEntitiesLine&gt;</returns>
        System.Threading.Tasks.Task<List<TflApiPresentationEntitiesLine>> LineGetAsync (List<string> ids);

        /// <summary>
        /// Gets lines that match the specified line ids.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.</param>
        /// <returns>Task of ApiResponse (List&lt;TflApiPresentationEntitiesLine&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesLine>>> LineGetAsyncWithHttpInfo (List<string> ids);
        /// <summary>
        /// Gets lines that serve the given modes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modes">A comma-separated list of modes e.g. tube,dlr</param>
        /// <returns>Task of List&lt;TflApiPresentationEntitiesLine&gt;</returns>
        System.Threading.Tasks.Task<List<TflApiPresentationEntitiesLine>> LineGetByModeAsync (List<string> modes);

        /// <summary>
        /// Gets lines that serve the given modes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modes">A comma-separated list of modes e.g. tube,dlr</param>
        /// <returns>Task of ApiResponse (List&lt;TflApiPresentationEntitiesLine&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesLine>>> LineGetByModeAsyncWithHttpInfo (List<string> modes);

        /// <summary>
        /// Gets all valid routes for given line id, including the sequence of stops on each route.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A single line id e.g. victoria</param>
        /// <param name="direction">The direction of travel. Can be inbound or outbound.</param>
        /// <param name="serviceTypes">A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)</param>
        /// <param name="excludeCrowding">That excludes crowding from line disruptions. Can be true or false. (optional)</param>
        /// <returns>Task of TflApiPresentationEntitiesRouteSequence</returns>
        System.Threading.Tasks.Task<TflApiPresentationEntitiesRouteSequence> LineRouteSequenceAsync (string id, string direction, List<string> serviceTypes = null, bool? excludeCrowding = null);

        /// <summary>
        /// Gets all valid routes for given line id, including the sequence of stops on each route.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A single line id e.g. victoria</param>
        /// <param name="direction">The direction of travel. Can be inbound or outbound.</param>
        /// <param name="serviceTypes">A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)</param>
        /// <param name="excludeCrowding">That excludes crowding from line disruptions. Can be true or false. (optional)</param>
        /// <returns>Task of ApiResponse (TflApiPresentationEntitiesRouteSequence)</returns>
        System.Threading.Tasks.Task<ApiResponse<TflApiPresentationEntitiesRouteSequence>> LineRouteSequenceAsyncWithHttpInfo (string id, string direction, List<string> serviceTypes = null, bool? excludeCrowding = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LineApi : ILineApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory =
            (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LineApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LineApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration
                { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration
                .DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LineApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LineApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration
                .DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete(
            "SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null &&
                    _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException(
                        "Multicast delegate for ExceptionFactory is unsupported.");
                }

                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete(
            "DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration
                .DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete(
            "AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Gets lines that match the specified line ids. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.</param>
        /// <returns>List&lt;TflApiPresentationEntitiesLine&gt;</returns>
        public List<TflApiPresentationEntitiesLine> LineGet(List<string> ids)
        {
            ApiResponse<List<TflApiPresentationEntitiesLine>> localVarResponse =
                LineGetWithHttpInfo(ids);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets lines that match the specified line ids. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.</param>
        /// <returns>ApiResponse of List&lt;TflApiPresentationEntitiesLine&gt;</returns>
        public ApiResponse<List<TflApiPresentationEntitiesLine>>
            LineGetWithHttpInfo(List<string> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400,
                    "Missing required parameter 'ids' when calling LineApi->LineGet");

            var localVarPath = "/Line/{ids}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams =
                new Dictionary<String, String>(this.Configuration
                    .DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(
                    localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(
                    localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null)
                localVarPathParams.Add("ids",
                    this.Configuration.ApiClient
                        .ParameterToString(ids)); // path parameter


            // make the HTTP request
            RestResponse localVarResponse =
                (RestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                    Method.GET, localVarQueryParams, localVarPostBody,
                    localVarHeaderParams, localVarFormParams,
                    localVarFileParams,
                    localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception =
                    ExceptionFactory("LineGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TflApiPresentationEntitiesLine>>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name,
                    x => x.Value.ToString()),
                (List<TflApiPresentationEntitiesLine>)this.Configuration
                    .ApiClient.Deserialize(localVarResponse,
                        typeof(List<TflApiPresentationEntitiesLine>)));
        }

        /// <summary>
        /// Gets lines that match the specified line ids. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.</param>
        /// <returns>Task of List&lt;TflApiPresentationEntitiesLine&gt;</returns>
        public async
            System.Threading.Tasks.Task<List<TflApiPresentationEntitiesLine>>
            LineGetAsync(List<string> ids)
        {
            ApiResponse<List<TflApiPresentationEntitiesLine>> localVarResponse =
                await LineGetAsyncWithHttpInfo(ids);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Gets lines that match the specified line ids. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.</param>
        /// <returns>Task of ApiResponse (List&lt;TflApiPresentationEntitiesLine&gt;)</returns>
        public async
            System.Threading.Tasks.Task<
                ApiResponse<List<TflApiPresentationEntitiesLine>>>
            LineGetAsyncWithHttpInfo(List<string> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400,
                    "Missing required parameter 'ids' when calling LineApi->LineGet");

            var localVarPath = "/Line/{ids}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams =
                new Dictionary<String, String>(this.Configuration
                    .DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(
                    localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(
                    localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null)
                localVarPathParams.Add("ids",
                    this.Configuration.ApiClient
                        .ParameterToString(ids)); // path parameter


            // make the HTTP request
            RestResponse localVarResponse =
                (RestResponse)await this.Configuration.ApiClient.CallApiAsync(
                    localVarPath,
                    Method.GET, localVarQueryParams, localVarPostBody,
                    localVarHeaderParams, localVarFormParams,
                    localVarFileParams,
                    localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception =
                    ExceptionFactory("LineGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TflApiPresentationEntitiesLine>>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name,
                    x => x.Value.ToString()),
                (List<TflApiPresentationEntitiesLine>)this.Configuration
                    .ApiClient.Deserialize(localVarResponse,
                        typeof(List<TflApiPresentationEntitiesLine>)));
        }

        /// <summary>
        /// Gets lines that serve the given modes. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modes">A comma-separated list of modes e.g. tube,dlr</param>
        /// <returns>List&lt;TflApiPresentationEntitiesLine&gt;</returns>
        public List<TflApiPresentationEntitiesLine> LineGetByMode(
            List<string> modes)
        {
            ApiResponse<List<TflApiPresentationEntitiesLine>> localVarResponse =
                LineGetByModeWithHttpInfo(modes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets lines that serve the given modes. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modes">A comma-separated list of modes e.g. tube,dlr</param>
        /// <returns>ApiResponse of List&lt;TflApiPresentationEntitiesLine&gt;</returns>
        public ApiResponse<List<TflApiPresentationEntitiesLine>>
            LineGetByModeWithHttpInfo(List<string> modes)
        {
            // verify the required parameter 'modes' is set
            if (modes == null)
                throw new ApiException(400,
                    "Missing required parameter 'modes' when calling LineApi->LineGetByMode");

            var localVarPath = "/Line/Mode/{modes}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams =
                new Dictionary<String, String>(this.Configuration
                    .DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(
                    localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(
                    localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modes != null)
                localVarPathParams.Add("modes",
                    this.Configuration.ApiClient
                        .ParameterToString(modes)); // path parameter


            // make the HTTP request
            RestResponse localVarResponse =
                (RestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                    Method.GET, localVarQueryParams, localVarPostBody,
                    localVarHeaderParams, localVarFormParams,
                    localVarFileParams,
                    localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception =
                    ExceptionFactory("LineGetByMode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TflApiPresentationEntitiesLine>>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name,
                    x => x.Value.ToString()),
                (List<TflApiPresentationEntitiesLine>)this.Configuration
                    .ApiClient.Deserialize(localVarResponse,
                        typeof(List<TflApiPresentationEntitiesLine>)));
        }

        /// <summary>
        /// Gets lines that serve the given modes. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modes">A comma-separated list of modes e.g. tube,dlr</param>
        /// <returns>Task of List&lt;TflApiPresentationEntitiesLine&gt;</returns>
        public async
            System.Threading.Tasks.Task<List<TflApiPresentationEntitiesLine>>
            LineGetByModeAsync(List<string> modes)
        {
            ApiResponse<List<TflApiPresentationEntitiesLine>> localVarResponse =
                await LineGetByModeAsyncWithHttpInfo(modes);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Gets lines that serve the given modes. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modes">A comma-separated list of modes e.g. tube,dlr</param>
        /// <returns>Task of ApiResponse (List&lt;TflApiPresentationEntitiesLine&gt;)</returns>
        public async
            System.Threading.Tasks.Task<
                ApiResponse<List<TflApiPresentationEntitiesLine>>>
            LineGetByModeAsyncWithHttpInfo(List<string> modes)
        {
            // verify the required parameter 'modes' is set
            if (modes == null)
                throw new ApiException(400,
                    "Missing required parameter 'modes' when calling LineApi->LineGetByMode");

            var localVarPath = "/Line/Mode/{modes}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams =
                new Dictionary<String, String>(this.Configuration
                    .DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(
                    localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(
                    localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modes != null)
                localVarPathParams.Add("modes",
                    this.Configuration.ApiClient
                        .ParameterToString(modes)); // path parameter


            // make the HTTP request
            RestResponse localVarResponse =
                (RestResponse)await this.Configuration.ApiClient.CallApiAsync(
                    localVarPath,
                    Method.GET, localVarQueryParams, localVarPostBody,
                    localVarHeaderParams, localVarFormParams,
                    localVarFileParams,
                    localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception =
                    ExceptionFactory("LineGetByMode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TflApiPresentationEntitiesLine>>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name,
                    x => x.Value.ToString()),
                (List<TflApiPresentationEntitiesLine>)this.Configuration
                    .ApiClient.Deserialize(localVarResponse,
                        typeof(List<TflApiPresentationEntitiesLine>)));
        }

        /// <summary>
        /// Gets all valid routes for given line id, including the sequence of stops on each route. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A single line id e.g. victoria</param>
        /// <param name="direction">The direction of travel. Can be inbound or outbound.</param>
        /// <param name="serviceTypes">A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)</param>
        /// <param name="excludeCrowding">That excludes crowding from line disruptions. Can be true or false. (optional)</param>
        /// <returns>TflApiPresentationEntitiesRouteSequence</returns>
        public TflApiPresentationEntitiesRouteSequence LineRouteSequence(
            string id, string direction, List<string> serviceTypes = null,
            bool? excludeCrowding = null)
        {
            ApiResponse<TflApiPresentationEntitiesRouteSequence>
                localVarResponse = LineRouteSequenceWithHttpInfo(id, direction,
                    serviceTypes, excludeCrowding);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all valid routes for given line id, including the sequence of stops on each route. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A single line id e.g. victoria</param>
        /// <param name="direction">The direction of travel. Can be inbound or outbound.</param>
        /// <param name="serviceTypes">A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)</param>
        /// <param name="excludeCrowding">That excludes crowding from line disruptions. Can be true or false. (optional)</param>
        /// <returns>ApiResponse of TflApiPresentationEntitiesRouteSequence</returns>
        public ApiResponse<TflApiPresentationEntitiesRouteSequence>
            LineRouteSequenceWithHttpInfo(string id, string direction,
                List<string> serviceTypes = null, bool? excludeCrowding = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400,
                    "Missing required parameter 'id' when calling LineApi->LineRouteSequence");
            // verify the required parameter 'direction' is set
            if (direction == null)
                throw new ApiException(400,
                    "Missing required parameter 'direction' when calling LineApi->LineRouteSequence");

            var localVarPath = "/Line/{id}/Route/Sequence/{direction}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams =
                new Dictionary<String, String>(this.Configuration
                    .DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(
                    localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(
                    localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null)
                localVarPathParams.Add("id",
                    this.Configuration.ApiClient
                        .ParameterToString(id)); // path parameter
            if (direction != null)
                localVarPathParams.Add("direction",
                    this.Configuration.ApiClient
                        .ParameterToString(direction)); // path parameter
            if (serviceTypes != null)
                localVarQueryParams.AddRange(
                    this.Configuration.ApiClient.ParameterToKeyValuePairs(
                        "multi", "serviceTypes",
                        serviceTypes)); // query parameter
            if (excludeCrowding != null)
                localVarQueryParams.AddRange(
                    this.Configuration.ApiClient.ParameterToKeyValuePairs("",
                        "excludeCrowding", excludeCrowding)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse =
                (RestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                    Method.GET, localVarQueryParams, localVarPostBody,
                    localVarHeaderParams, localVarFormParams,
                    localVarFileParams,
                    localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception =
                    ExceptionFactory("LineRouteSequence", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TflApiPresentationEntitiesRouteSequence>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name,
                    x => x.Value.ToString()),
                (TflApiPresentationEntitiesRouteSequence)this.Configuration
                    .ApiClient.Deserialize(localVarResponse,
                        typeof(TflApiPresentationEntitiesRouteSequence)));
        }

        /// <summary>
        /// Gets all valid routes for given line id, including the sequence of stops on each route. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A single line id e.g. victoria</param>
        /// <param name="direction">The direction of travel. Can be inbound or outbound.</param>
        /// <param name="serviceTypes">A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)</param>
        /// <param name="excludeCrowding">That excludes crowding from line disruptions. Can be true or false. (optional)</param>
        /// <returns>Task of TflApiPresentationEntitiesRouteSequence</returns>
        public async
            System.Threading.Tasks.Task<TflApiPresentationEntitiesRouteSequence>
            LineRouteSequenceAsync(string id, string direction,
                List<string> serviceTypes = null, bool? excludeCrowding = null)
        {
            ApiResponse<TflApiPresentationEntitiesRouteSequence>
                localVarResponse = await LineRouteSequenceAsyncWithHttpInfo(id,
                    direction, serviceTypes, excludeCrowding);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Gets all valid routes for given line id, including the sequence of stops on each route. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A single line id e.g. victoria</param>
        /// <param name="direction">The direction of travel. Can be inbound or outbound.</param>
        /// <param name="serviceTypes">A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)</param>
        /// <param name="excludeCrowding">That excludes crowding from line disruptions. Can be true or false. (optional)</param>
        /// <returns>Task of ApiResponse (TflApiPresentationEntitiesRouteSequence)</returns>
        public async
            System.Threading.Tasks.Task<
                ApiResponse<TflApiPresentationEntitiesRouteSequence>>
            LineRouteSequenceAsyncWithHttpInfo(string id, string direction,
                List<string> serviceTypes = null, bool? excludeCrowding = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400,
                    "Missing required parameter 'id' when calling LineApi->LineRouteSequence");
            // verify the required parameter 'direction' is set
            if (direction == null)
                throw new ApiException(400,
                    "Missing required parameter 'direction' when calling LineApi->LineRouteSequence");

            var localVarPath = "/Line/{id}/Route/Sequence/{direction}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams =
                new Dictionary<String, String>(this.Configuration
                    .DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(
                    localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(
                    localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null)
                localVarPathParams.Add("id",
                    this.Configuration.ApiClient
                        .ParameterToString(id)); // path parameter
            if (direction != null)
                localVarPathParams.Add("direction",
                    this.Configuration.ApiClient
                        .ParameterToString(direction)); // path parameter
            if (serviceTypes != null)
                localVarQueryParams.AddRange(
                    this.Configuration.ApiClient.ParameterToKeyValuePairs(
                        "multi", "serviceTypes",
                        serviceTypes)); // query parameter
            if (excludeCrowding != null)
                localVarQueryParams.AddRange(
                    this.Configuration.ApiClient.ParameterToKeyValuePairs("",
                        "excludeCrowding", excludeCrowding)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse =
                (RestResponse)await this.Configuration.ApiClient.CallApiAsync(
                    localVarPath,
                    Method.GET, localVarQueryParams, localVarPostBody,
                    localVarHeaderParams, localVarFormParams,
                    localVarFileParams,
                    localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception =
                    ExceptionFactory("LineRouteSequence", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TflApiPresentationEntitiesRouteSequence>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name,
                    x => x.Value.ToString()),
                (TflApiPresentationEntitiesRouteSequence)this.Configuration
                    .ApiClient.Deserialize(localVarResponse,
                        typeof(TflApiPresentationEntitiesRouteSequence)));
        }

    }
}
