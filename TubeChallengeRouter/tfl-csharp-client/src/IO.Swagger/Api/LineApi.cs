/* 
 * Transport for London Unified API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILineApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get the list of arrival predictions for given line ids based at the given stop
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.</param>
        /// <param name="stopPointId">Optional. Id of stop to get arrival predictions for (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)</param>
        /// <param name="direction">Optional. The direction of travel. Can be inbound or outbound or all. If left blank, and destinationStopId is set, will default to all (optional)</param>
        /// <param name="destinationStationId">Optional. Id of destination stop (optional)</param>
        /// <returns>List&lt;TflApiPresentationEntitiesPrediction&gt;</returns>
        List<TflApiPresentationEntitiesPrediction> LineArrivals (List<string> ids, string stopPointId, string direction = null, string destinationStationId = null);

        /// <summary>
        /// Get the list of arrival predictions for given line ids based at the given stop
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.</param>
        /// <param name="stopPointId">Optional. Id of stop to get arrival predictions for (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)</param>
        /// <param name="direction">Optional. The direction of travel. Can be inbound or outbound or all. If left blank, and destinationStopId is set, will default to all (optional)</param>
        /// <param name="destinationStationId">Optional. Id of destination stop (optional)</param>
        /// <returns>ApiResponse of List&lt;TflApiPresentationEntitiesPrediction&gt;</returns>
        ApiResponse<List<TflApiPresentationEntitiesPrediction>> LineArrivalsWithHttpInfo (List<string> ids, string stopPointId, string direction = null, string destinationStationId = null);
        /// <summary>
        /// Get disruptions for the given line ids
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.</param>
        /// <returns>List&lt;TflApiPresentationEntitiesDisruption&gt;</returns>
        List<TflApiPresentationEntitiesDisruption> LineDisruption (List<string> ids);

        /// <summary>
        /// Get disruptions for the given line ids
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.</param>
        /// <returns>ApiResponse of List&lt;TflApiPresentationEntitiesDisruption&gt;</returns>
        ApiResponse<List<TflApiPresentationEntitiesDisruption>> LineDisruptionWithHttpInfo (List<string> ids);
        /// <summary>
        /// Get disruptions for all lines of the given modes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modes">A comma-separated list of modes e.g. tube,dlr</param>
        /// <returns>List&lt;TflApiPresentationEntitiesDisruption&gt;</returns>
        List<TflApiPresentationEntitiesDisruption> LineDisruptionByMode (List<string> modes);

        /// <summary>
        /// Get disruptions for all lines of the given modes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modes">A comma-separated list of modes e.g. tube,dlr</param>
        /// <returns>ApiResponse of List&lt;TflApiPresentationEntitiesDisruption&gt;</returns>
        ApiResponse<List<TflApiPresentationEntitiesDisruption>> LineDisruptionByModeWithHttpInfo (List<string> modes);
        /// <summary>
        /// Gets lines that match the specified line ids.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.</param>
        /// <returns>List&lt;TflApiPresentationEntitiesLine&gt;</returns>
        List<TflApiPresentationEntitiesLine> LineGet (List<string> ids);

        /// <summary>
        /// Gets lines that match the specified line ids.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.</param>
        /// <returns>ApiResponse of List&lt;TflApiPresentationEntitiesLine&gt;</returns>
        ApiResponse<List<TflApiPresentationEntitiesLine>> LineGetWithHttpInfo (List<string> ids);
        /// <summary>
        /// Gets lines that serve the given modes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modes">A comma-separated list of modes e.g. tube,dlr</param>
        /// <returns>List&lt;TflApiPresentationEntitiesLine&gt;</returns>
        List<TflApiPresentationEntitiesLine> LineGetByMode (List<string> modes);

        /// <summary>
        /// Gets lines that serve the given modes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modes">A comma-separated list of modes e.g. tube,dlr</param>
        /// <returns>ApiResponse of List&lt;TflApiPresentationEntitiesLine&gt;</returns>
        ApiResponse<List<TflApiPresentationEntitiesLine>> LineGetByModeWithHttpInfo (List<string> modes);
        /// <summary>
        /// Get all valid routes for given line ids, including the name and id of the originating and terminating stops for each route.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.</param>
        /// <param name="serviceTypes">A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)</param>
        /// <returns>List&lt;TflApiPresentationEntitiesLine&gt;</returns>
        List<TflApiPresentationEntitiesLine> LineLineRoutesByIds (List<string> ids, List<string> serviceTypes = null);

        /// <summary>
        /// Get all valid routes for given line ids, including the name and id of the originating and terminating stops for each route.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.</param>
        /// <param name="serviceTypes">A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)</param>
        /// <returns>ApiResponse of List&lt;TflApiPresentationEntitiesLine&gt;</returns>
        ApiResponse<List<TflApiPresentationEntitiesLine>> LineLineRoutesByIdsWithHttpInfo (List<string> ids, List<string> serviceTypes = null);
        /// <summary>
        /// Gets a list of valid disruption categories
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        List<string> LineMetaDisruptionCategories ();

        /// <summary>
        /// Gets a list of valid disruption categories
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> LineMetaDisruptionCategoriesWithHttpInfo ();
        /// <summary>
        /// Gets a list of valid modes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TflApiPresentationEntitiesMode&gt;</returns>
        List<TflApiPresentationEntitiesMode> LineMetaModes ();

        /// <summary>
        /// Gets a list of valid modes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TflApiPresentationEntitiesMode&gt;</returns>
        ApiResponse<List<TflApiPresentationEntitiesMode>> LineMetaModesWithHttpInfo ();
        /// <summary>
        /// Gets a list of valid ServiceTypes to filter on
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        List<string> LineMetaServiceTypes ();

        /// <summary>
        /// Gets a list of valid ServiceTypes to filter on
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> LineMetaServiceTypesWithHttpInfo ();
        /// <summary>
        /// Gets a list of valid severity codes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TflApiPresentationEntitiesStatusSeverity&gt;</returns>
        List<TflApiPresentationEntitiesStatusSeverity> LineMetaSeverity ();

        /// <summary>
        /// Gets a list of valid severity codes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TflApiPresentationEntitiesStatusSeverity&gt;</returns>
        ApiResponse<List<TflApiPresentationEntitiesStatusSeverity>> LineMetaSeverityWithHttpInfo ();
        /// <summary>
        /// Get all valid routes for all lines, including the name and id of the originating and terminating stops for each route.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceTypes">A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)</param>
        /// <returns>List&lt;TflApiPresentationEntitiesLine&gt;</returns>
        List<TflApiPresentationEntitiesLine> LineRoute (List<string> serviceTypes = null);

        /// <summary>
        /// Get all valid routes for all lines, including the name and id of the originating and terminating stops for each route.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceTypes">A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)</param>
        /// <returns>ApiResponse of List&lt;TflApiPresentationEntitiesLine&gt;</returns>
        ApiResponse<List<TflApiPresentationEntitiesLine>> LineRouteWithHttpInfo (List<string> serviceTypes = null);
        /// <summary>
        /// Gets all lines and their valid routes for given modes, including the name and id of the originating and terminating stops for each route
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modes">A comma-separated list of modes e.g. tube,dlr</param>
        /// <param name="serviceTypes">A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)</param>
        /// <returns>List&lt;TflApiPresentationEntitiesLine&gt;</returns>
        List<TflApiPresentationEntitiesLine> LineRouteByMode (List<string> modes, List<string> serviceTypes = null);

        /// <summary>
        /// Gets all lines and their valid routes for given modes, including the name and id of the originating and terminating stops for each route
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modes">A comma-separated list of modes e.g. tube,dlr</param>
        /// <param name="serviceTypes">A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)</param>
        /// <returns>ApiResponse of List&lt;TflApiPresentationEntitiesLine&gt;</returns>
        ApiResponse<List<TflApiPresentationEntitiesLine>> LineRouteByModeWithHttpInfo (List<string> modes, List<string> serviceTypes = null);
        /// <summary>
        /// Gets all valid routes for given line id, including the sequence of stops on each route.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A single line id e.g. victoria</param>
        /// <param name="direction">The direction of travel. Can be inbound or outbound.</param>
        /// <param name="serviceTypes">A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)</param>
        /// <param name="excludeCrowding">That excludes crowding from line disruptions. Can be true or false. (optional)</param>
        /// <returns>TflApiPresentationEntitiesRouteSequence</returns>
        TflApiPresentationEntitiesRouteSequence LineRouteSequence (string id, string direction, List<string> serviceTypes = null, bool? excludeCrowding = null);

        /// <summary>
        /// Gets all valid routes for given line id, including the sequence of stops on each route.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A single line id e.g. victoria</param>
        /// <param name="direction">The direction of travel. Can be inbound or outbound.</param>
        /// <param name="serviceTypes">A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)</param>
        /// <param name="excludeCrowding">That excludes crowding from line disruptions. Can be true or false. (optional)</param>
        /// <returns>ApiResponse of TflApiPresentationEntitiesRouteSequence</returns>
        ApiResponse<TflApiPresentationEntitiesRouteSequence> LineRouteSequenceWithHttpInfo (string id, string direction, List<string> serviceTypes = null, bool? excludeCrowding = null);
        /// <summary>
        /// Search for lines or routes matching the query string
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Search term e.g victoria</param>
        /// <param name="modes">Optionally filter by the specified modes (optional)</param>
        /// <param name="serviceTypes">A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)</param>
        /// <returns>TflApiPresentationEntitiesRouteSearchResponse</returns>
        TflApiPresentationEntitiesRouteSearchResponse LineSearch (string query, List<string> modes = null, List<string> serviceTypes = null);

        /// <summary>
        /// Search for lines or routes matching the query string
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Search term e.g victoria</param>
        /// <param name="modes">Optionally filter by the specified modes (optional)</param>
        /// <param name="serviceTypes">A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)</param>
        /// <returns>ApiResponse of TflApiPresentationEntitiesRouteSearchResponse</returns>
        ApiResponse<TflApiPresentationEntitiesRouteSearchResponse> LineSearchWithHttpInfo (string query, List<string> modes = null, List<string> serviceTypes = null);
        /// <summary>
        /// Gets the line status for given line ids during the provided dates e.g Minor Delays
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.</param>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="detail">Include details of the disruptions that are causing the line status including the affected stops and routes (optional)</param>
        /// <param name="dateRangeStartDate"> (optional)</param>
        /// <param name="dateRangeEndDate"> (optional)</param>
        /// <returns>List&lt;TflApiPresentationEntitiesLine&gt;</returns>
        List<TflApiPresentationEntitiesLine> LineStatus (List<string> ids, string startDate, string endDate, bool? detail = null, DateTime? dateRangeStartDate = null, DateTime? dateRangeEndDate = null);

        /// <summary>
        /// Gets the line status for given line ids during the provided dates e.g Minor Delays
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.</param>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="detail">Include details of the disruptions that are causing the line status including the affected stops and routes (optional)</param>
        /// <param name="dateRangeStartDate"> (optional)</param>
        /// <param name="dateRangeEndDate"> (optional)</param>
        /// <returns>ApiResponse of List&lt;TflApiPresentationEntitiesLine&gt;</returns>
        ApiResponse<List<TflApiPresentationEntitiesLine>> LineStatusWithHttpInfo (List<string> ids, string startDate, string endDate, bool? detail = null, DateTime? dateRangeStartDate = null, DateTime? dateRangeEndDate = null);
        /// <summary>
        /// Gets the line status of for given line ids e.g Minor Delays
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.</param>
        /// <param name="detail">Include details of the disruptions that are causing the line status including the affected stops and routes (optional)</param>
        /// <returns>List&lt;TflApiPresentationEntitiesLine&gt;</returns>
        List<TflApiPresentationEntitiesLine> LineStatusByIds (List<string> ids, bool? detail = null);

        /// <summary>
        /// Gets the line status of for given line ids e.g Minor Delays
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.</param>
        /// <param name="detail">Include details of the disruptions that are causing the line status including the affected stops and routes (optional)</param>
        /// <returns>ApiResponse of List&lt;TflApiPresentationEntitiesLine&gt;</returns>
        ApiResponse<List<TflApiPresentationEntitiesLine>> LineStatusByIdsWithHttpInfo (List<string> ids, bool? detail = null);
        /// <summary>
        /// Gets the line status of for all lines for the given modes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modes">A comma-separated list of modes to filter by. e.g. tube,dlr</param>
        /// <param name="detail">Include details of the disruptions that are causing the line status including the affected stops and routes (optional)</param>
        /// <param name="severityLevel">If specified, ensures that only those line status(es) are returned within the lines that have disruptions with the matching severity level. (optional)</param>
        /// <returns>List&lt;TflApiPresentationEntitiesLine&gt;</returns>
        List<TflApiPresentationEntitiesLine> LineStatusByMode (List<string> modes, bool? detail = null, string severityLevel = null);

        /// <summary>
        /// Gets the line status of for all lines for the given modes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modes">A comma-separated list of modes to filter by. e.g. tube,dlr</param>
        /// <param name="detail">Include details of the disruptions that are causing the line status including the affected stops and routes (optional)</param>
        /// <param name="severityLevel">If specified, ensures that only those line status(es) are returned within the lines that have disruptions with the matching severity level. (optional)</param>
        /// <returns>ApiResponse of List&lt;TflApiPresentationEntitiesLine&gt;</returns>
        ApiResponse<List<TflApiPresentationEntitiesLine>> LineStatusByModeWithHttpInfo (List<string> modes, bool? detail = null, string severityLevel = null);
        /// <summary>
        /// Gets the line status for all lines with a given severity              A list of valid severity codes can be obtained from a call to Line/Meta/Severity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="severity">The level of severity (eg: a number from 0 to 14)</param>
        /// <returns>List&lt;TflApiPresentationEntitiesLine&gt;</returns>
        List<TflApiPresentationEntitiesLine> LineStatusBySeverity (int? severity);

        /// <summary>
        /// Gets the line status for all lines with a given severity              A list of valid severity codes can be obtained from a call to Line/Meta/Severity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="severity">The level of severity (eg: a number from 0 to 14)</param>
        /// <returns>ApiResponse of List&lt;TflApiPresentationEntitiesLine&gt;</returns>
        ApiResponse<List<TflApiPresentationEntitiesLine>> LineStatusBySeverityWithHttpInfo (int? severity);
        /// <summary>
        /// Gets a list of the stations that serve the given line id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A single line id e.g. victoria</param>
        /// <param name="tflOperatedNationalRailStationsOnly">If the national-rail line is requested, this flag will filter the national rail stations so that only those operated by TfL are returned (optional)</param>
        /// <returns>List&lt;TflApiPresentationEntitiesStopPoint&gt;</returns>
        List<TflApiPresentationEntitiesStopPoint> LineStopPoints (string id, bool? tflOperatedNationalRailStationsOnly = null);

        /// <summary>
        /// Gets a list of the stations that serve the given line id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A single line id e.g. victoria</param>
        /// <param name="tflOperatedNationalRailStationsOnly">If the national-rail line is requested, this flag will filter the national rail stations so that only those operated by TfL are returned (optional)</param>
        /// <returns>ApiResponse of List&lt;TflApiPresentationEntitiesStopPoint&gt;</returns>
        ApiResponse<List<TflApiPresentationEntitiesStopPoint>> LineStopPointsWithHttpInfo (string id, bool? tflOperatedNationalRailStationsOnly = null);
        /// <summary>
        /// Gets the timetable for a specified station on the give line
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromStopPointId">The originating station&#39;s stop point id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)</param>
        /// <param name="id">A single line id e.g. victoria</param>
        /// <returns>TflApiPresentationEntitiesTimetableResponse</returns>
        TflApiPresentationEntitiesTimetableResponse LineTimetable (string fromStopPointId, string id);

        /// <summary>
        /// Gets the timetable for a specified station on the give line
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromStopPointId">The originating station&#39;s stop point id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)</param>
        /// <param name="id">A single line id e.g. victoria</param>
        /// <returns>ApiResponse of TflApiPresentationEntitiesTimetableResponse</returns>
        ApiResponse<TflApiPresentationEntitiesTimetableResponse> LineTimetableWithHttpInfo (string fromStopPointId, string id);
        /// <summary>
        /// Gets the timetable for a specified station on the give line with specified destination
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromStopPointId">The originating station&#39;s stop point id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)</param>
        /// <param name="id">A single line id e.g. victoria</param>
        /// <param name="toStopPointId">The destination stations&#39;s Naptan code</param>
        /// <returns>TflApiPresentationEntitiesTimetableResponse</returns>
        TflApiPresentationEntitiesTimetableResponse LineTimetableTo (string fromStopPointId, string id, string toStopPointId);

        /// <summary>
        /// Gets the timetable for a specified station on the give line with specified destination
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromStopPointId">The originating station&#39;s stop point id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)</param>
        /// <param name="id">A single line id e.g. victoria</param>
        /// <param name="toStopPointId">The destination stations&#39;s Naptan code</param>
        /// <returns>ApiResponse of TflApiPresentationEntitiesTimetableResponse</returns>
        ApiResponse<TflApiPresentationEntitiesTimetableResponse> LineTimetableToWithHttpInfo (string fromStopPointId, string id, string toStopPointId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get the list of arrival predictions for given line ids based at the given stop
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.</param>
        /// <param name="stopPointId">Optional. Id of stop to get arrival predictions for (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)</param>
        /// <param name="direction">Optional. The direction of travel. Can be inbound or outbound or all. If left blank, and destinationStopId is set, will default to all (optional)</param>
        /// <param name="destinationStationId">Optional. Id of destination stop (optional)</param>
        /// <returns>Task of List&lt;TflApiPresentationEntitiesPrediction&gt;</returns>
        System.Threading.Tasks.Task<List<TflApiPresentationEntitiesPrediction>> LineArrivalsAsync (List<string> ids, string stopPointId, string direction = null, string destinationStationId = null);

        /// <summary>
        /// Get the list of arrival predictions for given line ids based at the given stop
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.</param>
        /// <param name="stopPointId">Optional. Id of stop to get arrival predictions for (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)</param>
        /// <param name="direction">Optional. The direction of travel. Can be inbound or outbound or all. If left blank, and destinationStopId is set, will default to all (optional)</param>
        /// <param name="destinationStationId">Optional. Id of destination stop (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TflApiPresentationEntitiesPrediction&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesPrediction>>> LineArrivalsAsyncWithHttpInfo (List<string> ids, string stopPointId, string direction = null, string destinationStationId = null);
        /// <summary>
        /// Get disruptions for the given line ids
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.</param>
        /// <returns>Task of List&lt;TflApiPresentationEntitiesDisruption&gt;</returns>
        System.Threading.Tasks.Task<List<TflApiPresentationEntitiesDisruption>> LineDisruptionAsync (List<string> ids);

        /// <summary>
        /// Get disruptions for the given line ids
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.</param>
        /// <returns>Task of ApiResponse (List&lt;TflApiPresentationEntitiesDisruption&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesDisruption>>> LineDisruptionAsyncWithHttpInfo (List<string> ids);
        /// <summary>
        /// Get disruptions for all lines of the given modes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modes">A comma-separated list of modes e.g. tube,dlr</param>
        /// <returns>Task of List&lt;TflApiPresentationEntitiesDisruption&gt;</returns>
        System.Threading.Tasks.Task<List<TflApiPresentationEntitiesDisruption>> LineDisruptionByModeAsync (List<string> modes);

        /// <summary>
        /// Get disruptions for all lines of the given modes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modes">A comma-separated list of modes e.g. tube,dlr</param>
        /// <returns>Task of ApiResponse (List&lt;TflApiPresentationEntitiesDisruption&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesDisruption>>> LineDisruptionByModeAsyncWithHttpInfo (List<string> modes);
        /// <summary>
        /// Gets lines that match the specified line ids.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.</param>
        /// <returns>Task of List&lt;TflApiPresentationEntitiesLine&gt;</returns>
        System.Threading.Tasks.Task<List<TflApiPresentationEntitiesLine>> LineGetAsync (List<string> ids);

        /// <summary>
        /// Gets lines that match the specified line ids.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.</param>
        /// <returns>Task of ApiResponse (List&lt;TflApiPresentationEntitiesLine&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesLine>>> LineGetAsyncWithHttpInfo (List<string> ids);
        /// <summary>
        /// Gets lines that serve the given modes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modes">A comma-separated list of modes e.g. tube,dlr</param>
        /// <returns>Task of List&lt;TflApiPresentationEntitiesLine&gt;</returns>
        System.Threading.Tasks.Task<List<TflApiPresentationEntitiesLine>> LineGetByModeAsync (List<string> modes);

        /// <summary>
        /// Gets lines that serve the given modes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modes">A comma-separated list of modes e.g. tube,dlr</param>
        /// <returns>Task of ApiResponse (List&lt;TflApiPresentationEntitiesLine&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesLine>>> LineGetByModeAsyncWithHttpInfo (List<string> modes);
        /// <summary>
        /// Get all valid routes for given line ids, including the name and id of the originating and terminating stops for each route.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.</param>
        /// <param name="serviceTypes">A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)</param>
        /// <returns>Task of List&lt;TflApiPresentationEntitiesLine&gt;</returns>
        System.Threading.Tasks.Task<List<TflApiPresentationEntitiesLine>> LineLineRoutesByIdsAsync (List<string> ids, List<string> serviceTypes = null);

        /// <summary>
        /// Get all valid routes for given line ids, including the name and id of the originating and terminating stops for each route.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.</param>
        /// <param name="serviceTypes">A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TflApiPresentationEntitiesLine&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesLine>>> LineLineRoutesByIdsAsyncWithHttpInfo (List<string> ids, List<string> serviceTypes = null);
        /// <summary>
        /// Gets a list of valid disruption categories
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> LineMetaDisruptionCategoriesAsync ();

        /// <summary>
        /// Gets a list of valid disruption categories
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> LineMetaDisruptionCategoriesAsyncWithHttpInfo ();
        /// <summary>
        /// Gets a list of valid modes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TflApiPresentationEntitiesMode&gt;</returns>
        System.Threading.Tasks.Task<List<TflApiPresentationEntitiesMode>> LineMetaModesAsync ();

        /// <summary>
        /// Gets a list of valid modes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TflApiPresentationEntitiesMode&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesMode>>> LineMetaModesAsyncWithHttpInfo ();
        /// <summary>
        /// Gets a list of valid ServiceTypes to filter on
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> LineMetaServiceTypesAsync ();

        /// <summary>
        /// Gets a list of valid ServiceTypes to filter on
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> LineMetaServiceTypesAsyncWithHttpInfo ();
        /// <summary>
        /// Gets a list of valid severity codes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TflApiPresentationEntitiesStatusSeverity&gt;</returns>
        System.Threading.Tasks.Task<List<TflApiPresentationEntitiesStatusSeverity>> LineMetaSeverityAsync ();

        /// <summary>
        /// Gets a list of valid severity codes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TflApiPresentationEntitiesStatusSeverity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesStatusSeverity>>> LineMetaSeverityAsyncWithHttpInfo ();
        /// <summary>
        /// Get all valid routes for all lines, including the name and id of the originating and terminating stops for each route.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceTypes">A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)</param>
        /// <returns>Task of List&lt;TflApiPresentationEntitiesLine&gt;</returns>
        System.Threading.Tasks.Task<List<TflApiPresentationEntitiesLine>> LineRouteAsync (List<string> serviceTypes = null);

        /// <summary>
        /// Get all valid routes for all lines, including the name and id of the originating and terminating stops for each route.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceTypes">A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TflApiPresentationEntitiesLine&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesLine>>> LineRouteAsyncWithHttpInfo (List<string> serviceTypes = null);
        /// <summary>
        /// Gets all lines and their valid routes for given modes, including the name and id of the originating and terminating stops for each route
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modes">A comma-separated list of modes e.g. tube,dlr</param>
        /// <param name="serviceTypes">A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)</param>
        /// <returns>Task of List&lt;TflApiPresentationEntitiesLine&gt;</returns>
        System.Threading.Tasks.Task<List<TflApiPresentationEntitiesLine>> LineRouteByModeAsync (List<string> modes, List<string> serviceTypes = null);

        /// <summary>
        /// Gets all lines and their valid routes for given modes, including the name and id of the originating and terminating stops for each route
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modes">A comma-separated list of modes e.g. tube,dlr</param>
        /// <param name="serviceTypes">A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TflApiPresentationEntitiesLine&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesLine>>> LineRouteByModeAsyncWithHttpInfo (List<string> modes, List<string> serviceTypes = null);
        /// <summary>
        /// Gets all valid routes for given line id, including the sequence of stops on each route.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A single line id e.g. victoria</param>
        /// <param name="direction">The direction of travel. Can be inbound or outbound.</param>
        /// <param name="serviceTypes">A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)</param>
        /// <param name="excludeCrowding">That excludes crowding from line disruptions. Can be true or false. (optional)</param>
        /// <returns>Task of TflApiPresentationEntitiesRouteSequence</returns>
        System.Threading.Tasks.Task<TflApiPresentationEntitiesRouteSequence> LineRouteSequenceAsync (string id, string direction, List<string> serviceTypes = null, bool? excludeCrowding = null);

        /// <summary>
        /// Gets all valid routes for given line id, including the sequence of stops on each route.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A single line id e.g. victoria</param>
        /// <param name="direction">The direction of travel. Can be inbound or outbound.</param>
        /// <param name="serviceTypes">A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)</param>
        /// <param name="excludeCrowding">That excludes crowding from line disruptions. Can be true or false. (optional)</param>
        /// <returns>Task of ApiResponse (TflApiPresentationEntitiesRouteSequence)</returns>
        System.Threading.Tasks.Task<ApiResponse<TflApiPresentationEntitiesRouteSequence>> LineRouteSequenceAsyncWithHttpInfo (string id, string direction, List<string> serviceTypes = null, bool? excludeCrowding = null);
        /// <summary>
        /// Search for lines or routes matching the query string
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Search term e.g victoria</param>
        /// <param name="modes">Optionally filter by the specified modes (optional)</param>
        /// <param name="serviceTypes">A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)</param>
        /// <returns>Task of TflApiPresentationEntitiesRouteSearchResponse</returns>
        System.Threading.Tasks.Task<TflApiPresentationEntitiesRouteSearchResponse> LineSearchAsync (string query, List<string> modes = null, List<string> serviceTypes = null);

        /// <summary>
        /// Search for lines or routes matching the query string
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Search term e.g victoria</param>
        /// <param name="modes">Optionally filter by the specified modes (optional)</param>
        /// <param name="serviceTypes">A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)</param>
        /// <returns>Task of ApiResponse (TflApiPresentationEntitiesRouteSearchResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TflApiPresentationEntitiesRouteSearchResponse>> LineSearchAsyncWithHttpInfo (string query, List<string> modes = null, List<string> serviceTypes = null);
        /// <summary>
        /// Gets the line status for given line ids during the provided dates e.g Minor Delays
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.</param>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="detail">Include details of the disruptions that are causing the line status including the affected stops and routes (optional)</param>
        /// <param name="dateRangeStartDate"> (optional)</param>
        /// <param name="dateRangeEndDate"> (optional)</param>
        /// <returns>Task of List&lt;TflApiPresentationEntitiesLine&gt;</returns>
        System.Threading.Tasks.Task<List<TflApiPresentationEntitiesLine>> LineStatusAsync (List<string> ids, string startDate, string endDate, bool? detail = null, DateTime? dateRangeStartDate = null, DateTime? dateRangeEndDate = null);

        /// <summary>
        /// Gets the line status for given line ids during the provided dates e.g Minor Delays
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.</param>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="detail">Include details of the disruptions that are causing the line status including the affected stops and routes (optional)</param>
        /// <param name="dateRangeStartDate"> (optional)</param>
        /// <param name="dateRangeEndDate"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TflApiPresentationEntitiesLine&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesLine>>> LineStatusAsyncWithHttpInfo (List<string> ids, string startDate, string endDate, bool? detail = null, DateTime? dateRangeStartDate = null, DateTime? dateRangeEndDate = null);
        /// <summary>
        /// Gets the line status of for given line ids e.g Minor Delays
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.</param>
        /// <param name="detail">Include details of the disruptions that are causing the line status including the affected stops and routes (optional)</param>
        /// <returns>Task of List&lt;TflApiPresentationEntitiesLine&gt;</returns>
        System.Threading.Tasks.Task<List<TflApiPresentationEntitiesLine>> LineStatusByIdsAsync (List<string> ids, bool? detail = null);

        /// <summary>
        /// Gets the line status of for given line ids e.g Minor Delays
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.</param>
        /// <param name="detail">Include details of the disruptions that are causing the line status including the affected stops and routes (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TflApiPresentationEntitiesLine&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesLine>>> LineStatusByIdsAsyncWithHttpInfo (List<string> ids, bool? detail = null);
        /// <summary>
        /// Gets the line status of for all lines for the given modes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modes">A comma-separated list of modes to filter by. e.g. tube,dlr</param>
        /// <param name="detail">Include details of the disruptions that are causing the line status including the affected stops and routes (optional)</param>
        /// <param name="severityLevel">If specified, ensures that only those line status(es) are returned within the lines that have disruptions with the matching severity level. (optional)</param>
        /// <returns>Task of List&lt;TflApiPresentationEntitiesLine&gt;</returns>
        System.Threading.Tasks.Task<List<TflApiPresentationEntitiesLine>> LineStatusByModeAsync (List<string> modes, bool? detail = null, string severityLevel = null);

        /// <summary>
        /// Gets the line status of for all lines for the given modes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modes">A comma-separated list of modes to filter by. e.g. tube,dlr</param>
        /// <param name="detail">Include details of the disruptions that are causing the line status including the affected stops and routes (optional)</param>
        /// <param name="severityLevel">If specified, ensures that only those line status(es) are returned within the lines that have disruptions with the matching severity level. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TflApiPresentationEntitiesLine&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesLine>>> LineStatusByModeAsyncWithHttpInfo (List<string> modes, bool? detail = null, string severityLevel = null);
        /// <summary>
        /// Gets the line status for all lines with a given severity              A list of valid severity codes can be obtained from a call to Line/Meta/Severity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="severity">The level of severity (eg: a number from 0 to 14)</param>
        /// <returns>Task of List&lt;TflApiPresentationEntitiesLine&gt;</returns>
        System.Threading.Tasks.Task<List<TflApiPresentationEntitiesLine>> LineStatusBySeverityAsync (int? severity);

        /// <summary>
        /// Gets the line status for all lines with a given severity              A list of valid severity codes can be obtained from a call to Line/Meta/Severity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="severity">The level of severity (eg: a number from 0 to 14)</param>
        /// <returns>Task of ApiResponse (List&lt;TflApiPresentationEntitiesLine&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesLine>>> LineStatusBySeverityAsyncWithHttpInfo (int? severity);
        /// <summary>
        /// Gets a list of the stations that serve the given line id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A single line id e.g. victoria</param>
        /// <param name="tflOperatedNationalRailStationsOnly">If the national-rail line is requested, this flag will filter the national rail stations so that only those operated by TfL are returned (optional)</param>
        /// <returns>Task of List&lt;TflApiPresentationEntitiesStopPoint&gt;</returns>
        System.Threading.Tasks.Task<List<TflApiPresentationEntitiesStopPoint>> LineStopPointsAsync (string id, bool? tflOperatedNationalRailStationsOnly = null);

        /// <summary>
        /// Gets a list of the stations that serve the given line id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A single line id e.g. victoria</param>
        /// <param name="tflOperatedNationalRailStationsOnly">If the national-rail line is requested, this flag will filter the national rail stations so that only those operated by TfL are returned (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TflApiPresentationEntitiesStopPoint&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesStopPoint>>> LineStopPointsAsyncWithHttpInfo (string id, bool? tflOperatedNationalRailStationsOnly = null);
        /// <summary>
        /// Gets the timetable for a specified station on the give line
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromStopPointId">The originating station&#39;s stop point id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)</param>
        /// <param name="id">A single line id e.g. victoria</param>
        /// <returns>Task of TflApiPresentationEntitiesTimetableResponse</returns>
        System.Threading.Tasks.Task<TflApiPresentationEntitiesTimetableResponse> LineTimetableAsync (string fromStopPointId, string id);

        /// <summary>
        /// Gets the timetable for a specified station on the give line
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromStopPointId">The originating station&#39;s stop point id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)</param>
        /// <param name="id">A single line id e.g. victoria</param>
        /// <returns>Task of ApiResponse (TflApiPresentationEntitiesTimetableResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TflApiPresentationEntitiesTimetableResponse>> LineTimetableAsyncWithHttpInfo (string fromStopPointId, string id);
        /// <summary>
        /// Gets the timetable for a specified station on the give line with specified destination
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromStopPointId">The originating station&#39;s stop point id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)</param>
        /// <param name="id">A single line id e.g. victoria</param>
        /// <param name="toStopPointId">The destination stations&#39;s Naptan code</param>
        /// <returns>Task of TflApiPresentationEntitiesTimetableResponse</returns>
        System.Threading.Tasks.Task<TflApiPresentationEntitiesTimetableResponse> LineTimetableToAsync (string fromStopPointId, string id, string toStopPointId);

        /// <summary>
        /// Gets the timetable for a specified station on the give line with specified destination
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromStopPointId">The originating station&#39;s stop point id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)</param>
        /// <param name="id">A single line id e.g. victoria</param>
        /// <param name="toStopPointId">The destination stations&#39;s Naptan code</param>
        /// <returns>Task of ApiResponse (TflApiPresentationEntitiesTimetableResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TflApiPresentationEntitiesTimetableResponse>> LineTimetableToAsyncWithHttpInfo (string fromStopPointId, string id, string toStopPointId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LineApi : ILineApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LineApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LineApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LineApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LineApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get the list of arrival predictions for given line ids based at the given stop 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.</param>
        /// <param name="stopPointId">Optional. Id of stop to get arrival predictions for (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)</param>
        /// <param name="direction">Optional. The direction of travel. Can be inbound or outbound or all. If left blank, and destinationStopId is set, will default to all (optional)</param>
        /// <param name="destinationStationId">Optional. Id of destination stop (optional)</param>
        /// <returns>List&lt;TflApiPresentationEntitiesPrediction&gt;</returns>
        public List<TflApiPresentationEntitiesPrediction> LineArrivals (List<string> ids, string stopPointId, string direction = null, string destinationStationId = null)
        {
             ApiResponse<List<TflApiPresentationEntitiesPrediction>> localVarResponse = LineArrivalsWithHttpInfo(ids, stopPointId, direction, destinationStationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the list of arrival predictions for given line ids based at the given stop 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.</param>
        /// <param name="stopPointId">Optional. Id of stop to get arrival predictions for (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)</param>
        /// <param name="direction">Optional. The direction of travel. Can be inbound or outbound or all. If left blank, and destinationStopId is set, will default to all (optional)</param>
        /// <param name="destinationStationId">Optional. Id of destination stop (optional)</param>
        /// <returns>ApiResponse of List&lt;TflApiPresentationEntitiesPrediction&gt;</returns>
        public ApiResponse< List<TflApiPresentationEntitiesPrediction> > LineArrivalsWithHttpInfo (List<string> ids, string stopPointId, string direction = null, string destinationStationId = null)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling LineApi->LineArrivals");
            // verify the required parameter 'stopPointId' is set
            if (stopPointId == null)
                throw new ApiException(400, "Missing required parameter 'stopPointId' when calling LineApi->LineArrivals");

            var localVarPath = "/Line/{ids}/Arrivals/{stopPointId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarPathParams.Add("ids", this.Configuration.ApiClient.ParameterToString(ids)); // path parameter
            if (stopPointId != null) localVarPathParams.Add("stopPointId", this.Configuration.ApiClient.ParameterToString(stopPointId)); // path parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter
            if (destinationStationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "destinationStationId", destinationStationId)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LineArrivals", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TflApiPresentationEntitiesPrediction>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TflApiPresentationEntitiesPrediction>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TflApiPresentationEntitiesPrediction>)));
        }

        /// <summary>
        /// Get the list of arrival predictions for given line ids based at the given stop 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.</param>
        /// <param name="stopPointId">Optional. Id of stop to get arrival predictions for (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)</param>
        /// <param name="direction">Optional. The direction of travel. Can be inbound or outbound or all. If left blank, and destinationStopId is set, will default to all (optional)</param>
        /// <param name="destinationStationId">Optional. Id of destination stop (optional)</param>
        /// <returns>Task of List&lt;TflApiPresentationEntitiesPrediction&gt;</returns>
        public async System.Threading.Tasks.Task<List<TflApiPresentationEntitiesPrediction>> LineArrivalsAsync (List<string> ids, string stopPointId, string direction = null, string destinationStationId = null)
        {
             ApiResponse<List<TflApiPresentationEntitiesPrediction>> localVarResponse = await LineArrivalsAsyncWithHttpInfo(ids, stopPointId, direction, destinationStationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the list of arrival predictions for given line ids based at the given stop 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.</param>
        /// <param name="stopPointId">Optional. Id of stop to get arrival predictions for (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)</param>
        /// <param name="direction">Optional. The direction of travel. Can be inbound or outbound or all. If left blank, and destinationStopId is set, will default to all (optional)</param>
        /// <param name="destinationStationId">Optional. Id of destination stop (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TflApiPresentationEntitiesPrediction&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesPrediction>>> LineArrivalsAsyncWithHttpInfo (List<string> ids, string stopPointId, string direction = null, string destinationStationId = null)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling LineApi->LineArrivals");
            // verify the required parameter 'stopPointId' is set
            if (stopPointId == null)
                throw new ApiException(400, "Missing required parameter 'stopPointId' when calling LineApi->LineArrivals");

            var localVarPath = "/Line/{ids}/Arrivals/{stopPointId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarPathParams.Add("ids", this.Configuration.ApiClient.ParameterToString(ids)); // path parameter
            if (stopPointId != null) localVarPathParams.Add("stopPointId", this.Configuration.ApiClient.ParameterToString(stopPointId)); // path parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter
            if (destinationStationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "destinationStationId", destinationStationId)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LineArrivals", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TflApiPresentationEntitiesPrediction>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TflApiPresentationEntitiesPrediction>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TflApiPresentationEntitiesPrediction>)));
        }

        /// <summary>
        /// Get disruptions for the given line ids 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.</param>
        /// <returns>List&lt;TflApiPresentationEntitiesDisruption&gt;</returns>
        public List<TflApiPresentationEntitiesDisruption> LineDisruption (List<string> ids)
        {
             ApiResponse<List<TflApiPresentationEntitiesDisruption>> localVarResponse = LineDisruptionWithHttpInfo(ids);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get disruptions for the given line ids 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.</param>
        /// <returns>ApiResponse of List&lt;TflApiPresentationEntitiesDisruption&gt;</returns>
        public ApiResponse< List<TflApiPresentationEntitiesDisruption> > LineDisruptionWithHttpInfo (List<string> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling LineApi->LineDisruption");

            var localVarPath = "/Line/{ids}/Disruption";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarPathParams.Add("ids", this.Configuration.ApiClient.ParameterToString(ids)); // path parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LineDisruption", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TflApiPresentationEntitiesDisruption>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TflApiPresentationEntitiesDisruption>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TflApiPresentationEntitiesDisruption>)));
        }

        /// <summary>
        /// Get disruptions for the given line ids 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.</param>
        /// <returns>Task of List&lt;TflApiPresentationEntitiesDisruption&gt;</returns>
        public async System.Threading.Tasks.Task<List<TflApiPresentationEntitiesDisruption>> LineDisruptionAsync (List<string> ids)
        {
             ApiResponse<List<TflApiPresentationEntitiesDisruption>> localVarResponse = await LineDisruptionAsyncWithHttpInfo(ids);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get disruptions for the given line ids 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.</param>
        /// <returns>Task of ApiResponse (List&lt;TflApiPresentationEntitiesDisruption&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesDisruption>>> LineDisruptionAsyncWithHttpInfo (List<string> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling LineApi->LineDisruption");

            var localVarPath = "/Line/{ids}/Disruption";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarPathParams.Add("ids", this.Configuration.ApiClient.ParameterToString(ids)); // path parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LineDisruption", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TflApiPresentationEntitiesDisruption>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TflApiPresentationEntitiesDisruption>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TflApiPresentationEntitiesDisruption>)));
        }

        /// <summary>
        /// Get disruptions for all lines of the given modes. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modes">A comma-separated list of modes e.g. tube,dlr</param>
        /// <returns>List&lt;TflApiPresentationEntitiesDisruption&gt;</returns>
        public List<TflApiPresentationEntitiesDisruption> LineDisruptionByMode (List<string> modes)
        {
             ApiResponse<List<TflApiPresentationEntitiesDisruption>> localVarResponse = LineDisruptionByModeWithHttpInfo(modes);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get disruptions for all lines of the given modes. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modes">A comma-separated list of modes e.g. tube,dlr</param>
        /// <returns>ApiResponse of List&lt;TflApiPresentationEntitiesDisruption&gt;</returns>
        public ApiResponse< List<TflApiPresentationEntitiesDisruption> > LineDisruptionByModeWithHttpInfo (List<string> modes)
        {
            // verify the required parameter 'modes' is set
            if (modes == null)
                throw new ApiException(400, "Missing required parameter 'modes' when calling LineApi->LineDisruptionByMode");

            var localVarPath = "/Line/Mode/{modes}/Disruption";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modes != null) localVarPathParams.Add("modes", this.Configuration.ApiClient.ParameterToString(modes)); // path parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LineDisruptionByMode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TflApiPresentationEntitiesDisruption>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TflApiPresentationEntitiesDisruption>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TflApiPresentationEntitiesDisruption>)));
        }

        /// <summary>
        /// Get disruptions for all lines of the given modes. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modes">A comma-separated list of modes e.g. tube,dlr</param>
        /// <returns>Task of List&lt;TflApiPresentationEntitiesDisruption&gt;</returns>
        public async System.Threading.Tasks.Task<List<TflApiPresentationEntitiesDisruption>> LineDisruptionByModeAsync (List<string> modes)
        {
             ApiResponse<List<TflApiPresentationEntitiesDisruption>> localVarResponse = await LineDisruptionByModeAsyncWithHttpInfo(modes);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get disruptions for all lines of the given modes. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modes">A comma-separated list of modes e.g. tube,dlr</param>
        /// <returns>Task of ApiResponse (List&lt;TflApiPresentationEntitiesDisruption&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesDisruption>>> LineDisruptionByModeAsyncWithHttpInfo (List<string> modes)
        {
            // verify the required parameter 'modes' is set
            if (modes == null)
                throw new ApiException(400, "Missing required parameter 'modes' when calling LineApi->LineDisruptionByMode");

            var localVarPath = "/Line/Mode/{modes}/Disruption";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modes != null) localVarPathParams.Add("modes", this.Configuration.ApiClient.ParameterToString(modes)); // path parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LineDisruptionByMode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TflApiPresentationEntitiesDisruption>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TflApiPresentationEntitiesDisruption>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TflApiPresentationEntitiesDisruption>)));
        }

        /// <summary>
        /// Gets lines that match the specified line ids. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.</param>
        /// <returns>List&lt;TflApiPresentationEntitiesLine&gt;</returns>
        public List<TflApiPresentationEntitiesLine> LineGet (List<string> ids)
        {
             ApiResponse<List<TflApiPresentationEntitiesLine>> localVarResponse = LineGetWithHttpInfo(ids);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets lines that match the specified line ids. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.</param>
        /// <returns>ApiResponse of List&lt;TflApiPresentationEntitiesLine&gt;</returns>
        public ApiResponse< List<TflApiPresentationEntitiesLine> > LineGetWithHttpInfo (List<string> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling LineApi->LineGet");

            var localVarPath = "/Line/{ids}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarPathParams.Add("ids", this.Configuration.ApiClient.ParameterToString(ids)); // path parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LineGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TflApiPresentationEntitiesLine>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TflApiPresentationEntitiesLine>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TflApiPresentationEntitiesLine>)));
        }

        /// <summary>
        /// Gets lines that match the specified line ids. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.</param>
        /// <returns>Task of List&lt;TflApiPresentationEntitiesLine&gt;</returns>
        public async System.Threading.Tasks.Task<List<TflApiPresentationEntitiesLine>> LineGetAsync (List<string> ids)
        {
             ApiResponse<List<TflApiPresentationEntitiesLine>> localVarResponse = await LineGetAsyncWithHttpInfo(ids);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets lines that match the specified line ids. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.</param>
        /// <returns>Task of ApiResponse (List&lt;TflApiPresentationEntitiesLine&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesLine>>> LineGetAsyncWithHttpInfo (List<string> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling LineApi->LineGet");

            var localVarPath = "/Line/{ids}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarPathParams.Add("ids", this.Configuration.ApiClient.ParameterToString(ids)); // path parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LineGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TflApiPresentationEntitiesLine>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TflApiPresentationEntitiesLine>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TflApiPresentationEntitiesLine>)));
        }

        /// <summary>
        /// Gets lines that serve the given modes. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modes">A comma-separated list of modes e.g. tube,dlr</param>
        /// <returns>List&lt;TflApiPresentationEntitiesLine&gt;</returns>
        public List<TflApiPresentationEntitiesLine> LineGetByMode (List<string> modes)
        {
             ApiResponse<List<TflApiPresentationEntitiesLine>> localVarResponse = LineGetByModeWithHttpInfo(modes);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets lines that serve the given modes. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modes">A comma-separated list of modes e.g. tube,dlr</param>
        /// <returns>ApiResponse of List&lt;TflApiPresentationEntitiesLine&gt;</returns>
        public ApiResponse< List<TflApiPresentationEntitiesLine> > LineGetByModeWithHttpInfo (List<string> modes)
        {
            // verify the required parameter 'modes' is set
            if (modes == null)
                throw new ApiException(400, "Missing required parameter 'modes' when calling LineApi->LineGetByMode");

            var localVarPath = "/Line/Mode/{modes}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modes != null) localVarPathParams.Add("modes", this.Configuration.ApiClient.ParameterToString(modes)); // path parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LineGetByMode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TflApiPresentationEntitiesLine>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TflApiPresentationEntitiesLine>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TflApiPresentationEntitiesLine>)));
        }

        /// <summary>
        /// Gets lines that serve the given modes. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modes">A comma-separated list of modes e.g. tube,dlr</param>
        /// <returns>Task of List&lt;TflApiPresentationEntitiesLine&gt;</returns>
        public async System.Threading.Tasks.Task<List<TflApiPresentationEntitiesLine>> LineGetByModeAsync (List<string> modes)
        {
             ApiResponse<List<TflApiPresentationEntitiesLine>> localVarResponse = await LineGetByModeAsyncWithHttpInfo(modes);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets lines that serve the given modes. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modes">A comma-separated list of modes e.g. tube,dlr</param>
        /// <returns>Task of ApiResponse (List&lt;TflApiPresentationEntitiesLine&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesLine>>> LineGetByModeAsyncWithHttpInfo (List<string> modes)
        {
            // verify the required parameter 'modes' is set
            if (modes == null)
                throw new ApiException(400, "Missing required parameter 'modes' when calling LineApi->LineGetByMode");

            var localVarPath = "/Line/Mode/{modes}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modes != null) localVarPathParams.Add("modes", this.Configuration.ApiClient.ParameterToString(modes)); // path parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LineGetByMode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TflApiPresentationEntitiesLine>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TflApiPresentationEntitiesLine>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TflApiPresentationEntitiesLine>)));
        }

        /// <summary>
        /// Get all valid routes for given line ids, including the name and id of the originating and terminating stops for each route. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.</param>
        /// <param name="serviceTypes">A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)</param>
        /// <returns>List&lt;TflApiPresentationEntitiesLine&gt;</returns>
        public List<TflApiPresentationEntitiesLine> LineLineRoutesByIds (List<string> ids, List<string> serviceTypes = null)
        {
             ApiResponse<List<TflApiPresentationEntitiesLine>> localVarResponse = LineLineRoutesByIdsWithHttpInfo(ids, serviceTypes);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all valid routes for given line ids, including the name and id of the originating and terminating stops for each route. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.</param>
        /// <param name="serviceTypes">A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)</param>
        /// <returns>ApiResponse of List&lt;TflApiPresentationEntitiesLine&gt;</returns>
        public ApiResponse< List<TflApiPresentationEntitiesLine> > LineLineRoutesByIdsWithHttpInfo (List<string> ids, List<string> serviceTypes = null)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling LineApi->LineLineRoutesByIds");

            var localVarPath = "/Line/{ids}/Route";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarPathParams.Add("ids", this.Configuration.ApiClient.ParameterToString(ids)); // path parameter
            if (serviceTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "serviceTypes", serviceTypes)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LineLineRoutesByIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TflApiPresentationEntitiesLine>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TflApiPresentationEntitiesLine>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TflApiPresentationEntitiesLine>)));
        }

        /// <summary>
        /// Get all valid routes for given line ids, including the name and id of the originating and terminating stops for each route. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.</param>
        /// <param name="serviceTypes">A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)</param>
        /// <returns>Task of List&lt;TflApiPresentationEntitiesLine&gt;</returns>
        public async System.Threading.Tasks.Task<List<TflApiPresentationEntitiesLine>> LineLineRoutesByIdsAsync (List<string> ids, List<string> serviceTypes = null)
        {
             ApiResponse<List<TflApiPresentationEntitiesLine>> localVarResponse = await LineLineRoutesByIdsAsyncWithHttpInfo(ids, serviceTypes);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all valid routes for given line ids, including the name and id of the originating and terminating stops for each route. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.</param>
        /// <param name="serviceTypes">A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TflApiPresentationEntitiesLine&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesLine>>> LineLineRoutesByIdsAsyncWithHttpInfo (List<string> ids, List<string> serviceTypes = null)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling LineApi->LineLineRoutesByIds");

            var localVarPath = "/Line/{ids}/Route";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarPathParams.Add("ids", this.Configuration.ApiClient.ParameterToString(ids)); // path parameter
            if (serviceTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "serviceTypes", serviceTypes)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LineLineRoutesByIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TflApiPresentationEntitiesLine>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TflApiPresentationEntitiesLine>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TflApiPresentationEntitiesLine>)));
        }

        /// <summary>
        /// Gets a list of valid disruption categories 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> LineMetaDisruptionCategories ()
        {
             ApiResponse<List<string>> localVarResponse = LineMetaDisruptionCategoriesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of valid disruption categories 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ApiResponse< List<string> > LineMetaDisruptionCategoriesWithHttpInfo ()
        {

            var localVarPath = "/Line/Meta/DisruptionCategories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LineMetaDisruptionCategories", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        /// Gets a list of valid disruption categories 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> LineMetaDisruptionCategoriesAsync ()
        {
             ApiResponse<List<string>> localVarResponse = await LineMetaDisruptionCategoriesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of valid disruption categories 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<string>>> LineMetaDisruptionCategoriesAsyncWithHttpInfo ()
        {

            var localVarPath = "/Line/Meta/DisruptionCategories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LineMetaDisruptionCategories", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        /// Gets a list of valid modes 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TflApiPresentationEntitiesMode&gt;</returns>
        public List<TflApiPresentationEntitiesMode> LineMetaModes ()
        {
             ApiResponse<List<TflApiPresentationEntitiesMode>> localVarResponse = LineMetaModesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of valid modes 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TflApiPresentationEntitiesMode&gt;</returns>
        public ApiResponse< List<TflApiPresentationEntitiesMode> > LineMetaModesWithHttpInfo ()
        {

            var localVarPath = "/Line/Meta/Modes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LineMetaModes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TflApiPresentationEntitiesMode>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TflApiPresentationEntitiesMode>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TflApiPresentationEntitiesMode>)));
        }

        /// <summary>
        /// Gets a list of valid modes 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TflApiPresentationEntitiesMode&gt;</returns>
        public async System.Threading.Tasks.Task<List<TflApiPresentationEntitiesMode>> LineMetaModesAsync ()
        {
             ApiResponse<List<TflApiPresentationEntitiesMode>> localVarResponse = await LineMetaModesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of valid modes 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TflApiPresentationEntitiesMode&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesMode>>> LineMetaModesAsyncWithHttpInfo ()
        {

            var localVarPath = "/Line/Meta/Modes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LineMetaModes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TflApiPresentationEntitiesMode>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TflApiPresentationEntitiesMode>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TflApiPresentationEntitiesMode>)));
        }

        /// <summary>
        /// Gets a list of valid ServiceTypes to filter on 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> LineMetaServiceTypes ()
        {
             ApiResponse<List<string>> localVarResponse = LineMetaServiceTypesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of valid ServiceTypes to filter on 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ApiResponse< List<string> > LineMetaServiceTypesWithHttpInfo ()
        {

            var localVarPath = "/Line/Meta/ServiceTypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LineMetaServiceTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        /// Gets a list of valid ServiceTypes to filter on 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> LineMetaServiceTypesAsync ()
        {
             ApiResponse<List<string>> localVarResponse = await LineMetaServiceTypesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of valid ServiceTypes to filter on 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<string>>> LineMetaServiceTypesAsyncWithHttpInfo ()
        {

            var localVarPath = "/Line/Meta/ServiceTypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LineMetaServiceTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        /// Gets a list of valid severity codes 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TflApiPresentationEntitiesStatusSeverity&gt;</returns>
        public List<TflApiPresentationEntitiesStatusSeverity> LineMetaSeverity ()
        {
             ApiResponse<List<TflApiPresentationEntitiesStatusSeverity>> localVarResponse = LineMetaSeverityWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of valid severity codes 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TflApiPresentationEntitiesStatusSeverity&gt;</returns>
        public ApiResponse< List<TflApiPresentationEntitiesStatusSeverity> > LineMetaSeverityWithHttpInfo ()
        {

            var localVarPath = "/Line/Meta/Severity";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LineMetaSeverity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TflApiPresentationEntitiesStatusSeverity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TflApiPresentationEntitiesStatusSeverity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TflApiPresentationEntitiesStatusSeverity>)));
        }

        /// <summary>
        /// Gets a list of valid severity codes 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TflApiPresentationEntitiesStatusSeverity&gt;</returns>
        public async System.Threading.Tasks.Task<List<TflApiPresentationEntitiesStatusSeverity>> LineMetaSeverityAsync ()
        {
             ApiResponse<List<TflApiPresentationEntitiesStatusSeverity>> localVarResponse = await LineMetaSeverityAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of valid severity codes 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TflApiPresentationEntitiesStatusSeverity&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesStatusSeverity>>> LineMetaSeverityAsyncWithHttpInfo ()
        {

            var localVarPath = "/Line/Meta/Severity";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LineMetaSeverity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TflApiPresentationEntitiesStatusSeverity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TflApiPresentationEntitiesStatusSeverity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TflApiPresentationEntitiesStatusSeverity>)));
        }

        /// <summary>
        /// Get all valid routes for all lines, including the name and id of the originating and terminating stops for each route. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceTypes">A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)</param>
        /// <returns>List&lt;TflApiPresentationEntitiesLine&gt;</returns>
        public List<TflApiPresentationEntitiesLine> LineRoute (List<string> serviceTypes = null)
        {
             ApiResponse<List<TflApiPresentationEntitiesLine>> localVarResponse = LineRouteWithHttpInfo(serviceTypes);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all valid routes for all lines, including the name and id of the originating and terminating stops for each route. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceTypes">A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)</param>
        /// <returns>ApiResponse of List&lt;TflApiPresentationEntitiesLine&gt;</returns>
        public ApiResponse< List<TflApiPresentationEntitiesLine> > LineRouteWithHttpInfo (List<string> serviceTypes = null)
        {

            var localVarPath = "/Line/Route";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "serviceTypes", serviceTypes)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LineRoute", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TflApiPresentationEntitiesLine>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TflApiPresentationEntitiesLine>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TflApiPresentationEntitiesLine>)));
        }

        /// <summary>
        /// Get all valid routes for all lines, including the name and id of the originating and terminating stops for each route. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceTypes">A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)</param>
        /// <returns>Task of List&lt;TflApiPresentationEntitiesLine&gt;</returns>
        public async System.Threading.Tasks.Task<List<TflApiPresentationEntitiesLine>> LineRouteAsync (List<string> serviceTypes = null)
        {
             ApiResponse<List<TflApiPresentationEntitiesLine>> localVarResponse = await LineRouteAsyncWithHttpInfo(serviceTypes);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all valid routes for all lines, including the name and id of the originating and terminating stops for each route. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceTypes">A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TflApiPresentationEntitiesLine&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesLine>>> LineRouteAsyncWithHttpInfo (List<string> serviceTypes = null)
        {

            var localVarPath = "/Line/Route";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "serviceTypes", serviceTypes)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LineRoute", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TflApiPresentationEntitiesLine>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TflApiPresentationEntitiesLine>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TflApiPresentationEntitiesLine>)));
        }

        /// <summary>
        /// Gets all lines and their valid routes for given modes, including the name and id of the originating and terminating stops for each route 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modes">A comma-separated list of modes e.g. tube,dlr</param>
        /// <param name="serviceTypes">A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)</param>
        /// <returns>List&lt;TflApiPresentationEntitiesLine&gt;</returns>
        public List<TflApiPresentationEntitiesLine> LineRouteByMode (List<string> modes, List<string> serviceTypes = null)
        {
             ApiResponse<List<TflApiPresentationEntitiesLine>> localVarResponse = LineRouteByModeWithHttpInfo(modes, serviceTypes);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all lines and their valid routes for given modes, including the name and id of the originating and terminating stops for each route 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modes">A comma-separated list of modes e.g. tube,dlr</param>
        /// <param name="serviceTypes">A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)</param>
        /// <returns>ApiResponse of List&lt;TflApiPresentationEntitiesLine&gt;</returns>
        public ApiResponse< List<TflApiPresentationEntitiesLine> > LineRouteByModeWithHttpInfo (List<string> modes, List<string> serviceTypes = null)
        {
            // verify the required parameter 'modes' is set
            if (modes == null)
                throw new ApiException(400, "Missing required parameter 'modes' when calling LineApi->LineRouteByMode");

            var localVarPath = "/Line/Mode/{modes}/Route";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modes != null) localVarPathParams.Add("modes", this.Configuration.ApiClient.ParameterToString(modes)); // path parameter
            if (serviceTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "serviceTypes", serviceTypes)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LineRouteByMode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TflApiPresentationEntitiesLine>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TflApiPresentationEntitiesLine>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TflApiPresentationEntitiesLine>)));
        }

        /// <summary>
        /// Gets all lines and their valid routes for given modes, including the name and id of the originating and terminating stops for each route 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modes">A comma-separated list of modes e.g. tube,dlr</param>
        /// <param name="serviceTypes">A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)</param>
        /// <returns>Task of List&lt;TflApiPresentationEntitiesLine&gt;</returns>
        public async System.Threading.Tasks.Task<List<TflApiPresentationEntitiesLine>> LineRouteByModeAsync (List<string> modes, List<string> serviceTypes = null)
        {
             ApiResponse<List<TflApiPresentationEntitiesLine>> localVarResponse = await LineRouteByModeAsyncWithHttpInfo(modes, serviceTypes);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets all lines and their valid routes for given modes, including the name and id of the originating and terminating stops for each route 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modes">A comma-separated list of modes e.g. tube,dlr</param>
        /// <param name="serviceTypes">A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TflApiPresentationEntitiesLine&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesLine>>> LineRouteByModeAsyncWithHttpInfo (List<string> modes, List<string> serviceTypes = null)
        {
            // verify the required parameter 'modes' is set
            if (modes == null)
                throw new ApiException(400, "Missing required parameter 'modes' when calling LineApi->LineRouteByMode");

            var localVarPath = "/Line/Mode/{modes}/Route";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modes != null) localVarPathParams.Add("modes", this.Configuration.ApiClient.ParameterToString(modes)); // path parameter
            if (serviceTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "serviceTypes", serviceTypes)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LineRouteByMode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TflApiPresentationEntitiesLine>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TflApiPresentationEntitiesLine>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TflApiPresentationEntitiesLine>)));
        }

        /// <summary>
        /// Gets all valid routes for given line id, including the sequence of stops on each route. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A single line id e.g. victoria</param>
        /// <param name="direction">The direction of travel. Can be inbound or outbound.</param>
        /// <param name="serviceTypes">A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)</param>
        /// <param name="excludeCrowding">That excludes crowding from line disruptions. Can be true or false. (optional)</param>
        /// <returns>TflApiPresentationEntitiesRouteSequence</returns>
        public TflApiPresentationEntitiesRouteSequence LineRouteSequence (string id, string direction, List<string> serviceTypes = null, bool? excludeCrowding = null)
        {
             ApiResponse<TflApiPresentationEntitiesRouteSequence> localVarResponse = LineRouteSequenceWithHttpInfo(id, direction, serviceTypes, excludeCrowding);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all valid routes for given line id, including the sequence of stops on each route. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A single line id e.g. victoria</param>
        /// <param name="direction">The direction of travel. Can be inbound or outbound.</param>
        /// <param name="serviceTypes">A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)</param>
        /// <param name="excludeCrowding">That excludes crowding from line disruptions. Can be true or false. (optional)</param>
        /// <returns>ApiResponse of TflApiPresentationEntitiesRouteSequence</returns>
        public ApiResponse< TflApiPresentationEntitiesRouteSequence > LineRouteSequenceWithHttpInfo (string id, string direction, List<string> serviceTypes = null, bool? excludeCrowding = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LineApi->LineRouteSequence");
            // verify the required parameter 'direction' is set
            if (direction == null)
                throw new ApiException(400, "Missing required parameter 'direction' when calling LineApi->LineRouteSequence");

            var localVarPath = "/Line/{id}/Route/Sequence/{direction}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (direction != null) localVarPathParams.Add("direction", this.Configuration.ApiClient.ParameterToString(direction)); // path parameter
            if (serviceTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "serviceTypes", serviceTypes)); // query parameter
            if (excludeCrowding != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "excludeCrowding", excludeCrowding)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LineRouteSequence", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TflApiPresentationEntitiesRouteSequence>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TflApiPresentationEntitiesRouteSequence) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TflApiPresentationEntitiesRouteSequence)));
        }

        /// <summary>
        /// Gets all valid routes for given line id, including the sequence of stops on each route. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A single line id e.g. victoria</param>
        /// <param name="direction">The direction of travel. Can be inbound or outbound.</param>
        /// <param name="serviceTypes">A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)</param>
        /// <param name="excludeCrowding">That excludes crowding from line disruptions. Can be true or false. (optional)</param>
        /// <returns>Task of TflApiPresentationEntitiesRouteSequence</returns>
        public async System.Threading.Tasks.Task<TflApiPresentationEntitiesRouteSequence> LineRouteSequenceAsync (string id, string direction, List<string> serviceTypes = null, bool? excludeCrowding = null)
        {
             ApiResponse<TflApiPresentationEntitiesRouteSequence> localVarResponse = await LineRouteSequenceAsyncWithHttpInfo(id, direction, serviceTypes, excludeCrowding);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets all valid routes for given line id, including the sequence of stops on each route. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A single line id e.g. victoria</param>
        /// <param name="direction">The direction of travel. Can be inbound or outbound.</param>
        /// <param name="serviceTypes">A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)</param>
        /// <param name="excludeCrowding">That excludes crowding from line disruptions. Can be true or false. (optional)</param>
        /// <returns>Task of ApiResponse (TflApiPresentationEntitiesRouteSequence)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TflApiPresentationEntitiesRouteSequence>> LineRouteSequenceAsyncWithHttpInfo (string id, string direction, List<string> serviceTypes = null, bool? excludeCrowding = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LineApi->LineRouteSequence");
            // verify the required parameter 'direction' is set
            if (direction == null)
                throw new ApiException(400, "Missing required parameter 'direction' when calling LineApi->LineRouteSequence");

            var localVarPath = "/Line/{id}/Route/Sequence/{direction}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (direction != null) localVarPathParams.Add("direction", this.Configuration.ApiClient.ParameterToString(direction)); // path parameter
            if (serviceTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "serviceTypes", serviceTypes)); // query parameter
            if (excludeCrowding != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "excludeCrowding", excludeCrowding)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LineRouteSequence", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TflApiPresentationEntitiesRouteSequence>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TflApiPresentationEntitiesRouteSequence) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TflApiPresentationEntitiesRouteSequence)));
        }

        /// <summary>
        /// Search for lines or routes matching the query string 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Search term e.g victoria</param>
        /// <param name="modes">Optionally filter by the specified modes (optional)</param>
        /// <param name="serviceTypes">A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)</param>
        /// <returns>TflApiPresentationEntitiesRouteSearchResponse</returns>
        public TflApiPresentationEntitiesRouteSearchResponse LineSearch (string query, List<string> modes = null, List<string> serviceTypes = null)
        {
             ApiResponse<TflApiPresentationEntitiesRouteSearchResponse> localVarResponse = LineSearchWithHttpInfo(query, modes, serviceTypes);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search for lines or routes matching the query string 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Search term e.g victoria</param>
        /// <param name="modes">Optionally filter by the specified modes (optional)</param>
        /// <param name="serviceTypes">A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)</param>
        /// <returns>ApiResponse of TflApiPresentationEntitiesRouteSearchResponse</returns>
        public ApiResponse< TflApiPresentationEntitiesRouteSearchResponse > LineSearchWithHttpInfo (string query, List<string> modes = null, List<string> serviceTypes = null)
        {
            // verify the required parameter 'query' is set
            if (query == null)
                throw new ApiException(400, "Missing required parameter 'query' when calling LineApi->LineSearch");

            var localVarPath = "/Line/Search/{query}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (query != null) localVarPathParams.Add("query", this.Configuration.ApiClient.ParameterToString(query)); // path parameter
            if (modes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "modes", modes)); // query parameter
            if (serviceTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "serviceTypes", serviceTypes)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LineSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TflApiPresentationEntitiesRouteSearchResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TflApiPresentationEntitiesRouteSearchResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TflApiPresentationEntitiesRouteSearchResponse)));
        }

        /// <summary>
        /// Search for lines or routes matching the query string 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Search term e.g victoria</param>
        /// <param name="modes">Optionally filter by the specified modes (optional)</param>
        /// <param name="serviceTypes">A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)</param>
        /// <returns>Task of TflApiPresentationEntitiesRouteSearchResponse</returns>
        public async System.Threading.Tasks.Task<TflApiPresentationEntitiesRouteSearchResponse> LineSearchAsync (string query, List<string> modes = null, List<string> serviceTypes = null)
        {
             ApiResponse<TflApiPresentationEntitiesRouteSearchResponse> localVarResponse = await LineSearchAsyncWithHttpInfo(query, modes, serviceTypes);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search for lines or routes matching the query string 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Search term e.g victoria</param>
        /// <param name="modes">Optionally filter by the specified modes (optional)</param>
        /// <param name="serviceTypes">A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)</param>
        /// <returns>Task of ApiResponse (TflApiPresentationEntitiesRouteSearchResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TflApiPresentationEntitiesRouteSearchResponse>> LineSearchAsyncWithHttpInfo (string query, List<string> modes = null, List<string> serviceTypes = null)
        {
            // verify the required parameter 'query' is set
            if (query == null)
                throw new ApiException(400, "Missing required parameter 'query' when calling LineApi->LineSearch");

            var localVarPath = "/Line/Search/{query}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (query != null) localVarPathParams.Add("query", this.Configuration.ApiClient.ParameterToString(query)); // path parameter
            if (modes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "modes", modes)); // query parameter
            if (serviceTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "serviceTypes", serviceTypes)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LineSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TflApiPresentationEntitiesRouteSearchResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TflApiPresentationEntitiesRouteSearchResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TflApiPresentationEntitiesRouteSearchResponse)));
        }

        /// <summary>
        /// Gets the line status for given line ids during the provided dates e.g Minor Delays 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.</param>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="detail">Include details of the disruptions that are causing the line status including the affected stops and routes (optional)</param>
        /// <param name="dateRangeStartDate"> (optional)</param>
        /// <param name="dateRangeEndDate"> (optional)</param>
        /// <returns>List&lt;TflApiPresentationEntitiesLine&gt;</returns>
        public List<TflApiPresentationEntitiesLine> LineStatus (List<string> ids, string startDate, string endDate, bool? detail = null, DateTime? dateRangeStartDate = null, DateTime? dateRangeEndDate = null)
        {
             ApiResponse<List<TflApiPresentationEntitiesLine>> localVarResponse = LineStatusWithHttpInfo(ids, startDate, endDate, detail, dateRangeStartDate, dateRangeEndDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the line status for given line ids during the provided dates e.g Minor Delays 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.</param>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="detail">Include details of the disruptions that are causing the line status including the affected stops and routes (optional)</param>
        /// <param name="dateRangeStartDate"> (optional)</param>
        /// <param name="dateRangeEndDate"> (optional)</param>
        /// <returns>ApiResponse of List&lt;TflApiPresentationEntitiesLine&gt;</returns>
        public ApiResponse< List<TflApiPresentationEntitiesLine> > LineStatusWithHttpInfo (List<string> ids, string startDate, string endDate, bool? detail = null, DateTime? dateRangeStartDate = null, DateTime? dateRangeEndDate = null)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling LineApi->LineStatus");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling LineApi->LineStatus");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling LineApi->LineStatus");

            var localVarPath = "/Line/{ids}/Status/{StartDate}/to/{EndDate}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarPathParams.Add("ids", this.Configuration.ApiClient.ParameterToString(ids)); // path parameter
            if (detail != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "detail", detail)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (dateRangeStartDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dateRange.startDate", dateRangeStartDate)); // query parameter
            if (dateRangeEndDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dateRange.endDate", dateRangeEndDate)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LineStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TflApiPresentationEntitiesLine>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TflApiPresentationEntitiesLine>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TflApiPresentationEntitiesLine>)));
        }

        /// <summary>
        /// Gets the line status for given line ids during the provided dates e.g Minor Delays 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.</param>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="detail">Include details of the disruptions that are causing the line status including the affected stops and routes (optional)</param>
        /// <param name="dateRangeStartDate"> (optional)</param>
        /// <param name="dateRangeEndDate"> (optional)</param>
        /// <returns>Task of List&lt;TflApiPresentationEntitiesLine&gt;</returns>
        public async System.Threading.Tasks.Task<List<TflApiPresentationEntitiesLine>> LineStatusAsync (List<string> ids, string startDate, string endDate, bool? detail = null, DateTime? dateRangeStartDate = null, DateTime? dateRangeEndDate = null)
        {
             ApiResponse<List<TflApiPresentationEntitiesLine>> localVarResponse = await LineStatusAsyncWithHttpInfo(ids, startDate, endDate, detail, dateRangeStartDate, dateRangeEndDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the line status for given line ids during the provided dates e.g Minor Delays 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.</param>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="detail">Include details of the disruptions that are causing the line status including the affected stops and routes (optional)</param>
        /// <param name="dateRangeStartDate"> (optional)</param>
        /// <param name="dateRangeEndDate"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TflApiPresentationEntitiesLine&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesLine>>> LineStatusAsyncWithHttpInfo (List<string> ids, string startDate, string endDate, bool? detail = null, DateTime? dateRangeStartDate = null, DateTime? dateRangeEndDate = null)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling LineApi->LineStatus");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling LineApi->LineStatus");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling LineApi->LineStatus");

            var localVarPath = "/Line/{ids}/Status/{StartDate}/to/{EndDate}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarPathParams.Add("ids", this.Configuration.ApiClient.ParameterToString(ids)); // path parameter
            if (detail != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "detail", detail)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (dateRangeStartDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dateRange.startDate", dateRangeStartDate)); // query parameter
            if (dateRangeEndDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dateRange.endDate", dateRangeEndDate)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LineStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TflApiPresentationEntitiesLine>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TflApiPresentationEntitiesLine>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TflApiPresentationEntitiesLine>)));
        }

        /// <summary>
        /// Gets the line status of for given line ids e.g Minor Delays 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.</param>
        /// <param name="detail">Include details of the disruptions that are causing the line status including the affected stops and routes (optional)</param>
        /// <returns>List&lt;TflApiPresentationEntitiesLine&gt;</returns>
        public List<TflApiPresentationEntitiesLine> LineStatusByIds (List<string> ids, bool? detail = null)
        {
             ApiResponse<List<TflApiPresentationEntitiesLine>> localVarResponse = LineStatusByIdsWithHttpInfo(ids, detail);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the line status of for given line ids e.g Minor Delays 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.</param>
        /// <param name="detail">Include details of the disruptions that are causing the line status including the affected stops and routes (optional)</param>
        /// <returns>ApiResponse of List&lt;TflApiPresentationEntitiesLine&gt;</returns>
        public ApiResponse< List<TflApiPresentationEntitiesLine> > LineStatusByIdsWithHttpInfo (List<string> ids, bool? detail = null)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling LineApi->LineStatusByIds");

            var localVarPath = "/Line/{ids}/Status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarPathParams.Add("ids", this.Configuration.ApiClient.ParameterToString(ids)); // path parameter
            if (detail != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "detail", detail)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LineStatusByIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TflApiPresentationEntitiesLine>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TflApiPresentationEntitiesLine>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TflApiPresentationEntitiesLine>)));
        }

        /// <summary>
        /// Gets the line status of for given line ids e.g Minor Delays 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.</param>
        /// <param name="detail">Include details of the disruptions that are causing the line status including the affected stops and routes (optional)</param>
        /// <returns>Task of List&lt;TflApiPresentationEntitiesLine&gt;</returns>
        public async System.Threading.Tasks.Task<List<TflApiPresentationEntitiesLine>> LineStatusByIdsAsync (List<string> ids, bool? detail = null)
        {
             ApiResponse<List<TflApiPresentationEntitiesLine>> localVarResponse = await LineStatusByIdsAsyncWithHttpInfo(ids, detail);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the line status of for given line ids e.g Minor Delays 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.</param>
        /// <param name="detail">Include details of the disruptions that are causing the line status including the affected stops and routes (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TflApiPresentationEntitiesLine&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesLine>>> LineStatusByIdsAsyncWithHttpInfo (List<string> ids, bool? detail = null)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling LineApi->LineStatusByIds");

            var localVarPath = "/Line/{ids}/Status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarPathParams.Add("ids", this.Configuration.ApiClient.ParameterToString(ids)); // path parameter
            if (detail != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "detail", detail)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LineStatusByIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TflApiPresentationEntitiesLine>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TflApiPresentationEntitiesLine>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TflApiPresentationEntitiesLine>)));
        }

        /// <summary>
        /// Gets the line status of for all lines for the given modes 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modes">A comma-separated list of modes to filter by. e.g. tube,dlr</param>
        /// <param name="detail">Include details of the disruptions that are causing the line status including the affected stops and routes (optional)</param>
        /// <param name="severityLevel">If specified, ensures that only those line status(es) are returned within the lines that have disruptions with the matching severity level. (optional)</param>
        /// <returns>List&lt;TflApiPresentationEntitiesLine&gt;</returns>
        public List<TflApiPresentationEntitiesLine> LineStatusByMode (List<string> modes, bool? detail = null, string severityLevel = null)
        {
             ApiResponse<List<TflApiPresentationEntitiesLine>> localVarResponse = LineStatusByModeWithHttpInfo(modes, detail, severityLevel);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the line status of for all lines for the given modes 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modes">A comma-separated list of modes to filter by. e.g. tube,dlr</param>
        /// <param name="detail">Include details of the disruptions that are causing the line status including the affected stops and routes (optional)</param>
        /// <param name="severityLevel">If specified, ensures that only those line status(es) are returned within the lines that have disruptions with the matching severity level. (optional)</param>
        /// <returns>ApiResponse of List&lt;TflApiPresentationEntitiesLine&gt;</returns>
        public ApiResponse< List<TflApiPresentationEntitiesLine> > LineStatusByModeWithHttpInfo (List<string> modes, bool? detail = null, string severityLevel = null)
        {
            // verify the required parameter 'modes' is set
            if (modes == null)
                throw new ApiException(400, "Missing required parameter 'modes' when calling LineApi->LineStatusByMode");

            var localVarPath = "/Line/Mode/{modes}/Status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modes != null) localVarPathParams.Add("modes", this.Configuration.ApiClient.ParameterToString(modes)); // path parameter
            if (detail != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "detail", detail)); // query parameter
            if (severityLevel != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "severityLevel", severityLevel)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LineStatusByMode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TflApiPresentationEntitiesLine>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TflApiPresentationEntitiesLine>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TflApiPresentationEntitiesLine>)));
        }

        /// <summary>
        /// Gets the line status of for all lines for the given modes 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modes">A comma-separated list of modes to filter by. e.g. tube,dlr</param>
        /// <param name="detail">Include details of the disruptions that are causing the line status including the affected stops and routes (optional)</param>
        /// <param name="severityLevel">If specified, ensures that only those line status(es) are returned within the lines that have disruptions with the matching severity level. (optional)</param>
        /// <returns>Task of List&lt;TflApiPresentationEntitiesLine&gt;</returns>
        public async System.Threading.Tasks.Task<List<TflApiPresentationEntitiesLine>> LineStatusByModeAsync (List<string> modes, bool? detail = null, string severityLevel = null)
        {
             ApiResponse<List<TflApiPresentationEntitiesLine>> localVarResponse = await LineStatusByModeAsyncWithHttpInfo(modes, detail, severityLevel);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the line status of for all lines for the given modes 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modes">A comma-separated list of modes to filter by. e.g. tube,dlr</param>
        /// <param name="detail">Include details of the disruptions that are causing the line status including the affected stops and routes (optional)</param>
        /// <param name="severityLevel">If specified, ensures that only those line status(es) are returned within the lines that have disruptions with the matching severity level. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TflApiPresentationEntitiesLine&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesLine>>> LineStatusByModeAsyncWithHttpInfo (List<string> modes, bool? detail = null, string severityLevel = null)
        {
            // verify the required parameter 'modes' is set
            if (modes == null)
                throw new ApiException(400, "Missing required parameter 'modes' when calling LineApi->LineStatusByMode");

            var localVarPath = "/Line/Mode/{modes}/Status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modes != null) localVarPathParams.Add("modes", this.Configuration.ApiClient.ParameterToString(modes)); // path parameter
            if (detail != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "detail", detail)); // query parameter
            if (severityLevel != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "severityLevel", severityLevel)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LineStatusByMode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TflApiPresentationEntitiesLine>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TflApiPresentationEntitiesLine>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TflApiPresentationEntitiesLine>)));
        }

        /// <summary>
        /// Gets the line status for all lines with a given severity              A list of valid severity codes can be obtained from a call to Line/Meta/Severity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="severity">The level of severity (eg: a number from 0 to 14)</param>
        /// <returns>List&lt;TflApiPresentationEntitiesLine&gt;</returns>
        public List<TflApiPresentationEntitiesLine> LineStatusBySeverity (int? severity)
        {
             ApiResponse<List<TflApiPresentationEntitiesLine>> localVarResponse = LineStatusBySeverityWithHttpInfo(severity);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the line status for all lines with a given severity              A list of valid severity codes can be obtained from a call to Line/Meta/Severity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="severity">The level of severity (eg: a number from 0 to 14)</param>
        /// <returns>ApiResponse of List&lt;TflApiPresentationEntitiesLine&gt;</returns>
        public ApiResponse< List<TflApiPresentationEntitiesLine> > LineStatusBySeverityWithHttpInfo (int? severity)
        {
            // verify the required parameter 'severity' is set
            if (severity == null)
                throw new ApiException(400, "Missing required parameter 'severity' when calling LineApi->LineStatusBySeverity");

            var localVarPath = "/Line/Status/{severity}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (severity != null) localVarPathParams.Add("severity", this.Configuration.ApiClient.ParameterToString(severity)); // path parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LineStatusBySeverity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TflApiPresentationEntitiesLine>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TflApiPresentationEntitiesLine>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TflApiPresentationEntitiesLine>)));
        }

        /// <summary>
        /// Gets the line status for all lines with a given severity              A list of valid severity codes can be obtained from a call to Line/Meta/Severity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="severity">The level of severity (eg: a number from 0 to 14)</param>
        /// <returns>Task of List&lt;TflApiPresentationEntitiesLine&gt;</returns>
        public async System.Threading.Tasks.Task<List<TflApiPresentationEntitiesLine>> LineStatusBySeverityAsync (int? severity)
        {
             ApiResponse<List<TflApiPresentationEntitiesLine>> localVarResponse = await LineStatusBySeverityAsyncWithHttpInfo(severity);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the line status for all lines with a given severity              A list of valid severity codes can be obtained from a call to Line/Meta/Severity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="severity">The level of severity (eg: a number from 0 to 14)</param>
        /// <returns>Task of ApiResponse (List&lt;TflApiPresentationEntitiesLine&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesLine>>> LineStatusBySeverityAsyncWithHttpInfo (int? severity)
        {
            // verify the required parameter 'severity' is set
            if (severity == null)
                throw new ApiException(400, "Missing required parameter 'severity' when calling LineApi->LineStatusBySeverity");

            var localVarPath = "/Line/Status/{severity}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (severity != null) localVarPathParams.Add("severity", this.Configuration.ApiClient.ParameterToString(severity)); // path parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LineStatusBySeverity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TflApiPresentationEntitiesLine>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TflApiPresentationEntitiesLine>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TflApiPresentationEntitiesLine>)));
        }

        /// <summary>
        /// Gets a list of the stations that serve the given line id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A single line id e.g. victoria</param>
        /// <param name="tflOperatedNationalRailStationsOnly">If the national-rail line is requested, this flag will filter the national rail stations so that only those operated by TfL are returned (optional)</param>
        /// <returns>List&lt;TflApiPresentationEntitiesStopPoint&gt;</returns>
        public List<TflApiPresentationEntitiesStopPoint> LineStopPoints (string id, bool? tflOperatedNationalRailStationsOnly = null)
        {
             ApiResponse<List<TflApiPresentationEntitiesStopPoint>> localVarResponse = LineStopPointsWithHttpInfo(id, tflOperatedNationalRailStationsOnly);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of the stations that serve the given line id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A single line id e.g. victoria</param>
        /// <param name="tflOperatedNationalRailStationsOnly">If the national-rail line is requested, this flag will filter the national rail stations so that only those operated by TfL are returned (optional)</param>
        /// <returns>ApiResponse of List&lt;TflApiPresentationEntitiesStopPoint&gt;</returns>
        public ApiResponse< List<TflApiPresentationEntitiesStopPoint> > LineStopPointsWithHttpInfo (string id, bool? tflOperatedNationalRailStationsOnly = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LineApi->LineStopPoints");

            var localVarPath = "/Line/{id}/StopPoints";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (tflOperatedNationalRailStationsOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tflOperatedNationalRailStationsOnly", tflOperatedNationalRailStationsOnly)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LineStopPoints", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TflApiPresentationEntitiesStopPoint>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TflApiPresentationEntitiesStopPoint>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TflApiPresentationEntitiesStopPoint>)));
        }

        /// <summary>
        /// Gets a list of the stations that serve the given line id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A single line id e.g. victoria</param>
        /// <param name="tflOperatedNationalRailStationsOnly">If the national-rail line is requested, this flag will filter the national rail stations so that only those operated by TfL are returned (optional)</param>
        /// <returns>Task of List&lt;TflApiPresentationEntitiesStopPoint&gt;</returns>
        public async System.Threading.Tasks.Task<List<TflApiPresentationEntitiesStopPoint>> LineStopPointsAsync (string id, bool? tflOperatedNationalRailStationsOnly = null)
        {
             ApiResponse<List<TflApiPresentationEntitiesStopPoint>> localVarResponse = await LineStopPointsAsyncWithHttpInfo(id, tflOperatedNationalRailStationsOnly);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of the stations that serve the given line id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A single line id e.g. victoria</param>
        /// <param name="tflOperatedNationalRailStationsOnly">If the national-rail line is requested, this flag will filter the national rail stations so that only those operated by TfL are returned (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TflApiPresentationEntitiesStopPoint&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesStopPoint>>> LineStopPointsAsyncWithHttpInfo (string id, bool? tflOperatedNationalRailStationsOnly = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LineApi->LineStopPoints");

            var localVarPath = "/Line/{id}/StopPoints";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (tflOperatedNationalRailStationsOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tflOperatedNationalRailStationsOnly", tflOperatedNationalRailStationsOnly)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LineStopPoints", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TflApiPresentationEntitiesStopPoint>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TflApiPresentationEntitiesStopPoint>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TflApiPresentationEntitiesStopPoint>)));
        }

        /// <summary>
        /// Gets the timetable for a specified station on the give line 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromStopPointId">The originating station&#39;s stop point id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)</param>
        /// <param name="id">A single line id e.g. victoria</param>
        /// <returns>TflApiPresentationEntitiesTimetableResponse</returns>
        public TflApiPresentationEntitiesTimetableResponse LineTimetable (string fromStopPointId, string id)
        {
             ApiResponse<TflApiPresentationEntitiesTimetableResponse> localVarResponse = LineTimetableWithHttpInfo(fromStopPointId, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the timetable for a specified station on the give line 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromStopPointId">The originating station&#39;s stop point id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)</param>
        /// <param name="id">A single line id e.g. victoria</param>
        /// <returns>ApiResponse of TflApiPresentationEntitiesTimetableResponse</returns>
        public ApiResponse< TflApiPresentationEntitiesTimetableResponse > LineTimetableWithHttpInfo (string fromStopPointId, string id)
        {
            // verify the required parameter 'fromStopPointId' is set
            if (fromStopPointId == null)
                throw new ApiException(400, "Missing required parameter 'fromStopPointId' when calling LineApi->LineTimetable");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LineApi->LineTimetable");

            var localVarPath = "/Line/{id}/Timetable/{fromStopPointId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fromStopPointId != null) localVarPathParams.Add("fromStopPointId", this.Configuration.ApiClient.ParameterToString(fromStopPointId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LineTimetable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TflApiPresentationEntitiesTimetableResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TflApiPresentationEntitiesTimetableResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TflApiPresentationEntitiesTimetableResponse)));
        }

        /// <summary>
        /// Gets the timetable for a specified station on the give line 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromStopPointId">The originating station&#39;s stop point id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)</param>
        /// <param name="id">A single line id e.g. victoria</param>
        /// <returns>Task of TflApiPresentationEntitiesTimetableResponse</returns>
        public async System.Threading.Tasks.Task<TflApiPresentationEntitiesTimetableResponse> LineTimetableAsync (string fromStopPointId, string id)
        {
             ApiResponse<TflApiPresentationEntitiesTimetableResponse> localVarResponse = await LineTimetableAsyncWithHttpInfo(fromStopPointId, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the timetable for a specified station on the give line 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromStopPointId">The originating station&#39;s stop point id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)</param>
        /// <param name="id">A single line id e.g. victoria</param>
        /// <returns>Task of ApiResponse (TflApiPresentationEntitiesTimetableResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TflApiPresentationEntitiesTimetableResponse>> LineTimetableAsyncWithHttpInfo (string fromStopPointId, string id)
        {
            // verify the required parameter 'fromStopPointId' is set
            if (fromStopPointId == null)
                throw new ApiException(400, "Missing required parameter 'fromStopPointId' when calling LineApi->LineTimetable");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LineApi->LineTimetable");

            var localVarPath = "/Line/{id}/Timetable/{fromStopPointId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fromStopPointId != null) localVarPathParams.Add("fromStopPointId", this.Configuration.ApiClient.ParameterToString(fromStopPointId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LineTimetable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TflApiPresentationEntitiesTimetableResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TflApiPresentationEntitiesTimetableResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TflApiPresentationEntitiesTimetableResponse)));
        }

        /// <summary>
        /// Gets the timetable for a specified station on the give line with specified destination 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromStopPointId">The originating station&#39;s stop point id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)</param>
        /// <param name="id">A single line id e.g. victoria</param>
        /// <param name="toStopPointId">The destination stations&#39;s Naptan code</param>
        /// <returns>TflApiPresentationEntitiesTimetableResponse</returns>
        public TflApiPresentationEntitiesTimetableResponse LineTimetableTo (string fromStopPointId, string id, string toStopPointId)
        {
             ApiResponse<TflApiPresentationEntitiesTimetableResponse> localVarResponse = LineTimetableToWithHttpInfo(fromStopPointId, id, toStopPointId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the timetable for a specified station on the give line with specified destination 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromStopPointId">The originating station&#39;s stop point id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)</param>
        /// <param name="id">A single line id e.g. victoria</param>
        /// <param name="toStopPointId">The destination stations&#39;s Naptan code</param>
        /// <returns>ApiResponse of TflApiPresentationEntitiesTimetableResponse</returns>
        public ApiResponse< TflApiPresentationEntitiesTimetableResponse > LineTimetableToWithHttpInfo (string fromStopPointId, string id, string toStopPointId)
        {
            // verify the required parameter 'fromStopPointId' is set
            if (fromStopPointId == null)
                throw new ApiException(400, "Missing required parameter 'fromStopPointId' when calling LineApi->LineTimetableTo");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LineApi->LineTimetableTo");
            // verify the required parameter 'toStopPointId' is set
            if (toStopPointId == null)
                throw new ApiException(400, "Missing required parameter 'toStopPointId' when calling LineApi->LineTimetableTo");

            var localVarPath = "/Line/{id}/Timetable/{fromStopPointId}/to/{toStopPointId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fromStopPointId != null) localVarPathParams.Add("fromStopPointId", this.Configuration.ApiClient.ParameterToString(fromStopPointId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (toStopPointId != null) localVarPathParams.Add("toStopPointId", this.Configuration.ApiClient.ParameterToString(toStopPointId)); // path parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LineTimetableTo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TflApiPresentationEntitiesTimetableResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TflApiPresentationEntitiesTimetableResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TflApiPresentationEntitiesTimetableResponse)));
        }

        /// <summary>
        /// Gets the timetable for a specified station on the give line with specified destination 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromStopPointId">The originating station&#39;s stop point id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)</param>
        /// <param name="id">A single line id e.g. victoria</param>
        /// <param name="toStopPointId">The destination stations&#39;s Naptan code</param>
        /// <returns>Task of TflApiPresentationEntitiesTimetableResponse</returns>
        public async System.Threading.Tasks.Task<TflApiPresentationEntitiesTimetableResponse> LineTimetableToAsync (string fromStopPointId, string id, string toStopPointId)
        {
             ApiResponse<TflApiPresentationEntitiesTimetableResponse> localVarResponse = await LineTimetableToAsyncWithHttpInfo(fromStopPointId, id, toStopPointId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the timetable for a specified station on the give line with specified destination 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromStopPointId">The originating station&#39;s stop point id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)</param>
        /// <param name="id">A single line id e.g. victoria</param>
        /// <param name="toStopPointId">The destination stations&#39;s Naptan code</param>
        /// <returns>Task of ApiResponse (TflApiPresentationEntitiesTimetableResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TflApiPresentationEntitiesTimetableResponse>> LineTimetableToAsyncWithHttpInfo (string fromStopPointId, string id, string toStopPointId)
        {
            // verify the required parameter 'fromStopPointId' is set
            if (fromStopPointId == null)
                throw new ApiException(400, "Missing required parameter 'fromStopPointId' when calling LineApi->LineTimetableTo");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LineApi->LineTimetableTo");
            // verify the required parameter 'toStopPointId' is set
            if (toStopPointId == null)
                throw new ApiException(400, "Missing required parameter 'toStopPointId' when calling LineApi->LineTimetableTo");

            var localVarPath = "/Line/{id}/Timetable/{fromStopPointId}/to/{toStopPointId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fromStopPointId != null) localVarPathParams.Add("fromStopPointId", this.Configuration.ApiClient.ParameterToString(fromStopPointId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (toStopPointId != null) localVarPathParams.Add("toStopPointId", this.Configuration.ApiClient.ParameterToString(toStopPointId)); // path parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LineTimetableTo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TflApiPresentationEntitiesTimetableResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TflApiPresentationEntitiesTimetableResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TflApiPresentationEntitiesTimetableResponse)));
        }

    }
}
