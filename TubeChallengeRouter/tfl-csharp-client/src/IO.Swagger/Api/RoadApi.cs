/* 
 * Transport for London Unified API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRoadApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Gets a list of disrupted streets. If no date filters are provided, current disruptions are returned.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Optional, the start time to filter on.</param>
        /// <param name="endDate">Optional, The end time to filter on.</param>
        /// <returns>SystemObject</returns>
        SystemObject RoadDisruptedStreets (DateTime? startDate, DateTime? endDate);

        /// <summary>
        /// Gets a list of disrupted streets. If no date filters are provided, current disruptions are returned.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Optional, the start time to filter on.</param>
        /// <param name="endDate">Optional, The end time to filter on.</param>
        /// <returns>ApiResponse of SystemObject</returns>
        ApiResponse<SystemObject> RoadDisruptedStreetsWithHttpInfo (DateTime? startDate, DateTime? endDate);
        /// <summary>
        /// Get active disruptions, filtered by road ids
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Comma-separated list of road identifiers e.g. \&quot;A406, A2\&quot; use all for all to ignore id filter (a full list of supported road identifiers can be found at the /Road/ endpoint)</param>
        /// <param name="stripContent">Optional, defaults to false. When true, removes every property/node except for id, point, severity, severityDescription, startDate, endDate, corridor details, location, comments and streets (optional)</param>
        /// <param name="severities">an optional list of Severity names to filter on (a valid list of severities can be obtained from the /Road/Meta/severities endpoint) (optional)</param>
        /// <param name="categories">an optional list of category names to filter on (a valid list of categories can be obtained from the /Road/Meta/categories endpoint) (optional)</param>
        /// <param name="closures">Optional, defaults to true. When true, always includes disruptions that have road closures, regardless of the severity filter. When false, the severity filter works as normal. (optional)</param>
        /// <returns>List&lt;TflApiPresentationEntitiesRoadDisruption&gt;</returns>
        List<TflApiPresentationEntitiesRoadDisruption> RoadDisruption (List<string> ids, bool? stripContent = null, List<string> severities = null, List<string> categories = null, bool? closures = null);

        /// <summary>
        /// Get active disruptions, filtered by road ids
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Comma-separated list of road identifiers e.g. \&quot;A406, A2\&quot; use all for all to ignore id filter (a full list of supported road identifiers can be found at the /Road/ endpoint)</param>
        /// <param name="stripContent">Optional, defaults to false. When true, removes every property/node except for id, point, severity, severityDescription, startDate, endDate, corridor details, location, comments and streets (optional)</param>
        /// <param name="severities">an optional list of Severity names to filter on (a valid list of severities can be obtained from the /Road/Meta/severities endpoint) (optional)</param>
        /// <param name="categories">an optional list of category names to filter on (a valid list of categories can be obtained from the /Road/Meta/categories endpoint) (optional)</param>
        /// <param name="closures">Optional, defaults to true. When true, always includes disruptions that have road closures, regardless of the severity filter. When false, the severity filter works as normal. (optional)</param>
        /// <returns>ApiResponse of List&lt;TflApiPresentationEntitiesRoadDisruption&gt;</returns>
        ApiResponse<List<TflApiPresentationEntitiesRoadDisruption>> RoadDisruptionWithHttpInfo (List<string> ids, bool? stripContent = null, List<string> severities = null, List<string> categories = null, bool? closures = null);
        /// <summary>
        /// Gets a list of active disruptions filtered by disruption Ids.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="disruptionIds">Comma-separated list of disruption identifiers to filter by.</param>
        /// <param name="stripContent">Optional, defaults to false. When true, removes every property/node except for id, point, severity, severityDescription, startDate, endDate, corridor details, location and comments. (optional)</param>
        /// <returns>TflApiPresentationEntitiesRoadDisruption</returns>
        TflApiPresentationEntitiesRoadDisruption RoadDisruptionById (List<string> disruptionIds, bool? stripContent = null);

        /// <summary>
        /// Gets a list of active disruptions filtered by disruption Ids.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="disruptionIds">Comma-separated list of disruption identifiers to filter by.</param>
        /// <param name="stripContent">Optional, defaults to false. When true, removes every property/node except for id, point, severity, severityDescription, startDate, endDate, corridor details, location and comments. (optional)</param>
        /// <returns>ApiResponse of TflApiPresentationEntitiesRoadDisruption</returns>
        ApiResponse<TflApiPresentationEntitiesRoadDisruption> RoadDisruptionByIdWithHttpInfo (List<string> disruptionIds, bool? stripContent = null);
        /// <summary>
        /// Gets all roads managed by TfL
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TflApiPresentationEntitiesRoadCorridor&gt;</returns>
        List<TflApiPresentationEntitiesRoadCorridor> RoadGet ();

        /// <summary>
        /// Gets all roads managed by TfL
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TflApiPresentationEntitiesRoadCorridor&gt;</returns>
        ApiResponse<List<TflApiPresentationEntitiesRoadCorridor>> RoadGetWithHttpInfo ();
        /// <summary>
        /// Gets the road with the specified id (e.g. A1)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Comma-separated list of road identifiers e.g. \&quot;A406, A2\&quot; (a full list of supported road identifiers can be found at the /Road/ endpoint)</param>
        /// <returns>List&lt;TflApiPresentationEntitiesRoadCorridor&gt;</returns>
        List<TflApiPresentationEntitiesRoadCorridor> RoadGet_0 (List<string> ids);

        /// <summary>
        /// Gets the road with the specified id (e.g. A1)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Comma-separated list of road identifiers e.g. \&quot;A406, A2\&quot; (a full list of supported road identifiers can be found at the /Road/ endpoint)</param>
        /// <returns>ApiResponse of List&lt;TflApiPresentationEntitiesRoadCorridor&gt;</returns>
        ApiResponse<List<TflApiPresentationEntitiesRoadCorridor>> RoadGet_0WithHttpInfo (List<string> ids);
        /// <summary>
        /// Gets a list of valid RoadDisruption categories
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        List<string> RoadMetaCategories ();

        /// <summary>
        /// Gets a list of valid RoadDisruption categories
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> RoadMetaCategoriesWithHttpInfo ();
        /// <summary>
        /// Gets a list of valid RoadDisruption severity codes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TflApiPresentationEntitiesStatusSeverity&gt;</returns>
        List<TflApiPresentationEntitiesStatusSeverity> RoadMetaSeverities ();

        /// <summary>
        /// Gets a list of valid RoadDisruption severity codes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TflApiPresentationEntitiesStatusSeverity&gt;</returns>
        ApiResponse<List<TflApiPresentationEntitiesStatusSeverity>> RoadMetaSeveritiesWithHttpInfo ();
        /// <summary>
        /// Gets the specified roads with the status aggregated over the date range specified, or now until the end of today if no dates are passed.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Comma-separated list of road identifiers e.g. \&quot;A406, A2\&quot; or use \&quot;all\&quot; to ignore id filter (a full list of supported road identifiers can be found at the /Road/ endpoint)</param>
        /// <param name="dateRangeNullableStartDate"> (optional)</param>
        /// <param name="dateRangeNullableEndDate"> (optional)</param>
        /// <returns>List&lt;TflApiPresentationEntitiesRoadCorridor&gt;</returns>
        List<TflApiPresentationEntitiesRoadCorridor> RoadStatus (List<string> ids, DateTime? dateRangeNullableStartDate = null, DateTime? dateRangeNullableEndDate = null);

        /// <summary>
        /// Gets the specified roads with the status aggregated over the date range specified, or now until the end of today if no dates are passed.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Comma-separated list of road identifiers e.g. \&quot;A406, A2\&quot; or use \&quot;all\&quot; to ignore id filter (a full list of supported road identifiers can be found at the /Road/ endpoint)</param>
        /// <param name="dateRangeNullableStartDate"> (optional)</param>
        /// <param name="dateRangeNullableEndDate"> (optional)</param>
        /// <returns>ApiResponse of List&lt;TflApiPresentationEntitiesRoadCorridor&gt;</returns>
        ApiResponse<List<TflApiPresentationEntitiesRoadCorridor>> RoadStatusWithHttpInfo (List<string> ids, DateTime? dateRangeNullableStartDate = null, DateTime? dateRangeNullableEndDate = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Gets a list of disrupted streets. If no date filters are provided, current disruptions are returned.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Optional, the start time to filter on.</param>
        /// <param name="endDate">Optional, The end time to filter on.</param>
        /// <returns>Task of SystemObject</returns>
        System.Threading.Tasks.Task<SystemObject> RoadDisruptedStreetsAsync (DateTime? startDate, DateTime? endDate);

        /// <summary>
        /// Gets a list of disrupted streets. If no date filters are provided, current disruptions are returned.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Optional, the start time to filter on.</param>
        /// <param name="endDate">Optional, The end time to filter on.</param>
        /// <returns>Task of ApiResponse (SystemObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<SystemObject>> RoadDisruptedStreetsAsyncWithHttpInfo (DateTime? startDate, DateTime? endDate);
        /// <summary>
        /// Get active disruptions, filtered by road ids
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Comma-separated list of road identifiers e.g. \&quot;A406, A2\&quot; use all for all to ignore id filter (a full list of supported road identifiers can be found at the /Road/ endpoint)</param>
        /// <param name="stripContent">Optional, defaults to false. When true, removes every property/node except for id, point, severity, severityDescription, startDate, endDate, corridor details, location, comments and streets (optional)</param>
        /// <param name="severities">an optional list of Severity names to filter on (a valid list of severities can be obtained from the /Road/Meta/severities endpoint) (optional)</param>
        /// <param name="categories">an optional list of category names to filter on (a valid list of categories can be obtained from the /Road/Meta/categories endpoint) (optional)</param>
        /// <param name="closures">Optional, defaults to true. When true, always includes disruptions that have road closures, regardless of the severity filter. When false, the severity filter works as normal. (optional)</param>
        /// <returns>Task of List&lt;TflApiPresentationEntitiesRoadDisruption&gt;</returns>
        System.Threading.Tasks.Task<List<TflApiPresentationEntitiesRoadDisruption>> RoadDisruptionAsync (List<string> ids, bool? stripContent = null, List<string> severities = null, List<string> categories = null, bool? closures = null);

        /// <summary>
        /// Get active disruptions, filtered by road ids
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Comma-separated list of road identifiers e.g. \&quot;A406, A2\&quot; use all for all to ignore id filter (a full list of supported road identifiers can be found at the /Road/ endpoint)</param>
        /// <param name="stripContent">Optional, defaults to false. When true, removes every property/node except for id, point, severity, severityDescription, startDate, endDate, corridor details, location, comments and streets (optional)</param>
        /// <param name="severities">an optional list of Severity names to filter on (a valid list of severities can be obtained from the /Road/Meta/severities endpoint) (optional)</param>
        /// <param name="categories">an optional list of category names to filter on (a valid list of categories can be obtained from the /Road/Meta/categories endpoint) (optional)</param>
        /// <param name="closures">Optional, defaults to true. When true, always includes disruptions that have road closures, regardless of the severity filter. When false, the severity filter works as normal. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TflApiPresentationEntitiesRoadDisruption&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesRoadDisruption>>> RoadDisruptionAsyncWithHttpInfo (List<string> ids, bool? stripContent = null, List<string> severities = null, List<string> categories = null, bool? closures = null);
        /// <summary>
        /// Gets a list of active disruptions filtered by disruption Ids.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="disruptionIds">Comma-separated list of disruption identifiers to filter by.</param>
        /// <param name="stripContent">Optional, defaults to false. When true, removes every property/node except for id, point, severity, severityDescription, startDate, endDate, corridor details, location and comments. (optional)</param>
        /// <returns>Task of TflApiPresentationEntitiesRoadDisruption</returns>
        System.Threading.Tasks.Task<TflApiPresentationEntitiesRoadDisruption> RoadDisruptionByIdAsync (List<string> disruptionIds, bool? stripContent = null);

        /// <summary>
        /// Gets a list of active disruptions filtered by disruption Ids.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="disruptionIds">Comma-separated list of disruption identifiers to filter by.</param>
        /// <param name="stripContent">Optional, defaults to false. When true, removes every property/node except for id, point, severity, severityDescription, startDate, endDate, corridor details, location and comments. (optional)</param>
        /// <returns>Task of ApiResponse (TflApiPresentationEntitiesRoadDisruption)</returns>
        System.Threading.Tasks.Task<ApiResponse<TflApiPresentationEntitiesRoadDisruption>> RoadDisruptionByIdAsyncWithHttpInfo (List<string> disruptionIds, bool? stripContent = null);
        /// <summary>
        /// Gets all roads managed by TfL
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TflApiPresentationEntitiesRoadCorridor&gt;</returns>
        System.Threading.Tasks.Task<List<TflApiPresentationEntitiesRoadCorridor>> RoadGetAsync ();

        /// <summary>
        /// Gets all roads managed by TfL
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TflApiPresentationEntitiesRoadCorridor&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesRoadCorridor>>> RoadGetAsyncWithHttpInfo ();
        /// <summary>
        /// Gets the road with the specified id (e.g. A1)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Comma-separated list of road identifiers e.g. \&quot;A406, A2\&quot; (a full list of supported road identifiers can be found at the /Road/ endpoint)</param>
        /// <returns>Task of List&lt;TflApiPresentationEntitiesRoadCorridor&gt;</returns>
        System.Threading.Tasks.Task<List<TflApiPresentationEntitiesRoadCorridor>> RoadGet_0Async (List<string> ids);

        /// <summary>
        /// Gets the road with the specified id (e.g. A1)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Comma-separated list of road identifiers e.g. \&quot;A406, A2\&quot; (a full list of supported road identifiers can be found at the /Road/ endpoint)</param>
        /// <returns>Task of ApiResponse (List&lt;TflApiPresentationEntitiesRoadCorridor&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesRoadCorridor>>> RoadGet_0AsyncWithHttpInfo (List<string> ids);
        /// <summary>
        /// Gets a list of valid RoadDisruption categories
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> RoadMetaCategoriesAsync ();

        /// <summary>
        /// Gets a list of valid RoadDisruption categories
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> RoadMetaCategoriesAsyncWithHttpInfo ();
        /// <summary>
        /// Gets a list of valid RoadDisruption severity codes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TflApiPresentationEntitiesStatusSeverity&gt;</returns>
        System.Threading.Tasks.Task<List<TflApiPresentationEntitiesStatusSeverity>> RoadMetaSeveritiesAsync ();

        /// <summary>
        /// Gets a list of valid RoadDisruption severity codes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TflApiPresentationEntitiesStatusSeverity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesStatusSeverity>>> RoadMetaSeveritiesAsyncWithHttpInfo ();
        /// <summary>
        /// Gets the specified roads with the status aggregated over the date range specified, or now until the end of today if no dates are passed.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Comma-separated list of road identifiers e.g. \&quot;A406, A2\&quot; or use \&quot;all\&quot; to ignore id filter (a full list of supported road identifiers can be found at the /Road/ endpoint)</param>
        /// <param name="dateRangeNullableStartDate"> (optional)</param>
        /// <param name="dateRangeNullableEndDate"> (optional)</param>
        /// <returns>Task of List&lt;TflApiPresentationEntitiesRoadCorridor&gt;</returns>
        System.Threading.Tasks.Task<List<TflApiPresentationEntitiesRoadCorridor>> RoadStatusAsync (List<string> ids, DateTime? dateRangeNullableStartDate = null, DateTime? dateRangeNullableEndDate = null);

        /// <summary>
        /// Gets the specified roads with the status aggregated over the date range specified, or now until the end of today if no dates are passed.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Comma-separated list of road identifiers e.g. \&quot;A406, A2\&quot; or use \&quot;all\&quot; to ignore id filter (a full list of supported road identifiers can be found at the /Road/ endpoint)</param>
        /// <param name="dateRangeNullableStartDate"> (optional)</param>
        /// <param name="dateRangeNullableEndDate"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TflApiPresentationEntitiesRoadCorridor&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesRoadCorridor>>> RoadStatusAsyncWithHttpInfo (List<string> ids, DateTime? dateRangeNullableStartDate = null, DateTime? dateRangeNullableEndDate = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RoadApi : IRoadApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RoadApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RoadApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RoadApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RoadApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Gets a list of disrupted streets. If no date filters are provided, current disruptions are returned. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Optional, the start time to filter on.</param>
        /// <param name="endDate">Optional, The end time to filter on.</param>
        /// <returns>SystemObject</returns>
        public SystemObject RoadDisruptedStreets (DateTime? startDate, DateTime? endDate)
        {
             ApiResponse<SystemObject> localVarResponse = RoadDisruptedStreetsWithHttpInfo(startDate, endDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of disrupted streets. If no date filters are provided, current disruptions are returned. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Optional, the start time to filter on.</param>
        /// <param name="endDate">Optional, The end time to filter on.</param>
        /// <returns>ApiResponse of SystemObject</returns>
        public ApiResponse< SystemObject > RoadDisruptedStreetsWithHttpInfo (DateTime? startDate, DateTime? endDate)
        {
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling RoadApi->RoadDisruptedStreets");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling RoadApi->RoadDisruptedStreets");

            var localVarPath = "/Road/all/Street/Disruption";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RoadDisruptedStreets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SystemObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SystemObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SystemObject)));
        }

        /// <summary>
        /// Gets a list of disrupted streets. If no date filters are provided, current disruptions are returned. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Optional, the start time to filter on.</param>
        /// <param name="endDate">Optional, The end time to filter on.</param>
        /// <returns>Task of SystemObject</returns>
        public async System.Threading.Tasks.Task<SystemObject> RoadDisruptedStreetsAsync (DateTime? startDate, DateTime? endDate)
        {
             ApiResponse<SystemObject> localVarResponse = await RoadDisruptedStreetsAsyncWithHttpInfo(startDate, endDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of disrupted streets. If no date filters are provided, current disruptions are returned. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Optional, the start time to filter on.</param>
        /// <param name="endDate">Optional, The end time to filter on.</param>
        /// <returns>Task of ApiResponse (SystemObject)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SystemObject>> RoadDisruptedStreetsAsyncWithHttpInfo (DateTime? startDate, DateTime? endDate)
        {
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling RoadApi->RoadDisruptedStreets");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling RoadApi->RoadDisruptedStreets");

            var localVarPath = "/Road/all/Street/Disruption";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RoadDisruptedStreets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SystemObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SystemObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SystemObject)));
        }

        /// <summary>
        /// Get active disruptions, filtered by road ids 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Comma-separated list of road identifiers e.g. \&quot;A406, A2\&quot; use all for all to ignore id filter (a full list of supported road identifiers can be found at the /Road/ endpoint)</param>
        /// <param name="stripContent">Optional, defaults to false. When true, removes every property/node except for id, point, severity, severityDescription, startDate, endDate, corridor details, location, comments and streets (optional)</param>
        /// <param name="severities">an optional list of Severity names to filter on (a valid list of severities can be obtained from the /Road/Meta/severities endpoint) (optional)</param>
        /// <param name="categories">an optional list of category names to filter on (a valid list of categories can be obtained from the /Road/Meta/categories endpoint) (optional)</param>
        /// <param name="closures">Optional, defaults to true. When true, always includes disruptions that have road closures, regardless of the severity filter. When false, the severity filter works as normal. (optional)</param>
        /// <returns>List&lt;TflApiPresentationEntitiesRoadDisruption&gt;</returns>
        public List<TflApiPresentationEntitiesRoadDisruption> RoadDisruption (List<string> ids, bool? stripContent = null, List<string> severities = null, List<string> categories = null, bool? closures = null)
        {
             ApiResponse<List<TflApiPresentationEntitiesRoadDisruption>> localVarResponse = RoadDisruptionWithHttpInfo(ids, stripContent, severities, categories, closures);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get active disruptions, filtered by road ids 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Comma-separated list of road identifiers e.g. \&quot;A406, A2\&quot; use all for all to ignore id filter (a full list of supported road identifiers can be found at the /Road/ endpoint)</param>
        /// <param name="stripContent">Optional, defaults to false. When true, removes every property/node except for id, point, severity, severityDescription, startDate, endDate, corridor details, location, comments and streets (optional)</param>
        /// <param name="severities">an optional list of Severity names to filter on (a valid list of severities can be obtained from the /Road/Meta/severities endpoint) (optional)</param>
        /// <param name="categories">an optional list of category names to filter on (a valid list of categories can be obtained from the /Road/Meta/categories endpoint) (optional)</param>
        /// <param name="closures">Optional, defaults to true. When true, always includes disruptions that have road closures, regardless of the severity filter. When false, the severity filter works as normal. (optional)</param>
        /// <returns>ApiResponse of List&lt;TflApiPresentationEntitiesRoadDisruption&gt;</returns>
        public ApiResponse< List<TflApiPresentationEntitiesRoadDisruption> > RoadDisruptionWithHttpInfo (List<string> ids, bool? stripContent = null, List<string> severities = null, List<string> categories = null, bool? closures = null)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling RoadApi->RoadDisruption");

            var localVarPath = "/Road/{ids}/Disruption";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/geo+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarPathParams.Add("ids", this.Configuration.ApiClient.ParameterToString(ids)); // path parameter
            if (stripContent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "stripContent", stripContent)); // query parameter
            if (severities != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "severities", severities)); // query parameter
            if (categories != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "categories", categories)); // query parameter
            if (closures != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "closures", closures)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RoadDisruption", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TflApiPresentationEntitiesRoadDisruption>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TflApiPresentationEntitiesRoadDisruption>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TflApiPresentationEntitiesRoadDisruption>)));
        }

        /// <summary>
        /// Get active disruptions, filtered by road ids 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Comma-separated list of road identifiers e.g. \&quot;A406, A2\&quot; use all for all to ignore id filter (a full list of supported road identifiers can be found at the /Road/ endpoint)</param>
        /// <param name="stripContent">Optional, defaults to false. When true, removes every property/node except for id, point, severity, severityDescription, startDate, endDate, corridor details, location, comments and streets (optional)</param>
        /// <param name="severities">an optional list of Severity names to filter on (a valid list of severities can be obtained from the /Road/Meta/severities endpoint) (optional)</param>
        /// <param name="categories">an optional list of category names to filter on (a valid list of categories can be obtained from the /Road/Meta/categories endpoint) (optional)</param>
        /// <param name="closures">Optional, defaults to true. When true, always includes disruptions that have road closures, regardless of the severity filter. When false, the severity filter works as normal. (optional)</param>
        /// <returns>Task of List&lt;TflApiPresentationEntitiesRoadDisruption&gt;</returns>
        public async System.Threading.Tasks.Task<List<TflApiPresentationEntitiesRoadDisruption>> RoadDisruptionAsync (List<string> ids, bool? stripContent = null, List<string> severities = null, List<string> categories = null, bool? closures = null)
        {
             ApiResponse<List<TflApiPresentationEntitiesRoadDisruption>> localVarResponse = await RoadDisruptionAsyncWithHttpInfo(ids, stripContent, severities, categories, closures);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get active disruptions, filtered by road ids 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Comma-separated list of road identifiers e.g. \&quot;A406, A2\&quot; use all for all to ignore id filter (a full list of supported road identifiers can be found at the /Road/ endpoint)</param>
        /// <param name="stripContent">Optional, defaults to false. When true, removes every property/node except for id, point, severity, severityDescription, startDate, endDate, corridor details, location, comments and streets (optional)</param>
        /// <param name="severities">an optional list of Severity names to filter on (a valid list of severities can be obtained from the /Road/Meta/severities endpoint) (optional)</param>
        /// <param name="categories">an optional list of category names to filter on (a valid list of categories can be obtained from the /Road/Meta/categories endpoint) (optional)</param>
        /// <param name="closures">Optional, defaults to true. When true, always includes disruptions that have road closures, regardless of the severity filter. When false, the severity filter works as normal. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TflApiPresentationEntitiesRoadDisruption&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesRoadDisruption>>> RoadDisruptionAsyncWithHttpInfo (List<string> ids, bool? stripContent = null, List<string> severities = null, List<string> categories = null, bool? closures = null)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling RoadApi->RoadDisruption");

            var localVarPath = "/Road/{ids}/Disruption";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/geo+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarPathParams.Add("ids", this.Configuration.ApiClient.ParameterToString(ids)); // path parameter
            if (stripContent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "stripContent", stripContent)); // query parameter
            if (severities != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "severities", severities)); // query parameter
            if (categories != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "categories", categories)); // query parameter
            if (closures != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "closures", closures)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RoadDisruption", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TflApiPresentationEntitiesRoadDisruption>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TflApiPresentationEntitiesRoadDisruption>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TflApiPresentationEntitiesRoadDisruption>)));
        }

        /// <summary>
        /// Gets a list of active disruptions filtered by disruption Ids. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="disruptionIds">Comma-separated list of disruption identifiers to filter by.</param>
        /// <param name="stripContent">Optional, defaults to false. When true, removes every property/node except for id, point, severity, severityDescription, startDate, endDate, corridor details, location and comments. (optional)</param>
        /// <returns>TflApiPresentationEntitiesRoadDisruption</returns>
        public TflApiPresentationEntitiesRoadDisruption RoadDisruptionById (List<string> disruptionIds, bool? stripContent = null)
        {
             ApiResponse<TflApiPresentationEntitiesRoadDisruption> localVarResponse = RoadDisruptionByIdWithHttpInfo(disruptionIds, stripContent);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of active disruptions filtered by disruption Ids. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="disruptionIds">Comma-separated list of disruption identifiers to filter by.</param>
        /// <param name="stripContent">Optional, defaults to false. When true, removes every property/node except for id, point, severity, severityDescription, startDate, endDate, corridor details, location and comments. (optional)</param>
        /// <returns>ApiResponse of TflApiPresentationEntitiesRoadDisruption</returns>
        public ApiResponse< TflApiPresentationEntitiesRoadDisruption > RoadDisruptionByIdWithHttpInfo (List<string> disruptionIds, bool? stripContent = null)
        {
            // verify the required parameter 'disruptionIds' is set
            if (disruptionIds == null)
                throw new ApiException(400, "Missing required parameter 'disruptionIds' when calling RoadApi->RoadDisruptionById");

            var localVarPath = "/Road/all/Disruption/{disruptionIds}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/geo+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (disruptionIds != null) localVarPathParams.Add("disruptionIds", this.Configuration.ApiClient.ParameterToString(disruptionIds)); // path parameter
            if (stripContent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "stripContent", stripContent)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RoadDisruptionById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TflApiPresentationEntitiesRoadDisruption>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TflApiPresentationEntitiesRoadDisruption) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TflApiPresentationEntitiesRoadDisruption)));
        }

        /// <summary>
        /// Gets a list of active disruptions filtered by disruption Ids. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="disruptionIds">Comma-separated list of disruption identifiers to filter by.</param>
        /// <param name="stripContent">Optional, defaults to false. When true, removes every property/node except for id, point, severity, severityDescription, startDate, endDate, corridor details, location and comments. (optional)</param>
        /// <returns>Task of TflApiPresentationEntitiesRoadDisruption</returns>
        public async System.Threading.Tasks.Task<TflApiPresentationEntitiesRoadDisruption> RoadDisruptionByIdAsync (List<string> disruptionIds, bool? stripContent = null)
        {
             ApiResponse<TflApiPresentationEntitiesRoadDisruption> localVarResponse = await RoadDisruptionByIdAsyncWithHttpInfo(disruptionIds, stripContent);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of active disruptions filtered by disruption Ids. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="disruptionIds">Comma-separated list of disruption identifiers to filter by.</param>
        /// <param name="stripContent">Optional, defaults to false. When true, removes every property/node except for id, point, severity, severityDescription, startDate, endDate, corridor details, location and comments. (optional)</param>
        /// <returns>Task of ApiResponse (TflApiPresentationEntitiesRoadDisruption)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TflApiPresentationEntitiesRoadDisruption>> RoadDisruptionByIdAsyncWithHttpInfo (List<string> disruptionIds, bool? stripContent = null)
        {
            // verify the required parameter 'disruptionIds' is set
            if (disruptionIds == null)
                throw new ApiException(400, "Missing required parameter 'disruptionIds' when calling RoadApi->RoadDisruptionById");

            var localVarPath = "/Road/all/Disruption/{disruptionIds}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/geo+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (disruptionIds != null) localVarPathParams.Add("disruptionIds", this.Configuration.ApiClient.ParameterToString(disruptionIds)); // path parameter
            if (stripContent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "stripContent", stripContent)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RoadDisruptionById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TflApiPresentationEntitiesRoadDisruption>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TflApiPresentationEntitiesRoadDisruption) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TflApiPresentationEntitiesRoadDisruption)));
        }

        /// <summary>
        /// Gets all roads managed by TfL 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TflApiPresentationEntitiesRoadCorridor&gt;</returns>
        public List<TflApiPresentationEntitiesRoadCorridor> RoadGet ()
        {
             ApiResponse<List<TflApiPresentationEntitiesRoadCorridor>> localVarResponse = RoadGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all roads managed by TfL 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TflApiPresentationEntitiesRoadCorridor&gt;</returns>
        public ApiResponse< List<TflApiPresentationEntitiesRoadCorridor> > RoadGetWithHttpInfo ()
        {

            var localVarPath = "/Road";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RoadGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TflApiPresentationEntitiesRoadCorridor>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TflApiPresentationEntitiesRoadCorridor>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TflApiPresentationEntitiesRoadCorridor>)));
        }

        /// <summary>
        /// Gets all roads managed by TfL 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TflApiPresentationEntitiesRoadCorridor&gt;</returns>
        public async System.Threading.Tasks.Task<List<TflApiPresentationEntitiesRoadCorridor>> RoadGetAsync ()
        {
             ApiResponse<List<TflApiPresentationEntitiesRoadCorridor>> localVarResponse = await RoadGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets all roads managed by TfL 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TflApiPresentationEntitiesRoadCorridor&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesRoadCorridor>>> RoadGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/Road";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RoadGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TflApiPresentationEntitiesRoadCorridor>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TflApiPresentationEntitiesRoadCorridor>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TflApiPresentationEntitiesRoadCorridor>)));
        }

        /// <summary>
        /// Gets the road with the specified id (e.g. A1) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Comma-separated list of road identifiers e.g. \&quot;A406, A2\&quot; (a full list of supported road identifiers can be found at the /Road/ endpoint)</param>
        /// <returns>List&lt;TflApiPresentationEntitiesRoadCorridor&gt;</returns>
        public List<TflApiPresentationEntitiesRoadCorridor> RoadGet_0 (List<string> ids)
        {
             ApiResponse<List<TflApiPresentationEntitiesRoadCorridor>> localVarResponse = RoadGet_0WithHttpInfo(ids);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the road with the specified id (e.g. A1) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Comma-separated list of road identifiers e.g. \&quot;A406, A2\&quot; (a full list of supported road identifiers can be found at the /Road/ endpoint)</param>
        /// <returns>ApiResponse of List&lt;TflApiPresentationEntitiesRoadCorridor&gt;</returns>
        public ApiResponse< List<TflApiPresentationEntitiesRoadCorridor> > RoadGet_0WithHttpInfo (List<string> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling RoadApi->RoadGet_0");

            var localVarPath = "/Road/{ids}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarPathParams.Add("ids", this.Configuration.ApiClient.ParameterToString(ids)); // path parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RoadGet_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TflApiPresentationEntitiesRoadCorridor>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TflApiPresentationEntitiesRoadCorridor>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TflApiPresentationEntitiesRoadCorridor>)));
        }

        /// <summary>
        /// Gets the road with the specified id (e.g. A1) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Comma-separated list of road identifiers e.g. \&quot;A406, A2\&quot; (a full list of supported road identifiers can be found at the /Road/ endpoint)</param>
        /// <returns>Task of List&lt;TflApiPresentationEntitiesRoadCorridor&gt;</returns>
        public async System.Threading.Tasks.Task<List<TflApiPresentationEntitiesRoadCorridor>> RoadGet_0Async (List<string> ids)
        {
             ApiResponse<List<TflApiPresentationEntitiesRoadCorridor>> localVarResponse = await RoadGet_0AsyncWithHttpInfo(ids);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the road with the specified id (e.g. A1) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Comma-separated list of road identifiers e.g. \&quot;A406, A2\&quot; (a full list of supported road identifiers can be found at the /Road/ endpoint)</param>
        /// <returns>Task of ApiResponse (List&lt;TflApiPresentationEntitiesRoadCorridor&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesRoadCorridor>>> RoadGet_0AsyncWithHttpInfo (List<string> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling RoadApi->RoadGet_0");

            var localVarPath = "/Road/{ids}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarPathParams.Add("ids", this.Configuration.ApiClient.ParameterToString(ids)); // path parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RoadGet_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TflApiPresentationEntitiesRoadCorridor>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TflApiPresentationEntitiesRoadCorridor>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TflApiPresentationEntitiesRoadCorridor>)));
        }

        /// <summary>
        /// Gets a list of valid RoadDisruption categories 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> RoadMetaCategories ()
        {
             ApiResponse<List<string>> localVarResponse = RoadMetaCategoriesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of valid RoadDisruption categories 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ApiResponse< List<string> > RoadMetaCategoriesWithHttpInfo ()
        {

            var localVarPath = "/Road/Meta/Categories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RoadMetaCategories", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        /// Gets a list of valid RoadDisruption categories 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> RoadMetaCategoriesAsync ()
        {
             ApiResponse<List<string>> localVarResponse = await RoadMetaCategoriesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of valid RoadDisruption categories 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<string>>> RoadMetaCategoriesAsyncWithHttpInfo ()
        {

            var localVarPath = "/Road/Meta/Categories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RoadMetaCategories", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        /// Gets a list of valid RoadDisruption severity codes 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TflApiPresentationEntitiesStatusSeverity&gt;</returns>
        public List<TflApiPresentationEntitiesStatusSeverity> RoadMetaSeverities ()
        {
             ApiResponse<List<TflApiPresentationEntitiesStatusSeverity>> localVarResponse = RoadMetaSeveritiesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of valid RoadDisruption severity codes 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TflApiPresentationEntitiesStatusSeverity&gt;</returns>
        public ApiResponse< List<TflApiPresentationEntitiesStatusSeverity> > RoadMetaSeveritiesWithHttpInfo ()
        {

            var localVarPath = "/Road/Meta/Severities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RoadMetaSeverities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TflApiPresentationEntitiesStatusSeverity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TflApiPresentationEntitiesStatusSeverity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TflApiPresentationEntitiesStatusSeverity>)));
        }

        /// <summary>
        /// Gets a list of valid RoadDisruption severity codes 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TflApiPresentationEntitiesStatusSeverity&gt;</returns>
        public async System.Threading.Tasks.Task<List<TflApiPresentationEntitiesStatusSeverity>> RoadMetaSeveritiesAsync ()
        {
             ApiResponse<List<TflApiPresentationEntitiesStatusSeverity>> localVarResponse = await RoadMetaSeveritiesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of valid RoadDisruption severity codes 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TflApiPresentationEntitiesStatusSeverity&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesStatusSeverity>>> RoadMetaSeveritiesAsyncWithHttpInfo ()
        {

            var localVarPath = "/Road/Meta/Severities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RoadMetaSeverities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TflApiPresentationEntitiesStatusSeverity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TflApiPresentationEntitiesStatusSeverity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TflApiPresentationEntitiesStatusSeverity>)));
        }

        /// <summary>
        /// Gets the specified roads with the status aggregated over the date range specified, or now until the end of today if no dates are passed. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Comma-separated list of road identifiers e.g. \&quot;A406, A2\&quot; or use \&quot;all\&quot; to ignore id filter (a full list of supported road identifiers can be found at the /Road/ endpoint)</param>
        /// <param name="dateRangeNullableStartDate"> (optional)</param>
        /// <param name="dateRangeNullableEndDate"> (optional)</param>
        /// <returns>List&lt;TflApiPresentationEntitiesRoadCorridor&gt;</returns>
        public List<TflApiPresentationEntitiesRoadCorridor> RoadStatus (List<string> ids, DateTime? dateRangeNullableStartDate = null, DateTime? dateRangeNullableEndDate = null)
        {
             ApiResponse<List<TflApiPresentationEntitiesRoadCorridor>> localVarResponse = RoadStatusWithHttpInfo(ids, dateRangeNullableStartDate, dateRangeNullableEndDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the specified roads with the status aggregated over the date range specified, or now until the end of today if no dates are passed. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Comma-separated list of road identifiers e.g. \&quot;A406, A2\&quot; or use \&quot;all\&quot; to ignore id filter (a full list of supported road identifiers can be found at the /Road/ endpoint)</param>
        /// <param name="dateRangeNullableStartDate"> (optional)</param>
        /// <param name="dateRangeNullableEndDate"> (optional)</param>
        /// <returns>ApiResponse of List&lt;TflApiPresentationEntitiesRoadCorridor&gt;</returns>
        public ApiResponse< List<TflApiPresentationEntitiesRoadCorridor> > RoadStatusWithHttpInfo (List<string> ids, DateTime? dateRangeNullableStartDate = null, DateTime? dateRangeNullableEndDate = null)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling RoadApi->RoadStatus");

            var localVarPath = "/Road/{ids}/Status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarPathParams.Add("ids", this.Configuration.ApiClient.ParameterToString(ids)); // path parameter
            if (dateRangeNullableStartDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dateRangeNullable.startDate", dateRangeNullableStartDate)); // query parameter
            if (dateRangeNullableEndDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dateRangeNullable.endDate", dateRangeNullableEndDate)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RoadStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TflApiPresentationEntitiesRoadCorridor>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TflApiPresentationEntitiesRoadCorridor>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TflApiPresentationEntitiesRoadCorridor>)));
        }

        /// <summary>
        /// Gets the specified roads with the status aggregated over the date range specified, or now until the end of today if no dates are passed. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Comma-separated list of road identifiers e.g. \&quot;A406, A2\&quot; or use \&quot;all\&quot; to ignore id filter (a full list of supported road identifiers can be found at the /Road/ endpoint)</param>
        /// <param name="dateRangeNullableStartDate"> (optional)</param>
        /// <param name="dateRangeNullableEndDate"> (optional)</param>
        /// <returns>Task of List&lt;TflApiPresentationEntitiesRoadCorridor&gt;</returns>
        public async System.Threading.Tasks.Task<List<TflApiPresentationEntitiesRoadCorridor>> RoadStatusAsync (List<string> ids, DateTime? dateRangeNullableStartDate = null, DateTime? dateRangeNullableEndDate = null)
        {
             ApiResponse<List<TflApiPresentationEntitiesRoadCorridor>> localVarResponse = await RoadStatusAsyncWithHttpInfo(ids, dateRangeNullableStartDate, dateRangeNullableEndDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the specified roads with the status aggregated over the date range specified, or now until the end of today if no dates are passed. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Comma-separated list of road identifiers e.g. \&quot;A406, A2\&quot; or use \&quot;all\&quot; to ignore id filter (a full list of supported road identifiers can be found at the /Road/ endpoint)</param>
        /// <param name="dateRangeNullableStartDate"> (optional)</param>
        /// <param name="dateRangeNullableEndDate"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TflApiPresentationEntitiesRoadCorridor&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesRoadCorridor>>> RoadStatusAsyncWithHttpInfo (List<string> ids, DateTime? dateRangeNullableStartDate = null, DateTime? dateRangeNullableEndDate = null)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling RoadApi->RoadStatus");

            var localVarPath = "/Road/{ids}/Status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarPathParams.Add("ids", this.Configuration.ApiClient.ParameterToString(ids)); // path parameter
            if (dateRangeNullableStartDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dateRangeNullable.startDate", dateRangeNullableStartDate)); // query parameter
            if (dateRangeNullableEndDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dateRangeNullable.endDate", dateRangeNullableEndDate)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RoadStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TflApiPresentationEntitiesRoadCorridor>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TflApiPresentationEntitiesRoadCorridor>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TflApiPresentationEntitiesRoadCorridor>)));
        }

    }
}
