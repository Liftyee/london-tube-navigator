/* 
 * Transport for London Unified API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStopPointApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Gets the list of arrival and departure predictions for the given stop point id (overground, Elizabeth line and thameslink only)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A StopPoint id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)</param>
        /// <param name="lineIds">A comma-separated list of line ids e.g. elizabeth, london-overground, thameslink</param>
        /// <returns>List&lt;TflApiPresentationEntitiesArrivalDeparture&gt;</returns>
        List<TflApiPresentationEntitiesArrivalDeparture> StopPointArrivalDepartures (string id, List<string> lineIds);

        /// <summary>
        /// Gets the list of arrival and departure predictions for the given stop point id (overground, Elizabeth line and thameslink only)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A StopPoint id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)</param>
        /// <param name="lineIds">A comma-separated list of line ids e.g. elizabeth, london-overground, thameslink</param>
        /// <returns>ApiResponse of List&lt;TflApiPresentationEntitiesArrivalDeparture&gt;</returns>
        ApiResponse<List<TflApiPresentationEntitiesArrivalDeparture>> StopPointArrivalDeparturesWithHttpInfo (string id, List<string> lineIds);
        /// <summary>
        /// Gets the list of arrival predictions for the given stop point id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A StopPoint id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)</param>
        /// <returns>List&lt;TflApiPresentationEntitiesPrediction&gt;</returns>
        List<TflApiPresentationEntitiesPrediction> StopPointArrivals (string id);

        /// <summary>
        /// Gets the list of arrival predictions for the given stop point id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A StopPoint id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)</param>
        /// <returns>ApiResponse of List&lt;TflApiPresentationEntitiesPrediction&gt;</returns>
        ApiResponse<List<TflApiPresentationEntitiesPrediction>> StopPointArrivalsWithHttpInfo (string id);
        /// <summary>
        /// Gets all the Crowding data (static) for the StopPointId, plus crowding data for a given line and optionally a particular direction.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The Naptan id of the stop</param>
        /// <param name="line">A particular line e.g. victoria, circle, northern etc.</param>
        /// <param name="direction">The direction of travel. Can be inbound or outbound.</param>
        /// <returns>List&lt;TflApiPresentationEntitiesStopPoint&gt;</returns>
        List<TflApiPresentationEntitiesStopPoint> StopPointCrowding (string id, string line, string direction);

        /// <summary>
        /// Gets all the Crowding data (static) for the StopPointId, plus crowding data for a given line and optionally a particular direction.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The Naptan id of the stop</param>
        /// <param name="line">A particular line e.g. victoria, circle, northern etc.</param>
        /// <param name="direction">The direction of travel. Can be inbound or outbound.</param>
        /// <returns>ApiResponse of List&lt;TflApiPresentationEntitiesStopPoint&gt;</returns>
        ApiResponse<List<TflApiPresentationEntitiesStopPoint>> StopPointCrowdingWithHttpInfo (string id, string line, string direction);
        /// <summary>
        /// Returns the canonical direction, \&quot;inbound\&quot; or \&quot;outbound\&quot;, for a given pair of stop point Ids in the direction from -&amp;gt; to.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Originating stop id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)</param>
        /// <param name="toStopPointId">Destination stop id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)</param>
        /// <param name="lineId">Optional line id filter e.g. victoria (optional)</param>
        /// <returns>string</returns>
        string StopPointDirection (string id, string toStopPointId, string lineId = null);

        /// <summary>
        /// Returns the canonical direction, \&quot;inbound\&quot; or \&quot;outbound\&quot;, for a given pair of stop point Ids in the direction from -&amp;gt; to.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Originating stop id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)</param>
        /// <param name="toStopPointId">Destination stop id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)</param>
        /// <param name="lineId">Optional line id filter e.g. victoria (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> StopPointDirectionWithHttpInfo (string id, string toStopPointId, string lineId = null);
        /// <summary>
        /// Gets all disruptions for the specified StopPointId, plus disruptions for any child Naptan records it may have.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma-seperated list of stop point ids. Max. approx. 20 ids.              You can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name.</param>
        /// <param name="getFamily">Specify true to return disruptions for entire family, or false to return disruptions for just this stop point. Defaults to false. (optional)</param>
        /// <param name="includeRouteBlockedStops"> (optional)</param>
        /// <param name="flattenResponse">Specify true to associate all disruptions with parent stop point. (Only applicable when getFamily is true). (optional)</param>
        /// <returns>List&lt;TflApiPresentationEntitiesDisruptedPoint&gt;</returns>
        List<TflApiPresentationEntitiesDisruptedPoint> StopPointDisruption (List<string> ids, bool? getFamily = null, bool? includeRouteBlockedStops = null, bool? flattenResponse = null);

        /// <summary>
        /// Gets all disruptions for the specified StopPointId, plus disruptions for any child Naptan records it may have.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma-seperated list of stop point ids. Max. approx. 20 ids.              You can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name.</param>
        /// <param name="getFamily">Specify true to return disruptions for entire family, or false to return disruptions for just this stop point. Defaults to false. (optional)</param>
        /// <param name="includeRouteBlockedStops"> (optional)</param>
        /// <param name="flattenResponse">Specify true to associate all disruptions with parent stop point. (Only applicable when getFamily is true). (optional)</param>
        /// <returns>ApiResponse of List&lt;TflApiPresentationEntitiesDisruptedPoint&gt;</returns>
        ApiResponse<List<TflApiPresentationEntitiesDisruptedPoint>> StopPointDisruptionWithHttpInfo (List<string> ids, bool? getFamily = null, bool? includeRouteBlockedStops = null, bool? flattenResponse = null);
        /// <summary>
        /// Gets a distinct list of disrupted stop points for the given modes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modes">A comma-seperated list of modes e.g. tube,dlr</param>
        /// <param name="includeRouteBlockedStops"> (optional)</param>
        /// <returns>List&lt;TflApiPresentationEntitiesDisruptedPoint&gt;</returns>
        List<TflApiPresentationEntitiesDisruptedPoint> StopPointDisruptionByMode (List<string> modes, bool? includeRouteBlockedStops = null);

        /// <summary>
        /// Gets a distinct list of disrupted stop points for the given modes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modes">A comma-seperated list of modes e.g. tube,dlr</param>
        /// <param name="includeRouteBlockedStops"> (optional)</param>
        /// <returns>ApiResponse of List&lt;TflApiPresentationEntitiesDisruptedPoint&gt;</returns>
        ApiResponse<List<TflApiPresentationEntitiesDisruptedPoint>> StopPointDisruptionByModeWithHttpInfo (List<string> modes, bool? includeRouteBlockedStops = null);
        /// <summary>
        /// Get a list of places corresponding to a given id and place types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A naptan id for a stop point (station naptan code e.g. 940GZZLUASL).</param>
        /// <param name="placeTypes">A comcomma-separated value representing the place types.</param>
        /// <returns>List&lt;TflApiPresentationEntitiesPlace&gt;</returns>
        List<TflApiPresentationEntitiesPlace> StopPointGet (string id, List<string> placeTypes);

        /// <summary>
        /// Get a list of places corresponding to a given id and place types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A naptan id for a stop point (station naptan code e.g. 940GZZLUASL).</param>
        /// <param name="placeTypes">A comcomma-separated value representing the place types.</param>
        /// <returns>ApiResponse of List&lt;TflApiPresentationEntitiesPlace&gt;</returns>
        ApiResponse<List<TflApiPresentationEntitiesPlace>> StopPointGetWithHttpInfo (string id, List<string> placeTypes);
        /// <summary>
        /// Gets a list of StopPoints within {radius} by the specified criteria
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopTypes">a list of stopTypes that should be returned (a list of valid stop types can be obtained from the StopPoint/meta/stoptypes endpoint)</param>
        /// <param name="locationLat"></param>
        /// <param name="locationLon"></param>
        /// <param name="radius">the radius of the bounding circle in metres (default : 200) (optional)</param>
        /// <param name="useStopPointHierarchy">Re-arrange the output into a parent/child hierarchy (optional)</param>
        /// <param name="modes">the list of modes to search (comma separated mode names e.g. tube,dlr) (optional)</param>
        /// <param name="categories">an optional list of comma separated property categories to return in the StopPoint&#39;s property bag. If null or empty, all categories of property are returned. Pass the keyword \&quot;none\&quot; to return no properties (a valid list of categories can be obtained from the /StopPoint/Meta/categories endpoint) (optional)</param>
        /// <param name="returnLines">true to return the lines that each stop point serves as a nested resource (optional)</param>
        /// <returns>TflApiPresentationEntitiesStopPointsResponse</returns>
        TflApiPresentationEntitiesStopPointsResponse StopPointGetByGeoPoint (List<string> stopTypes, double? locationLat, double? locationLon, int? radius = null, bool? useStopPointHierarchy = null, List<string> modes = null, List<string> categories = null, bool? returnLines = null);

        /// <summary>
        /// Gets a list of StopPoints within {radius} by the specified criteria
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopTypes">a list of stopTypes that should be returned (a list of valid stop types can be obtained from the StopPoint/meta/stoptypes endpoint)</param>
        /// <param name="locationLat"></param>
        /// <param name="locationLon"></param>
        /// <param name="radius">the radius of the bounding circle in metres (default : 200) (optional)</param>
        /// <param name="useStopPointHierarchy">Re-arrange the output into a parent/child hierarchy (optional)</param>
        /// <param name="modes">the list of modes to search (comma separated mode names e.g. tube,dlr) (optional)</param>
        /// <param name="categories">an optional list of comma separated property categories to return in the StopPoint&#39;s property bag. If null or empty, all categories of property are returned. Pass the keyword \&quot;none\&quot; to return no properties (a valid list of categories can be obtained from the /StopPoint/Meta/categories endpoint) (optional)</param>
        /// <param name="returnLines">true to return the lines that each stop point serves as a nested resource (optional)</param>
        /// <returns>ApiResponse of TflApiPresentationEntitiesStopPointsResponse</returns>
        ApiResponse<TflApiPresentationEntitiesStopPointsResponse> StopPointGetByGeoPointWithHttpInfo (List<string> stopTypes, double? locationLat, double? locationLon, int? radius = null, bool? useStopPointHierarchy = null, List<string> modes = null, List<string> categories = null, bool? returnLines = null);
        /// <summary>
        /// Gets a list of StopPoints filtered by the modes available at that StopPoint.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modes">A comma-seperated list of modes e.g. tube,dlr</param>
        /// <param name="page">The data set page to return. Page 1 equates to the first 1000 stop points, page 2 equates to 1001-2000 etc. Must be entered for bus mode as data set is too large. (optional)</param>
        /// <returns>TflApiPresentationEntitiesStopPointsResponse</returns>
        TflApiPresentationEntitiesStopPointsResponse StopPointGetByMode (List<string> modes, int? page = null);

        /// <summary>
        /// Gets a list of StopPoints filtered by the modes available at that StopPoint.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modes">A comma-seperated list of modes e.g. tube,dlr</param>
        /// <param name="page">The data set page to return. Page 1 equates to the first 1000 stop points, page 2 equates to 1001-2000 etc. Must be entered for bus mode as data set is too large. (optional)</param>
        /// <returns>ApiResponse of TflApiPresentationEntitiesStopPointsResponse</returns>
        ApiResponse<TflApiPresentationEntitiesStopPointsResponse> StopPointGetByModeWithHttpInfo (List<string> modes, int? page = null);
        /// <summary>
        /// Gets a StopPoint for a given sms code.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A 5-digit Countdown Bus Stop Code e.g. 73241, 50435, 56334.</param>
        /// <param name="output">If set to \&quot;web\&quot;, a 302 redirect to relevant website bus stop page is returned. Valid values are : web. All other values are ignored. (optional)</param>
        /// <returns>SystemObject</returns>
        SystemObject StopPointGetBySms (string id, string output = null);

        /// <summary>
        /// Gets a StopPoint for a given sms code.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A 5-digit Countdown Bus Stop Code e.g. 73241, 50435, 56334.</param>
        /// <param name="output">If set to \&quot;web\&quot;, a 302 redirect to relevant website bus stop page is returned. Valid values are : web. All other values are ignored. (optional)</param>
        /// <returns>ApiResponse of SystemObject</returns>
        ApiResponse<SystemObject> StopPointGetBySmsWithHttpInfo (string id, string output = null);
        /// <summary>
        /// Gets all stop points of a given type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="types">A comma-separated list of the types to return. Max. approx. 12 types.               A list of valid stop types can be obtained from the StopPoint/meta/stoptypes endpoint.</param>
        /// <returns>List&lt;TflApiPresentationEntitiesStopPoint&gt;</returns>
        List<TflApiPresentationEntitiesStopPoint> StopPointGetByType (List<string> types);

        /// <summary>
        /// Gets all stop points of a given type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="types">A comma-separated list of the types to return. Max. approx. 12 types.               A list of valid stop types can be obtained from the StopPoint/meta/stoptypes endpoint.</param>
        /// <returns>ApiResponse of List&lt;TflApiPresentationEntitiesStopPoint&gt;</returns>
        ApiResponse<List<TflApiPresentationEntitiesStopPoint>> StopPointGetByTypeWithHttpInfo (List<string> types);
        /// <summary>
        /// Gets all the stop points of given type(s) with a page number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="types"></param>
        /// <param name="page"></param>
        /// <returns>List&lt;TflApiPresentationEntitiesStopPoint&gt;</returns>
        List<TflApiPresentationEntitiesStopPoint> StopPointGetByTypeWithPagination (List<string> types, int? page);

        /// <summary>
        /// Gets all the stop points of given type(s) with a page number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="types"></param>
        /// <param name="page"></param>
        /// <returns>ApiResponse of List&lt;TflApiPresentationEntitiesStopPoint&gt;</returns>
        ApiResponse<List<TflApiPresentationEntitiesStopPoint>> StopPointGetByTypeWithPaginationWithHttpInfo (List<string> types, int? page);
        /// <summary>
        /// Get car parks corresponding to the given stop point id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopPointId">stopPointId is required to get the car parks.</param>
        /// <returns>List&lt;TflApiPresentationEntitiesPlace&gt;</returns>
        List<TflApiPresentationEntitiesPlace> StopPointGetCarParksById (string stopPointId);

        /// <summary>
        /// Get car parks corresponding to the given stop point id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopPointId">stopPointId is required to get the car parks.</param>
        /// <returns>ApiResponse of List&lt;TflApiPresentationEntitiesPlace&gt;</returns>
        ApiResponse<List<TflApiPresentationEntitiesPlace>> StopPointGetCarParksByIdWithHttpInfo (string stopPointId);
        /// <summary>
        /// Gets a list of StopPoints corresponding to the given list of stop ids.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma-separated list of stop point ids (station naptan code e.g. 940GZZLUASL). Max. approx. 20 ids.              You can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name.</param>
        /// <param name="includeCrowdingData">Include the crowding data (static). To Filter further use: /StopPoint/{ids}/Crowding/{line} (optional)</param>
        /// <returns>List&lt;TflApiPresentationEntitiesStopPoint&gt;</returns>
        List<TflApiPresentationEntitiesStopPoint> StopPointGetId (List<string> ids, bool? includeCrowdingData = null);

        /// <summary>
        /// Gets a list of StopPoints corresponding to the given list of stop ids.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma-separated list of stop point ids (station naptan code e.g. 940GZZLUASL). Max. approx. 20 ids.              You can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name.</param>
        /// <param name="includeCrowdingData">Include the crowding data (static). To Filter further use: /StopPoint/{ids}/Crowding/{line} (optional)</param>
        /// <returns>ApiResponse of List&lt;TflApiPresentationEntitiesStopPoint&gt;</returns>
        ApiResponse<List<TflApiPresentationEntitiesStopPoint>> StopPointGetIdWithHttpInfo (List<string> ids, bool? includeCrowdingData = null);
        /// <summary>
        /// Gets the service types for a given stoppoint
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The Naptan id of the stop</param>
        /// <param name="lineIds">The lines which contain the given Naptan id (all lines relevant to the given stoppoint if empty) (optional)</param>
        /// <param name="modes">The modes which the lines are relevant to (all if empty) (optional)</param>
        /// <returns>List&lt;TflApiPresentationEntitiesLineServiceType&gt;</returns>
        List<TflApiPresentationEntitiesLineServiceType> StopPointGetServiceTypes (string id, List<string> lineIds = null, List<string> modes = null);

        /// <summary>
        /// Gets the service types for a given stoppoint
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The Naptan id of the stop</param>
        /// <param name="lineIds">The lines which contain the given Naptan id (all lines relevant to the given stoppoint if empty) (optional)</param>
        /// <param name="modes">The modes which the lines are relevant to (all if empty) (optional)</param>
        /// <returns>ApiResponse of List&lt;TflApiPresentationEntitiesLineServiceType&gt;</returns>
        ApiResponse<List<TflApiPresentationEntitiesLineServiceType>> StopPointGetServiceTypesWithHttpInfo (string id, List<string> lineIds = null, List<string> modes = null);
        /// <summary>
        /// Gets a list of taxi ranks corresponding to the given stop point id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopPointId">stopPointId is required to get the taxi ranks.</param>
        /// <returns>List&lt;TflApiPresentationEntitiesPlace&gt;</returns>
        List<TflApiPresentationEntitiesPlace> StopPointGetTaxiRanksByIds (string stopPointId);

        /// <summary>
        /// Gets a list of taxi ranks corresponding to the given stop point id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopPointId">stopPointId is required to get the taxi ranks.</param>
        /// <returns>ApiResponse of List&lt;TflApiPresentationEntitiesPlace&gt;</returns>
        ApiResponse<List<TflApiPresentationEntitiesPlace>> StopPointGetTaxiRanksByIdsWithHttpInfo (string stopPointId);
        /// <summary>
        /// Gets the list of available StopPoint additional information categories
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TflApiPresentationEntitiesStopPointCategory&gt;</returns>
        List<TflApiPresentationEntitiesStopPointCategory> StopPointMetaCategories ();

        /// <summary>
        /// Gets the list of available StopPoint additional information categories
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TflApiPresentationEntitiesStopPointCategory&gt;</returns>
        ApiResponse<List<TflApiPresentationEntitiesStopPointCategory>> StopPointMetaCategoriesWithHttpInfo ();
        /// <summary>
        /// Gets the list of available StopPoint modes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TflApiPresentationEntitiesMode&gt;</returns>
        List<TflApiPresentationEntitiesMode> StopPointMetaModes ();

        /// <summary>
        /// Gets the list of available StopPoint modes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TflApiPresentationEntitiesMode&gt;</returns>
        ApiResponse<List<TflApiPresentationEntitiesMode>> StopPointMetaModesWithHttpInfo ();
        /// <summary>
        /// Gets the list of available StopPoint types
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        List<string> StopPointMetaStopTypes ();

        /// <summary>
        /// Gets the list of available StopPoint types
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> StopPointMetaStopTypesWithHttpInfo ();
        /// <summary>
        /// Gets Stopoints that are reachable from a station/line combination.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) of the stop point to filter by</param>
        /// <param name="lineId">Line id of the line to filter by (e.g. victoria)</param>
        /// <param name="serviceTypes">A comma-separated list of service types to filter on. If not specified. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)</param>
        /// <returns>List&lt;TflApiPresentationEntitiesStopPoint&gt;</returns>
        List<TflApiPresentationEntitiesStopPoint> StopPointReachableFrom (string id, string lineId, List<string> serviceTypes = null);

        /// <summary>
        /// Gets Stopoints that are reachable from a station/line combination.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) of the stop point to filter by</param>
        /// <param name="lineId">Line id of the line to filter by (e.g. victoria)</param>
        /// <param name="serviceTypes">A comma-separated list of service types to filter on. If not specified. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)</param>
        /// <returns>ApiResponse of List&lt;TflApiPresentationEntitiesStopPoint&gt;</returns>
        ApiResponse<List<TflApiPresentationEntitiesStopPoint>> StopPointReachableFromWithHttpInfo (string id, string lineId, List<string> serviceTypes = null);
        /// <summary>
        /// Returns the route sections for all the lines that service the given stop point ids
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A stop point id (station naptan codes e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)</param>
        /// <param name="serviceTypes">A comma-separated list of service types to filter on. If not specified. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)</param>
        /// <returns>List&lt;TflApiPresentationEntitiesStopPointRouteSection&gt;</returns>
        List<TflApiPresentationEntitiesStopPointRouteSection> StopPointRoute (string id, List<string> serviceTypes = null);

        /// <summary>
        /// Returns the route sections for all the lines that service the given stop point ids
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A stop point id (station naptan codes e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)</param>
        /// <param name="serviceTypes">A comma-separated list of service types to filter on. If not specified. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)</param>
        /// <returns>ApiResponse of List&lt;TflApiPresentationEntitiesStopPointRouteSection&gt;</returns>
        ApiResponse<List<TflApiPresentationEntitiesStopPointRouteSection>> StopPointRouteWithHttpInfo (string id, List<string> serviceTypes = null);
        /// <summary>
        /// Search StopPoints by their common name, or their 5-digit Countdown Bus Stop Code.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The query string, case-insensitive. Leading and trailing wildcards are applied automatically.</param>
        /// <param name="modes">An optional, parameter separated list of the modes to filter by (optional)</param>
        /// <param name="faresOnly">True to only return stations in that have Fares data available for single fares to another station. (optional)</param>
        /// <param name="maxResults">An optional result limit, defaulting to and with a maximum of 50. Since children of the stop point heirarchy are returned for matches,              it is possible that the flattened result set will contain more than 50 items. (optional)</param>
        /// <param name="lines">An optional, parameter separated list of the lines to filter by (optional)</param>
        /// <param name="includeHubs">If true, returns results including HUBs. (optional)</param>
        /// <param name="tflOperatedNationalRailStationsOnly">If the national-rail mode is included, this flag will filter the national rail stations so that only those operated by TfL are returned (optional)</param>
        /// <returns>TflApiPresentationEntitiesSearchResponse</returns>
        TflApiPresentationEntitiesSearchResponse StopPointSearch (string query, List<string> modes = null, bool? faresOnly = null, int? maxResults = null, List<string> lines = null, bool? includeHubs = null, bool? tflOperatedNationalRailStationsOnly = null);

        /// <summary>
        /// Search StopPoints by their common name, or their 5-digit Countdown Bus Stop Code.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The query string, case-insensitive. Leading and trailing wildcards are applied automatically.</param>
        /// <param name="modes">An optional, parameter separated list of the modes to filter by (optional)</param>
        /// <param name="faresOnly">True to only return stations in that have Fares data available for single fares to another station. (optional)</param>
        /// <param name="maxResults">An optional result limit, defaulting to and with a maximum of 50. Since children of the stop point heirarchy are returned for matches,              it is possible that the flattened result set will contain more than 50 items. (optional)</param>
        /// <param name="lines">An optional, parameter separated list of the lines to filter by (optional)</param>
        /// <param name="includeHubs">If true, returns results including HUBs. (optional)</param>
        /// <param name="tflOperatedNationalRailStationsOnly">If the national-rail mode is included, this flag will filter the national rail stations so that only those operated by TfL are returned (optional)</param>
        /// <returns>ApiResponse of TflApiPresentationEntitiesSearchResponse</returns>
        ApiResponse<TflApiPresentationEntitiesSearchResponse> StopPointSearchWithHttpInfo (string query, List<string> modes = null, bool? faresOnly = null, int? maxResults = null, List<string> lines = null, bool? includeHubs = null, bool? tflOperatedNationalRailStationsOnly = null);
        /// <summary>
        /// Search StopPoints by their common name, or their 5-digit Countdown Bus Stop Code.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The query string, case-insensitive. Leading and trailing wildcards are applied automatically.</param>
        /// <param name="modes">An optional, parameter separated list of the modes to filter by (optional)</param>
        /// <param name="faresOnly">True to only return stations in that have Fares data available for single fares to another station. (optional)</param>
        /// <param name="maxResults">An optional result limit, defaulting to and with a maximum of 50. Since children of the stop point heirarchy are returned for matches,              it is possible that the flattened result set will contain more than 50 items. (optional)</param>
        /// <param name="lines">An optional, parameter separated list of the lines to filter by (optional)</param>
        /// <param name="includeHubs">If true, returns results including HUBs. (optional)</param>
        /// <param name="tflOperatedNationalRailStationsOnly">If the national-rail mode is included, this flag will filter the national rail stations so that only those operated by TfL are returned (optional)</param>
        /// <returns>TflApiPresentationEntitiesSearchResponse</returns>
        TflApiPresentationEntitiesSearchResponse StopPointSearch_0 (string query, List<string> modes = null, bool? faresOnly = null, int? maxResults = null, List<string> lines = null, bool? includeHubs = null, bool? tflOperatedNationalRailStationsOnly = null);

        /// <summary>
        /// Search StopPoints by their common name, or their 5-digit Countdown Bus Stop Code.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The query string, case-insensitive. Leading and trailing wildcards are applied automatically.</param>
        /// <param name="modes">An optional, parameter separated list of the modes to filter by (optional)</param>
        /// <param name="faresOnly">True to only return stations in that have Fares data available for single fares to another station. (optional)</param>
        /// <param name="maxResults">An optional result limit, defaulting to and with a maximum of 50. Since children of the stop point heirarchy are returned for matches,              it is possible that the flattened result set will contain more than 50 items. (optional)</param>
        /// <param name="lines">An optional, parameter separated list of the lines to filter by (optional)</param>
        /// <param name="includeHubs">If true, returns results including HUBs. (optional)</param>
        /// <param name="tflOperatedNationalRailStationsOnly">If the national-rail mode is included, this flag will filter the national rail stations so that only those operated by TfL are returned (optional)</param>
        /// <returns>ApiResponse of TflApiPresentationEntitiesSearchResponse</returns>
        ApiResponse<TflApiPresentationEntitiesSearchResponse> StopPointSearch_0WithHttpInfo (string query, List<string> modes = null, bool? faresOnly = null, int? maxResults = null, List<string> lines = null, bool? includeHubs = null, bool? tflOperatedNationalRailStationsOnly = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Gets the list of arrival and departure predictions for the given stop point id (overground, Elizabeth line and thameslink only)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A StopPoint id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)</param>
        /// <param name="lineIds">A comma-separated list of line ids e.g. elizabeth, london-overground, thameslink</param>
        /// <returns>Task of List&lt;TflApiPresentationEntitiesArrivalDeparture&gt;</returns>
        System.Threading.Tasks.Task<List<TflApiPresentationEntitiesArrivalDeparture>> StopPointArrivalDeparturesAsync (string id, List<string> lineIds);

        /// <summary>
        /// Gets the list of arrival and departure predictions for the given stop point id (overground, Elizabeth line and thameslink only)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A StopPoint id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)</param>
        /// <param name="lineIds">A comma-separated list of line ids e.g. elizabeth, london-overground, thameslink</param>
        /// <returns>Task of ApiResponse (List&lt;TflApiPresentationEntitiesArrivalDeparture&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesArrivalDeparture>>> StopPointArrivalDeparturesAsyncWithHttpInfo (string id, List<string> lineIds);
        /// <summary>
        /// Gets the list of arrival predictions for the given stop point id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A StopPoint id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)</param>
        /// <returns>Task of List&lt;TflApiPresentationEntitiesPrediction&gt;</returns>
        System.Threading.Tasks.Task<List<TflApiPresentationEntitiesPrediction>> StopPointArrivalsAsync (string id);

        /// <summary>
        /// Gets the list of arrival predictions for the given stop point id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A StopPoint id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)</param>
        /// <returns>Task of ApiResponse (List&lt;TflApiPresentationEntitiesPrediction&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesPrediction>>> StopPointArrivalsAsyncWithHttpInfo (string id);
        /// <summary>
        /// Gets all the Crowding data (static) for the StopPointId, plus crowding data for a given line and optionally a particular direction.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The Naptan id of the stop</param>
        /// <param name="line">A particular line e.g. victoria, circle, northern etc.</param>
        /// <param name="direction">The direction of travel. Can be inbound or outbound.</param>
        /// <returns>Task of List&lt;TflApiPresentationEntitiesStopPoint&gt;</returns>
        System.Threading.Tasks.Task<List<TflApiPresentationEntitiesStopPoint>> StopPointCrowdingAsync (string id, string line, string direction);

        /// <summary>
        /// Gets all the Crowding data (static) for the StopPointId, plus crowding data for a given line and optionally a particular direction.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The Naptan id of the stop</param>
        /// <param name="line">A particular line e.g. victoria, circle, northern etc.</param>
        /// <param name="direction">The direction of travel. Can be inbound or outbound.</param>
        /// <returns>Task of ApiResponse (List&lt;TflApiPresentationEntitiesStopPoint&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesStopPoint>>> StopPointCrowdingAsyncWithHttpInfo (string id, string line, string direction);
        /// <summary>
        /// Returns the canonical direction, \&quot;inbound\&quot; or \&quot;outbound\&quot;, for a given pair of stop point Ids in the direction from -&amp;gt; to.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Originating stop id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)</param>
        /// <param name="toStopPointId">Destination stop id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)</param>
        /// <param name="lineId">Optional line id filter e.g. victoria (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> StopPointDirectionAsync (string id, string toStopPointId, string lineId = null);

        /// <summary>
        /// Returns the canonical direction, \&quot;inbound\&quot; or \&quot;outbound\&quot;, for a given pair of stop point Ids in the direction from -&amp;gt; to.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Originating stop id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)</param>
        /// <param name="toStopPointId">Destination stop id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)</param>
        /// <param name="lineId">Optional line id filter e.g. victoria (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> StopPointDirectionAsyncWithHttpInfo (string id, string toStopPointId, string lineId = null);
        /// <summary>
        /// Gets all disruptions for the specified StopPointId, plus disruptions for any child Naptan records it may have.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma-seperated list of stop point ids. Max. approx. 20 ids.              You can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name.</param>
        /// <param name="getFamily">Specify true to return disruptions for entire family, or false to return disruptions for just this stop point. Defaults to false. (optional)</param>
        /// <param name="includeRouteBlockedStops"> (optional)</param>
        /// <param name="flattenResponse">Specify true to associate all disruptions with parent stop point. (Only applicable when getFamily is true). (optional)</param>
        /// <returns>Task of List&lt;TflApiPresentationEntitiesDisruptedPoint&gt;</returns>
        System.Threading.Tasks.Task<List<TflApiPresentationEntitiesDisruptedPoint>> StopPointDisruptionAsync (List<string> ids, bool? getFamily = null, bool? includeRouteBlockedStops = null, bool? flattenResponse = null);

        /// <summary>
        /// Gets all disruptions for the specified StopPointId, plus disruptions for any child Naptan records it may have.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma-seperated list of stop point ids. Max. approx. 20 ids.              You can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name.</param>
        /// <param name="getFamily">Specify true to return disruptions for entire family, or false to return disruptions for just this stop point. Defaults to false. (optional)</param>
        /// <param name="includeRouteBlockedStops"> (optional)</param>
        /// <param name="flattenResponse">Specify true to associate all disruptions with parent stop point. (Only applicable when getFamily is true). (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TflApiPresentationEntitiesDisruptedPoint&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesDisruptedPoint>>> StopPointDisruptionAsyncWithHttpInfo (List<string> ids, bool? getFamily = null, bool? includeRouteBlockedStops = null, bool? flattenResponse = null);
        /// <summary>
        /// Gets a distinct list of disrupted stop points for the given modes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modes">A comma-seperated list of modes e.g. tube,dlr</param>
        /// <param name="includeRouteBlockedStops"> (optional)</param>
        /// <returns>Task of List&lt;TflApiPresentationEntitiesDisruptedPoint&gt;</returns>
        System.Threading.Tasks.Task<List<TflApiPresentationEntitiesDisruptedPoint>> StopPointDisruptionByModeAsync (List<string> modes, bool? includeRouteBlockedStops = null);

        /// <summary>
        /// Gets a distinct list of disrupted stop points for the given modes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modes">A comma-seperated list of modes e.g. tube,dlr</param>
        /// <param name="includeRouteBlockedStops"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TflApiPresentationEntitiesDisruptedPoint&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesDisruptedPoint>>> StopPointDisruptionByModeAsyncWithHttpInfo (List<string> modes, bool? includeRouteBlockedStops = null);
        /// <summary>
        /// Get a list of places corresponding to a given id and place types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A naptan id for a stop point (station naptan code e.g. 940GZZLUASL).</param>
        /// <param name="placeTypes">A comcomma-separated value representing the place types.</param>
        /// <returns>Task of List&lt;TflApiPresentationEntitiesPlace&gt;</returns>
        System.Threading.Tasks.Task<List<TflApiPresentationEntitiesPlace>> StopPointGetAsync (string id, List<string> placeTypes);

        /// <summary>
        /// Get a list of places corresponding to a given id and place types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A naptan id for a stop point (station naptan code e.g. 940GZZLUASL).</param>
        /// <param name="placeTypes">A comcomma-separated value representing the place types.</param>
        /// <returns>Task of ApiResponse (List&lt;TflApiPresentationEntitiesPlace&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesPlace>>> StopPointGetAsyncWithHttpInfo (string id, List<string> placeTypes);
        /// <summary>
        /// Gets a list of StopPoints within {radius} by the specified criteria
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopTypes">a list of stopTypes that should be returned (a list of valid stop types can be obtained from the StopPoint/meta/stoptypes endpoint)</param>
        /// <param name="locationLat"></param>
        /// <param name="locationLon"></param>
        /// <param name="radius">the radius of the bounding circle in metres (default : 200) (optional)</param>
        /// <param name="useStopPointHierarchy">Re-arrange the output into a parent/child hierarchy (optional)</param>
        /// <param name="modes">the list of modes to search (comma separated mode names e.g. tube,dlr) (optional)</param>
        /// <param name="categories">an optional list of comma separated property categories to return in the StopPoint&#39;s property bag. If null or empty, all categories of property are returned. Pass the keyword \&quot;none\&quot; to return no properties (a valid list of categories can be obtained from the /StopPoint/Meta/categories endpoint) (optional)</param>
        /// <param name="returnLines">true to return the lines that each stop point serves as a nested resource (optional)</param>
        /// <returns>Task of TflApiPresentationEntitiesStopPointsResponse</returns>
        System.Threading.Tasks.Task<TflApiPresentationEntitiesStopPointsResponse> StopPointGetByGeoPointAsync (List<string> stopTypes, double? locationLat, double? locationLon, int? radius = null, bool? useStopPointHierarchy = null, List<string> modes = null, List<string> categories = null, bool? returnLines = null);

        /// <summary>
        /// Gets a list of StopPoints within {radius} by the specified criteria
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopTypes">a list of stopTypes that should be returned (a list of valid stop types can be obtained from the StopPoint/meta/stoptypes endpoint)</param>
        /// <param name="locationLat"></param>
        /// <param name="locationLon"></param>
        /// <param name="radius">the radius of the bounding circle in metres (default : 200) (optional)</param>
        /// <param name="useStopPointHierarchy">Re-arrange the output into a parent/child hierarchy (optional)</param>
        /// <param name="modes">the list of modes to search (comma separated mode names e.g. tube,dlr) (optional)</param>
        /// <param name="categories">an optional list of comma separated property categories to return in the StopPoint&#39;s property bag. If null or empty, all categories of property are returned. Pass the keyword \&quot;none\&quot; to return no properties (a valid list of categories can be obtained from the /StopPoint/Meta/categories endpoint) (optional)</param>
        /// <param name="returnLines">true to return the lines that each stop point serves as a nested resource (optional)</param>
        /// <returns>Task of ApiResponse (TflApiPresentationEntitiesStopPointsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TflApiPresentationEntitiesStopPointsResponse>> StopPointGetByGeoPointAsyncWithHttpInfo (List<string> stopTypes, double? locationLat, double? locationLon, int? radius = null, bool? useStopPointHierarchy = null, List<string> modes = null, List<string> categories = null, bool? returnLines = null);
        /// <summary>
        /// Gets a list of StopPoints filtered by the modes available at that StopPoint.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modes">A comma-seperated list of modes e.g. tube,dlr</param>
        /// <param name="page">The data set page to return. Page 1 equates to the first 1000 stop points, page 2 equates to 1001-2000 etc. Must be entered for bus mode as data set is too large. (optional)</param>
        /// <returns>Task of TflApiPresentationEntitiesStopPointsResponse</returns>
        System.Threading.Tasks.Task<TflApiPresentationEntitiesStopPointsResponse> StopPointGetByModeAsync (List<string> modes, int? page = null);

        /// <summary>
        /// Gets a list of StopPoints filtered by the modes available at that StopPoint.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modes">A comma-seperated list of modes e.g. tube,dlr</param>
        /// <param name="page">The data set page to return. Page 1 equates to the first 1000 stop points, page 2 equates to 1001-2000 etc. Must be entered for bus mode as data set is too large. (optional)</param>
        /// <returns>Task of ApiResponse (TflApiPresentationEntitiesStopPointsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TflApiPresentationEntitiesStopPointsResponse>> StopPointGetByModeAsyncWithHttpInfo (List<string> modes, int? page = null);
        /// <summary>
        /// Gets a StopPoint for a given sms code.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A 5-digit Countdown Bus Stop Code e.g. 73241, 50435, 56334.</param>
        /// <param name="output">If set to \&quot;web\&quot;, a 302 redirect to relevant website bus stop page is returned. Valid values are : web. All other values are ignored. (optional)</param>
        /// <returns>Task of SystemObject</returns>
        System.Threading.Tasks.Task<SystemObject> StopPointGetBySmsAsync (string id, string output = null);

        /// <summary>
        /// Gets a StopPoint for a given sms code.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A 5-digit Countdown Bus Stop Code e.g. 73241, 50435, 56334.</param>
        /// <param name="output">If set to \&quot;web\&quot;, a 302 redirect to relevant website bus stop page is returned. Valid values are : web. All other values are ignored. (optional)</param>
        /// <returns>Task of ApiResponse (SystemObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<SystemObject>> StopPointGetBySmsAsyncWithHttpInfo (string id, string output = null);
        /// <summary>
        /// Gets all stop points of a given type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="types">A comma-separated list of the types to return. Max. approx. 12 types.               A list of valid stop types can be obtained from the StopPoint/meta/stoptypes endpoint.</param>
        /// <returns>Task of List&lt;TflApiPresentationEntitiesStopPoint&gt;</returns>
        System.Threading.Tasks.Task<List<TflApiPresentationEntitiesStopPoint>> StopPointGetByTypeAsync (List<string> types);

        /// <summary>
        /// Gets all stop points of a given type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="types">A comma-separated list of the types to return. Max. approx. 12 types.               A list of valid stop types can be obtained from the StopPoint/meta/stoptypes endpoint.</param>
        /// <returns>Task of ApiResponse (List&lt;TflApiPresentationEntitiesStopPoint&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesStopPoint>>> StopPointGetByTypeAsyncWithHttpInfo (List<string> types);
        /// <summary>
        /// Gets all the stop points of given type(s) with a page number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="types"></param>
        /// <param name="page"></param>
        /// <returns>Task of List&lt;TflApiPresentationEntitiesStopPoint&gt;</returns>
        System.Threading.Tasks.Task<List<TflApiPresentationEntitiesStopPoint>> StopPointGetByTypeWithPaginationAsync (List<string> types, int? page);

        /// <summary>
        /// Gets all the stop points of given type(s) with a page number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="types"></param>
        /// <param name="page"></param>
        /// <returns>Task of ApiResponse (List&lt;TflApiPresentationEntitiesStopPoint&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesStopPoint>>> StopPointGetByTypeWithPaginationAsyncWithHttpInfo (List<string> types, int? page);
        /// <summary>
        /// Get car parks corresponding to the given stop point id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopPointId">stopPointId is required to get the car parks.</param>
        /// <returns>Task of List&lt;TflApiPresentationEntitiesPlace&gt;</returns>
        System.Threading.Tasks.Task<List<TflApiPresentationEntitiesPlace>> StopPointGetCarParksByIdAsync (string stopPointId);

        /// <summary>
        /// Get car parks corresponding to the given stop point id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopPointId">stopPointId is required to get the car parks.</param>
        /// <returns>Task of ApiResponse (List&lt;TflApiPresentationEntitiesPlace&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesPlace>>> StopPointGetCarParksByIdAsyncWithHttpInfo (string stopPointId);
        /// <summary>
        /// Gets a list of StopPoints corresponding to the given list of stop ids.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma-separated list of stop point ids (station naptan code e.g. 940GZZLUASL). Max. approx. 20 ids.              You can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name.</param>
        /// <param name="includeCrowdingData">Include the crowding data (static). To Filter further use: /StopPoint/{ids}/Crowding/{line} (optional)</param>
        /// <returns>Task of List&lt;TflApiPresentationEntitiesStopPoint&gt;</returns>
        System.Threading.Tasks.Task<List<TflApiPresentationEntitiesStopPoint>> StopPointGetIdAsync (List<string> ids, bool? includeCrowdingData = null);

        /// <summary>
        /// Gets a list of StopPoints corresponding to the given list of stop ids.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma-separated list of stop point ids (station naptan code e.g. 940GZZLUASL). Max. approx. 20 ids.              You can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name.</param>
        /// <param name="includeCrowdingData">Include the crowding data (static). To Filter further use: /StopPoint/{ids}/Crowding/{line} (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TflApiPresentationEntitiesStopPoint&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesStopPoint>>> StopPointGetIdAsyncWithHttpInfo (List<string> ids, bool? includeCrowdingData = null);
        /// <summary>
        /// Gets the service types for a given stoppoint
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The Naptan id of the stop</param>
        /// <param name="lineIds">The lines which contain the given Naptan id (all lines relevant to the given stoppoint if empty) (optional)</param>
        /// <param name="modes">The modes which the lines are relevant to (all if empty) (optional)</param>
        /// <returns>Task of List&lt;TflApiPresentationEntitiesLineServiceType&gt;</returns>
        System.Threading.Tasks.Task<List<TflApiPresentationEntitiesLineServiceType>> StopPointGetServiceTypesAsync (string id, List<string> lineIds = null, List<string> modes = null);

        /// <summary>
        /// Gets the service types for a given stoppoint
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The Naptan id of the stop</param>
        /// <param name="lineIds">The lines which contain the given Naptan id (all lines relevant to the given stoppoint if empty) (optional)</param>
        /// <param name="modes">The modes which the lines are relevant to (all if empty) (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TflApiPresentationEntitiesLineServiceType&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesLineServiceType>>> StopPointGetServiceTypesAsyncWithHttpInfo (string id, List<string> lineIds = null, List<string> modes = null);
        /// <summary>
        /// Gets a list of taxi ranks corresponding to the given stop point id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopPointId">stopPointId is required to get the taxi ranks.</param>
        /// <returns>Task of List&lt;TflApiPresentationEntitiesPlace&gt;</returns>
        System.Threading.Tasks.Task<List<TflApiPresentationEntitiesPlace>> StopPointGetTaxiRanksByIdsAsync (string stopPointId);

        /// <summary>
        /// Gets a list of taxi ranks corresponding to the given stop point id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopPointId">stopPointId is required to get the taxi ranks.</param>
        /// <returns>Task of ApiResponse (List&lt;TflApiPresentationEntitiesPlace&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesPlace>>> StopPointGetTaxiRanksByIdsAsyncWithHttpInfo (string stopPointId);
        /// <summary>
        /// Gets the list of available StopPoint additional information categories
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TflApiPresentationEntitiesStopPointCategory&gt;</returns>
        System.Threading.Tasks.Task<List<TflApiPresentationEntitiesStopPointCategory>> StopPointMetaCategoriesAsync ();

        /// <summary>
        /// Gets the list of available StopPoint additional information categories
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TflApiPresentationEntitiesStopPointCategory&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesStopPointCategory>>> StopPointMetaCategoriesAsyncWithHttpInfo ();
        /// <summary>
        /// Gets the list of available StopPoint modes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TflApiPresentationEntitiesMode&gt;</returns>
        System.Threading.Tasks.Task<List<TflApiPresentationEntitiesMode>> StopPointMetaModesAsync ();

        /// <summary>
        /// Gets the list of available StopPoint modes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TflApiPresentationEntitiesMode&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesMode>>> StopPointMetaModesAsyncWithHttpInfo ();
        /// <summary>
        /// Gets the list of available StopPoint types
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> StopPointMetaStopTypesAsync ();

        /// <summary>
        /// Gets the list of available StopPoint types
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> StopPointMetaStopTypesAsyncWithHttpInfo ();
        /// <summary>
        /// Gets Stopoints that are reachable from a station/line combination.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) of the stop point to filter by</param>
        /// <param name="lineId">Line id of the line to filter by (e.g. victoria)</param>
        /// <param name="serviceTypes">A comma-separated list of service types to filter on. If not specified. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)</param>
        /// <returns>Task of List&lt;TflApiPresentationEntitiesStopPoint&gt;</returns>
        System.Threading.Tasks.Task<List<TflApiPresentationEntitiesStopPoint>> StopPointReachableFromAsync (string id, string lineId, List<string> serviceTypes = null);

        /// <summary>
        /// Gets Stopoints that are reachable from a station/line combination.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) of the stop point to filter by</param>
        /// <param name="lineId">Line id of the line to filter by (e.g. victoria)</param>
        /// <param name="serviceTypes">A comma-separated list of service types to filter on. If not specified. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TflApiPresentationEntitiesStopPoint&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesStopPoint>>> StopPointReachableFromAsyncWithHttpInfo (string id, string lineId, List<string> serviceTypes = null);
        /// <summary>
        /// Returns the route sections for all the lines that service the given stop point ids
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A stop point id (station naptan codes e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)</param>
        /// <param name="serviceTypes">A comma-separated list of service types to filter on. If not specified. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)</param>
        /// <returns>Task of List&lt;TflApiPresentationEntitiesStopPointRouteSection&gt;</returns>
        System.Threading.Tasks.Task<List<TflApiPresentationEntitiesStopPointRouteSection>> StopPointRouteAsync (string id, List<string> serviceTypes = null);

        /// <summary>
        /// Returns the route sections for all the lines that service the given stop point ids
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A stop point id (station naptan codes e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)</param>
        /// <param name="serviceTypes">A comma-separated list of service types to filter on. If not specified. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TflApiPresentationEntitiesStopPointRouteSection&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesStopPointRouteSection>>> StopPointRouteAsyncWithHttpInfo (string id, List<string> serviceTypes = null);
        /// <summary>
        /// Search StopPoints by their common name, or their 5-digit Countdown Bus Stop Code.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The query string, case-insensitive. Leading and trailing wildcards are applied automatically.</param>
        /// <param name="modes">An optional, parameter separated list of the modes to filter by (optional)</param>
        /// <param name="faresOnly">True to only return stations in that have Fares data available for single fares to another station. (optional)</param>
        /// <param name="maxResults">An optional result limit, defaulting to and with a maximum of 50. Since children of the stop point heirarchy are returned for matches,              it is possible that the flattened result set will contain more than 50 items. (optional)</param>
        /// <param name="lines">An optional, parameter separated list of the lines to filter by (optional)</param>
        /// <param name="includeHubs">If true, returns results including HUBs. (optional)</param>
        /// <param name="tflOperatedNationalRailStationsOnly">If the national-rail mode is included, this flag will filter the national rail stations so that only those operated by TfL are returned (optional)</param>
        /// <returns>Task of TflApiPresentationEntitiesSearchResponse</returns>
        System.Threading.Tasks.Task<TflApiPresentationEntitiesSearchResponse> StopPointSearchAsync (string query, List<string> modes = null, bool? faresOnly = null, int? maxResults = null, List<string> lines = null, bool? includeHubs = null, bool? tflOperatedNationalRailStationsOnly = null);

        /// <summary>
        /// Search StopPoints by their common name, or their 5-digit Countdown Bus Stop Code.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The query string, case-insensitive. Leading and trailing wildcards are applied automatically.</param>
        /// <param name="modes">An optional, parameter separated list of the modes to filter by (optional)</param>
        /// <param name="faresOnly">True to only return stations in that have Fares data available for single fares to another station. (optional)</param>
        /// <param name="maxResults">An optional result limit, defaulting to and with a maximum of 50. Since children of the stop point heirarchy are returned for matches,              it is possible that the flattened result set will contain more than 50 items. (optional)</param>
        /// <param name="lines">An optional, parameter separated list of the lines to filter by (optional)</param>
        /// <param name="includeHubs">If true, returns results including HUBs. (optional)</param>
        /// <param name="tflOperatedNationalRailStationsOnly">If the national-rail mode is included, this flag will filter the national rail stations so that only those operated by TfL are returned (optional)</param>
        /// <returns>Task of ApiResponse (TflApiPresentationEntitiesSearchResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TflApiPresentationEntitiesSearchResponse>> StopPointSearchAsyncWithHttpInfo (string query, List<string> modes = null, bool? faresOnly = null, int? maxResults = null, List<string> lines = null, bool? includeHubs = null, bool? tflOperatedNationalRailStationsOnly = null);
        /// <summary>
        /// Search StopPoints by their common name, or their 5-digit Countdown Bus Stop Code.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The query string, case-insensitive. Leading and trailing wildcards are applied automatically.</param>
        /// <param name="modes">An optional, parameter separated list of the modes to filter by (optional)</param>
        /// <param name="faresOnly">True to only return stations in that have Fares data available for single fares to another station. (optional)</param>
        /// <param name="maxResults">An optional result limit, defaulting to and with a maximum of 50. Since children of the stop point heirarchy are returned for matches,              it is possible that the flattened result set will contain more than 50 items. (optional)</param>
        /// <param name="lines">An optional, parameter separated list of the lines to filter by (optional)</param>
        /// <param name="includeHubs">If true, returns results including HUBs. (optional)</param>
        /// <param name="tflOperatedNationalRailStationsOnly">If the national-rail mode is included, this flag will filter the national rail stations so that only those operated by TfL are returned (optional)</param>
        /// <returns>Task of TflApiPresentationEntitiesSearchResponse</returns>
        System.Threading.Tasks.Task<TflApiPresentationEntitiesSearchResponse> StopPointSearch_0Async (string query, List<string> modes = null, bool? faresOnly = null, int? maxResults = null, List<string> lines = null, bool? includeHubs = null, bool? tflOperatedNationalRailStationsOnly = null);

        /// <summary>
        /// Search StopPoints by their common name, or their 5-digit Countdown Bus Stop Code.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The query string, case-insensitive. Leading and trailing wildcards are applied automatically.</param>
        /// <param name="modes">An optional, parameter separated list of the modes to filter by (optional)</param>
        /// <param name="faresOnly">True to only return stations in that have Fares data available for single fares to another station. (optional)</param>
        /// <param name="maxResults">An optional result limit, defaulting to and with a maximum of 50. Since children of the stop point heirarchy are returned for matches,              it is possible that the flattened result set will contain more than 50 items. (optional)</param>
        /// <param name="lines">An optional, parameter separated list of the lines to filter by (optional)</param>
        /// <param name="includeHubs">If true, returns results including HUBs. (optional)</param>
        /// <param name="tflOperatedNationalRailStationsOnly">If the national-rail mode is included, this flag will filter the national rail stations so that only those operated by TfL are returned (optional)</param>
        /// <returns>Task of ApiResponse (TflApiPresentationEntitiesSearchResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TflApiPresentationEntitiesSearchResponse>> StopPointSearch_0AsyncWithHttpInfo (string query, List<string> modes = null, bool? faresOnly = null, int? maxResults = null, List<string> lines = null, bool? includeHubs = null, bool? tflOperatedNationalRailStationsOnly = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class StopPointApi : IStopPointApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="StopPointApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StopPointApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StopPointApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public StopPointApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Gets the list of arrival and departure predictions for the given stop point id (overground, Elizabeth line and thameslink only) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A StopPoint id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)</param>
        /// <param name="lineIds">A comma-separated list of line ids e.g. elizabeth, london-overground, thameslink</param>
        /// <returns>List&lt;TflApiPresentationEntitiesArrivalDeparture&gt;</returns>
        public List<TflApiPresentationEntitiesArrivalDeparture> StopPointArrivalDepartures (string id, List<string> lineIds)
        {
             ApiResponse<List<TflApiPresentationEntitiesArrivalDeparture>> localVarResponse = StopPointArrivalDeparturesWithHttpInfo(id, lineIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the list of arrival and departure predictions for the given stop point id (overground, Elizabeth line and thameslink only) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A StopPoint id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)</param>
        /// <param name="lineIds">A comma-separated list of line ids e.g. elizabeth, london-overground, thameslink</param>
        /// <returns>ApiResponse of List&lt;TflApiPresentationEntitiesArrivalDeparture&gt;</returns>
        public ApiResponse< List<TflApiPresentationEntitiesArrivalDeparture> > StopPointArrivalDeparturesWithHttpInfo (string id, List<string> lineIds)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StopPointApi->StopPointArrivalDepartures");
            // verify the required parameter 'lineIds' is set
            if (lineIds == null)
                throw new ApiException(400, "Missing required parameter 'lineIds' when calling StopPointApi->StopPointArrivalDepartures");

            var localVarPath = "/StopPoint/{id}/ArrivalDepartures";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (lineIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "lineIds", lineIds)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StopPointArrivalDepartures", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TflApiPresentationEntitiesArrivalDeparture>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TflApiPresentationEntitiesArrivalDeparture>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TflApiPresentationEntitiesArrivalDeparture>)));
        }

        /// <summary>
        /// Gets the list of arrival and departure predictions for the given stop point id (overground, Elizabeth line and thameslink only) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A StopPoint id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)</param>
        /// <param name="lineIds">A comma-separated list of line ids e.g. elizabeth, london-overground, thameslink</param>
        /// <returns>Task of List&lt;TflApiPresentationEntitiesArrivalDeparture&gt;</returns>
        public async System.Threading.Tasks.Task<List<TflApiPresentationEntitiesArrivalDeparture>> StopPointArrivalDeparturesAsync (string id, List<string> lineIds)
        {
             ApiResponse<List<TflApiPresentationEntitiesArrivalDeparture>> localVarResponse = await StopPointArrivalDeparturesAsyncWithHttpInfo(id, lineIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the list of arrival and departure predictions for the given stop point id (overground, Elizabeth line and thameslink only) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A StopPoint id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)</param>
        /// <param name="lineIds">A comma-separated list of line ids e.g. elizabeth, london-overground, thameslink</param>
        /// <returns>Task of ApiResponse (List&lt;TflApiPresentationEntitiesArrivalDeparture&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesArrivalDeparture>>> StopPointArrivalDeparturesAsyncWithHttpInfo (string id, List<string> lineIds)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StopPointApi->StopPointArrivalDepartures");
            // verify the required parameter 'lineIds' is set
            if (lineIds == null)
                throw new ApiException(400, "Missing required parameter 'lineIds' when calling StopPointApi->StopPointArrivalDepartures");

            var localVarPath = "/StopPoint/{id}/ArrivalDepartures";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (lineIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "lineIds", lineIds)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StopPointArrivalDepartures", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TflApiPresentationEntitiesArrivalDeparture>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TflApiPresentationEntitiesArrivalDeparture>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TflApiPresentationEntitiesArrivalDeparture>)));
        }

        /// <summary>
        /// Gets the list of arrival predictions for the given stop point id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A StopPoint id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)</param>
        /// <returns>List&lt;TflApiPresentationEntitiesPrediction&gt;</returns>
        public List<TflApiPresentationEntitiesPrediction> StopPointArrivals (string id)
        {
             ApiResponse<List<TflApiPresentationEntitiesPrediction>> localVarResponse = StopPointArrivalsWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the list of arrival predictions for the given stop point id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A StopPoint id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)</param>
        /// <returns>ApiResponse of List&lt;TflApiPresentationEntitiesPrediction&gt;</returns>
        public ApiResponse< List<TflApiPresentationEntitiesPrediction> > StopPointArrivalsWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StopPointApi->StopPointArrivals");

            var localVarPath = "/StopPoint/{id}/Arrivals";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StopPointArrivals", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TflApiPresentationEntitiesPrediction>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TflApiPresentationEntitiesPrediction>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TflApiPresentationEntitiesPrediction>)));
        }

        /// <summary>
        /// Gets the list of arrival predictions for the given stop point id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A StopPoint id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)</param>
        /// <returns>Task of List&lt;TflApiPresentationEntitiesPrediction&gt;</returns>
        public async System.Threading.Tasks.Task<List<TflApiPresentationEntitiesPrediction>> StopPointArrivalsAsync (string id)
        {
             ApiResponse<List<TflApiPresentationEntitiesPrediction>> localVarResponse = await StopPointArrivalsAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the list of arrival predictions for the given stop point id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A StopPoint id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)</param>
        /// <returns>Task of ApiResponse (List&lt;TflApiPresentationEntitiesPrediction&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesPrediction>>> StopPointArrivalsAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StopPointApi->StopPointArrivals");

            var localVarPath = "/StopPoint/{id}/Arrivals";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StopPointArrivals", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TflApiPresentationEntitiesPrediction>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TflApiPresentationEntitiesPrediction>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TflApiPresentationEntitiesPrediction>)));
        }

        /// <summary>
        /// Gets all the Crowding data (static) for the StopPointId, plus crowding data for a given line and optionally a particular direction. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The Naptan id of the stop</param>
        /// <param name="line">A particular line e.g. victoria, circle, northern etc.</param>
        /// <param name="direction">The direction of travel. Can be inbound or outbound.</param>
        /// <returns>List&lt;TflApiPresentationEntitiesStopPoint&gt;</returns>
        public List<TflApiPresentationEntitiesStopPoint> StopPointCrowding (string id, string line, string direction)
        {
             ApiResponse<List<TflApiPresentationEntitiesStopPoint>> localVarResponse = StopPointCrowdingWithHttpInfo(id, line, direction);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all the Crowding data (static) for the StopPointId, plus crowding data for a given line and optionally a particular direction. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The Naptan id of the stop</param>
        /// <param name="line">A particular line e.g. victoria, circle, northern etc.</param>
        /// <param name="direction">The direction of travel. Can be inbound or outbound.</param>
        /// <returns>ApiResponse of List&lt;TflApiPresentationEntitiesStopPoint&gt;</returns>
        public ApiResponse< List<TflApiPresentationEntitiesStopPoint> > StopPointCrowdingWithHttpInfo (string id, string line, string direction)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StopPointApi->StopPointCrowding");
            // verify the required parameter 'line' is set
            if (line == null)
                throw new ApiException(400, "Missing required parameter 'line' when calling StopPointApi->StopPointCrowding");
            // verify the required parameter 'direction' is set
            if (direction == null)
                throw new ApiException(400, "Missing required parameter 'direction' when calling StopPointApi->StopPointCrowding");

            var localVarPath = "/StopPoint/{id}/Crowding/{line}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (line != null) localVarPathParams.Add("line", this.Configuration.ApiClient.ParameterToString(line)); // path parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StopPointCrowding", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TflApiPresentationEntitiesStopPoint>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TflApiPresentationEntitiesStopPoint>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TflApiPresentationEntitiesStopPoint>)));
        }

        /// <summary>
        /// Gets all the Crowding data (static) for the StopPointId, plus crowding data for a given line and optionally a particular direction. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The Naptan id of the stop</param>
        /// <param name="line">A particular line e.g. victoria, circle, northern etc.</param>
        /// <param name="direction">The direction of travel. Can be inbound or outbound.</param>
        /// <returns>Task of List&lt;TflApiPresentationEntitiesStopPoint&gt;</returns>
        public async System.Threading.Tasks.Task<List<TflApiPresentationEntitiesStopPoint>> StopPointCrowdingAsync (string id, string line, string direction)
        {
             ApiResponse<List<TflApiPresentationEntitiesStopPoint>> localVarResponse = await StopPointCrowdingAsyncWithHttpInfo(id, line, direction);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets all the Crowding data (static) for the StopPointId, plus crowding data for a given line and optionally a particular direction. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The Naptan id of the stop</param>
        /// <param name="line">A particular line e.g. victoria, circle, northern etc.</param>
        /// <param name="direction">The direction of travel. Can be inbound or outbound.</param>
        /// <returns>Task of ApiResponse (List&lt;TflApiPresentationEntitiesStopPoint&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesStopPoint>>> StopPointCrowdingAsyncWithHttpInfo (string id, string line, string direction)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StopPointApi->StopPointCrowding");
            // verify the required parameter 'line' is set
            if (line == null)
                throw new ApiException(400, "Missing required parameter 'line' when calling StopPointApi->StopPointCrowding");
            // verify the required parameter 'direction' is set
            if (direction == null)
                throw new ApiException(400, "Missing required parameter 'direction' when calling StopPointApi->StopPointCrowding");

            var localVarPath = "/StopPoint/{id}/Crowding/{line}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (line != null) localVarPathParams.Add("line", this.Configuration.ApiClient.ParameterToString(line)); // path parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StopPointCrowding", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TflApiPresentationEntitiesStopPoint>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TflApiPresentationEntitiesStopPoint>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TflApiPresentationEntitiesStopPoint>)));
        }

        /// <summary>
        /// Returns the canonical direction, \&quot;inbound\&quot; or \&quot;outbound\&quot;, for a given pair of stop point Ids in the direction from -&amp;gt; to. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Originating stop id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)</param>
        /// <param name="toStopPointId">Destination stop id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)</param>
        /// <param name="lineId">Optional line id filter e.g. victoria (optional)</param>
        /// <returns>string</returns>
        public string StopPointDirection (string id, string toStopPointId, string lineId = null)
        {
             ApiResponse<string> localVarResponse = StopPointDirectionWithHttpInfo(id, toStopPointId, lineId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the canonical direction, \&quot;inbound\&quot; or \&quot;outbound\&quot;, for a given pair of stop point Ids in the direction from -&amp;gt; to. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Originating stop id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)</param>
        /// <param name="toStopPointId">Destination stop id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)</param>
        /// <param name="lineId">Optional line id filter e.g. victoria (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > StopPointDirectionWithHttpInfo (string id, string toStopPointId, string lineId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StopPointApi->StopPointDirection");
            // verify the required parameter 'toStopPointId' is set
            if (toStopPointId == null)
                throw new ApiException(400, "Missing required parameter 'toStopPointId' when calling StopPointApi->StopPointDirection");

            var localVarPath = "/StopPoint/{id}/DirectionTo/{toStopPointId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (toStopPointId != null) localVarPathParams.Add("toStopPointId", this.Configuration.ApiClient.ParameterToString(toStopPointId)); // path parameter
            if (lineId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lineId", lineId)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StopPointDirection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Returns the canonical direction, \&quot;inbound\&quot; or \&quot;outbound\&quot;, for a given pair of stop point Ids in the direction from -&amp;gt; to. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Originating stop id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)</param>
        /// <param name="toStopPointId">Destination stop id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)</param>
        /// <param name="lineId">Optional line id filter e.g. victoria (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> StopPointDirectionAsync (string id, string toStopPointId, string lineId = null)
        {
             ApiResponse<string> localVarResponse = await StopPointDirectionAsyncWithHttpInfo(id, toStopPointId, lineId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the canonical direction, \&quot;inbound\&quot; or \&quot;outbound\&quot;, for a given pair of stop point Ids in the direction from -&amp;gt; to. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Originating stop id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)</param>
        /// <param name="toStopPointId">Destination stop id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)</param>
        /// <param name="lineId">Optional line id filter e.g. victoria (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> StopPointDirectionAsyncWithHttpInfo (string id, string toStopPointId, string lineId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StopPointApi->StopPointDirection");
            // verify the required parameter 'toStopPointId' is set
            if (toStopPointId == null)
                throw new ApiException(400, "Missing required parameter 'toStopPointId' when calling StopPointApi->StopPointDirection");

            var localVarPath = "/StopPoint/{id}/DirectionTo/{toStopPointId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (toStopPointId != null) localVarPathParams.Add("toStopPointId", this.Configuration.ApiClient.ParameterToString(toStopPointId)); // path parameter
            if (lineId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lineId", lineId)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StopPointDirection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Gets all disruptions for the specified StopPointId, plus disruptions for any child Naptan records it may have. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma-seperated list of stop point ids. Max. approx. 20 ids.              You can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name.</param>
        /// <param name="getFamily">Specify true to return disruptions for entire family, or false to return disruptions for just this stop point. Defaults to false. (optional)</param>
        /// <param name="includeRouteBlockedStops"> (optional)</param>
        /// <param name="flattenResponse">Specify true to associate all disruptions with parent stop point. (Only applicable when getFamily is true). (optional)</param>
        /// <returns>List&lt;TflApiPresentationEntitiesDisruptedPoint&gt;</returns>
        public List<TflApiPresentationEntitiesDisruptedPoint> StopPointDisruption (List<string> ids, bool? getFamily = null, bool? includeRouteBlockedStops = null, bool? flattenResponse = null)
        {
             ApiResponse<List<TflApiPresentationEntitiesDisruptedPoint>> localVarResponse = StopPointDisruptionWithHttpInfo(ids, getFamily, includeRouteBlockedStops, flattenResponse);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all disruptions for the specified StopPointId, plus disruptions for any child Naptan records it may have. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma-seperated list of stop point ids. Max. approx. 20 ids.              You can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name.</param>
        /// <param name="getFamily">Specify true to return disruptions for entire family, or false to return disruptions for just this stop point. Defaults to false. (optional)</param>
        /// <param name="includeRouteBlockedStops"> (optional)</param>
        /// <param name="flattenResponse">Specify true to associate all disruptions with parent stop point. (Only applicable when getFamily is true). (optional)</param>
        /// <returns>ApiResponse of List&lt;TflApiPresentationEntitiesDisruptedPoint&gt;</returns>
        public ApiResponse< List<TflApiPresentationEntitiesDisruptedPoint> > StopPointDisruptionWithHttpInfo (List<string> ids, bool? getFamily = null, bool? includeRouteBlockedStops = null, bool? flattenResponse = null)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling StopPointApi->StopPointDisruption");

            var localVarPath = "/StopPoint/{ids}/Disruption";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarPathParams.Add("ids", this.Configuration.ApiClient.ParameterToString(ids)); // path parameter
            if (getFamily != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "getFamily", getFamily)); // query parameter
            if (includeRouteBlockedStops != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeRouteBlockedStops", includeRouteBlockedStops)); // query parameter
            if (flattenResponse != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "flattenResponse", flattenResponse)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StopPointDisruption", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TflApiPresentationEntitiesDisruptedPoint>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TflApiPresentationEntitiesDisruptedPoint>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TflApiPresentationEntitiesDisruptedPoint>)));
        }

        /// <summary>
        /// Gets all disruptions for the specified StopPointId, plus disruptions for any child Naptan records it may have. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma-seperated list of stop point ids. Max. approx. 20 ids.              You can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name.</param>
        /// <param name="getFamily">Specify true to return disruptions for entire family, or false to return disruptions for just this stop point. Defaults to false. (optional)</param>
        /// <param name="includeRouteBlockedStops"> (optional)</param>
        /// <param name="flattenResponse">Specify true to associate all disruptions with parent stop point. (Only applicable when getFamily is true). (optional)</param>
        /// <returns>Task of List&lt;TflApiPresentationEntitiesDisruptedPoint&gt;</returns>
        public async System.Threading.Tasks.Task<List<TflApiPresentationEntitiesDisruptedPoint>> StopPointDisruptionAsync (List<string> ids, bool? getFamily = null, bool? includeRouteBlockedStops = null, bool? flattenResponse = null)
        {
             ApiResponse<List<TflApiPresentationEntitiesDisruptedPoint>> localVarResponse = await StopPointDisruptionAsyncWithHttpInfo(ids, getFamily, includeRouteBlockedStops, flattenResponse);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets all disruptions for the specified StopPointId, plus disruptions for any child Naptan records it may have. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma-seperated list of stop point ids. Max. approx. 20 ids.              You can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name.</param>
        /// <param name="getFamily">Specify true to return disruptions for entire family, or false to return disruptions for just this stop point. Defaults to false. (optional)</param>
        /// <param name="includeRouteBlockedStops"> (optional)</param>
        /// <param name="flattenResponse">Specify true to associate all disruptions with parent stop point. (Only applicable when getFamily is true). (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TflApiPresentationEntitiesDisruptedPoint&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesDisruptedPoint>>> StopPointDisruptionAsyncWithHttpInfo (List<string> ids, bool? getFamily = null, bool? includeRouteBlockedStops = null, bool? flattenResponse = null)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling StopPointApi->StopPointDisruption");

            var localVarPath = "/StopPoint/{ids}/Disruption";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarPathParams.Add("ids", this.Configuration.ApiClient.ParameterToString(ids)); // path parameter
            if (getFamily != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "getFamily", getFamily)); // query parameter
            if (includeRouteBlockedStops != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeRouteBlockedStops", includeRouteBlockedStops)); // query parameter
            if (flattenResponse != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "flattenResponse", flattenResponse)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StopPointDisruption", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TflApiPresentationEntitiesDisruptedPoint>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TflApiPresentationEntitiesDisruptedPoint>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TflApiPresentationEntitiesDisruptedPoint>)));
        }

        /// <summary>
        /// Gets a distinct list of disrupted stop points for the given modes 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modes">A comma-seperated list of modes e.g. tube,dlr</param>
        /// <param name="includeRouteBlockedStops"> (optional)</param>
        /// <returns>List&lt;TflApiPresentationEntitiesDisruptedPoint&gt;</returns>
        public List<TflApiPresentationEntitiesDisruptedPoint> StopPointDisruptionByMode (List<string> modes, bool? includeRouteBlockedStops = null)
        {
             ApiResponse<List<TflApiPresentationEntitiesDisruptedPoint>> localVarResponse = StopPointDisruptionByModeWithHttpInfo(modes, includeRouteBlockedStops);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a distinct list of disrupted stop points for the given modes 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modes">A comma-seperated list of modes e.g. tube,dlr</param>
        /// <param name="includeRouteBlockedStops"> (optional)</param>
        /// <returns>ApiResponse of List&lt;TflApiPresentationEntitiesDisruptedPoint&gt;</returns>
        public ApiResponse< List<TflApiPresentationEntitiesDisruptedPoint> > StopPointDisruptionByModeWithHttpInfo (List<string> modes, bool? includeRouteBlockedStops = null)
        {
            // verify the required parameter 'modes' is set
            if (modes == null)
                throw new ApiException(400, "Missing required parameter 'modes' when calling StopPointApi->StopPointDisruptionByMode");

            var localVarPath = "/StopPoint/Mode/{modes}/Disruption";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modes != null) localVarPathParams.Add("modes", this.Configuration.ApiClient.ParameterToString(modes)); // path parameter
            if (includeRouteBlockedStops != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeRouteBlockedStops", includeRouteBlockedStops)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StopPointDisruptionByMode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TflApiPresentationEntitiesDisruptedPoint>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TflApiPresentationEntitiesDisruptedPoint>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TflApiPresentationEntitiesDisruptedPoint>)));
        }

        /// <summary>
        /// Gets a distinct list of disrupted stop points for the given modes 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modes">A comma-seperated list of modes e.g. tube,dlr</param>
        /// <param name="includeRouteBlockedStops"> (optional)</param>
        /// <returns>Task of List&lt;TflApiPresentationEntitiesDisruptedPoint&gt;</returns>
        public async System.Threading.Tasks.Task<List<TflApiPresentationEntitiesDisruptedPoint>> StopPointDisruptionByModeAsync (List<string> modes, bool? includeRouteBlockedStops = null)
        {
             ApiResponse<List<TflApiPresentationEntitiesDisruptedPoint>> localVarResponse = await StopPointDisruptionByModeAsyncWithHttpInfo(modes, includeRouteBlockedStops);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a distinct list of disrupted stop points for the given modes 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modes">A comma-seperated list of modes e.g. tube,dlr</param>
        /// <param name="includeRouteBlockedStops"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TflApiPresentationEntitiesDisruptedPoint&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesDisruptedPoint>>> StopPointDisruptionByModeAsyncWithHttpInfo (List<string> modes, bool? includeRouteBlockedStops = null)
        {
            // verify the required parameter 'modes' is set
            if (modes == null)
                throw new ApiException(400, "Missing required parameter 'modes' when calling StopPointApi->StopPointDisruptionByMode");

            var localVarPath = "/StopPoint/Mode/{modes}/Disruption";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modes != null) localVarPathParams.Add("modes", this.Configuration.ApiClient.ParameterToString(modes)); // path parameter
            if (includeRouteBlockedStops != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeRouteBlockedStops", includeRouteBlockedStops)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StopPointDisruptionByMode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TflApiPresentationEntitiesDisruptedPoint>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TflApiPresentationEntitiesDisruptedPoint>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TflApiPresentationEntitiesDisruptedPoint>)));
        }

        /// <summary>
        /// Get a list of places corresponding to a given id and place types. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A naptan id for a stop point (station naptan code e.g. 940GZZLUASL).</param>
        /// <param name="placeTypes">A comcomma-separated value representing the place types.</param>
        /// <returns>List&lt;TflApiPresentationEntitiesPlace&gt;</returns>
        public List<TflApiPresentationEntitiesPlace> StopPointGet (string id, List<string> placeTypes)
        {
             ApiResponse<List<TflApiPresentationEntitiesPlace>> localVarResponse = StopPointGetWithHttpInfo(id, placeTypes);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of places corresponding to a given id and place types. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A naptan id for a stop point (station naptan code e.g. 940GZZLUASL).</param>
        /// <param name="placeTypes">A comcomma-separated value representing the place types.</param>
        /// <returns>ApiResponse of List&lt;TflApiPresentationEntitiesPlace&gt;</returns>
        public ApiResponse< List<TflApiPresentationEntitiesPlace> > StopPointGetWithHttpInfo (string id, List<string> placeTypes)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StopPointApi->StopPointGet");
            // verify the required parameter 'placeTypes' is set
            if (placeTypes == null)
                throw new ApiException(400, "Missing required parameter 'placeTypes' when calling StopPointApi->StopPointGet");

            var localVarPath = "/StopPoint/{id}/placeTypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (placeTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "placeTypes", placeTypes)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StopPointGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TflApiPresentationEntitiesPlace>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TflApiPresentationEntitiesPlace>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TflApiPresentationEntitiesPlace>)));
        }

        /// <summary>
        /// Get a list of places corresponding to a given id and place types. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A naptan id for a stop point (station naptan code e.g. 940GZZLUASL).</param>
        /// <param name="placeTypes">A comcomma-separated value representing the place types.</param>
        /// <returns>Task of List&lt;TflApiPresentationEntitiesPlace&gt;</returns>
        public async System.Threading.Tasks.Task<List<TflApiPresentationEntitiesPlace>> StopPointGetAsync (string id, List<string> placeTypes)
        {
             ApiResponse<List<TflApiPresentationEntitiesPlace>> localVarResponse = await StopPointGetAsyncWithHttpInfo(id, placeTypes);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of places corresponding to a given id and place types. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A naptan id for a stop point (station naptan code e.g. 940GZZLUASL).</param>
        /// <param name="placeTypes">A comcomma-separated value representing the place types.</param>
        /// <returns>Task of ApiResponse (List&lt;TflApiPresentationEntitiesPlace&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesPlace>>> StopPointGetAsyncWithHttpInfo (string id, List<string> placeTypes)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StopPointApi->StopPointGet");
            // verify the required parameter 'placeTypes' is set
            if (placeTypes == null)
                throw new ApiException(400, "Missing required parameter 'placeTypes' when calling StopPointApi->StopPointGet");

            var localVarPath = "/StopPoint/{id}/placeTypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (placeTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "placeTypes", placeTypes)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StopPointGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TflApiPresentationEntitiesPlace>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TflApiPresentationEntitiesPlace>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TflApiPresentationEntitiesPlace>)));
        }

        /// <summary>
        /// Gets a list of StopPoints within {radius} by the specified criteria 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopTypes">a list of stopTypes that should be returned (a list of valid stop types can be obtained from the StopPoint/meta/stoptypes endpoint)</param>
        /// <param name="locationLat"></param>
        /// <param name="locationLon"></param>
        /// <param name="radius">the radius of the bounding circle in metres (default : 200) (optional)</param>
        /// <param name="useStopPointHierarchy">Re-arrange the output into a parent/child hierarchy (optional)</param>
        /// <param name="modes">the list of modes to search (comma separated mode names e.g. tube,dlr) (optional)</param>
        /// <param name="categories">an optional list of comma separated property categories to return in the StopPoint&#39;s property bag. If null or empty, all categories of property are returned. Pass the keyword \&quot;none\&quot; to return no properties (a valid list of categories can be obtained from the /StopPoint/Meta/categories endpoint) (optional)</param>
        /// <param name="returnLines">true to return the lines that each stop point serves as a nested resource (optional)</param>
        /// <returns>TflApiPresentationEntitiesStopPointsResponse</returns>
        public TflApiPresentationEntitiesStopPointsResponse StopPointGetByGeoPoint (List<string> stopTypes, double? locationLat, double? locationLon, int? radius = null, bool? useStopPointHierarchy = null, List<string> modes = null, List<string> categories = null, bool? returnLines = null)
        {
             ApiResponse<TflApiPresentationEntitiesStopPointsResponse> localVarResponse = StopPointGetByGeoPointWithHttpInfo(stopTypes, locationLat, locationLon, radius, useStopPointHierarchy, modes, categories, returnLines);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of StopPoints within {radius} by the specified criteria 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopTypes">a list of stopTypes that should be returned (a list of valid stop types can be obtained from the StopPoint/meta/stoptypes endpoint)</param>
        /// <param name="locationLat"></param>
        /// <param name="locationLon"></param>
        /// <param name="radius">the radius of the bounding circle in metres (default : 200) (optional)</param>
        /// <param name="useStopPointHierarchy">Re-arrange the output into a parent/child hierarchy (optional)</param>
        /// <param name="modes">the list of modes to search (comma separated mode names e.g. tube,dlr) (optional)</param>
        /// <param name="categories">an optional list of comma separated property categories to return in the StopPoint&#39;s property bag. If null or empty, all categories of property are returned. Pass the keyword \&quot;none\&quot; to return no properties (a valid list of categories can be obtained from the /StopPoint/Meta/categories endpoint) (optional)</param>
        /// <param name="returnLines">true to return the lines that each stop point serves as a nested resource (optional)</param>
        /// <returns>ApiResponse of TflApiPresentationEntitiesStopPointsResponse</returns>
        public ApiResponse< TflApiPresentationEntitiesStopPointsResponse > StopPointGetByGeoPointWithHttpInfo (List<string> stopTypes, double? locationLat, double? locationLon, int? radius = null, bool? useStopPointHierarchy = null, List<string> modes = null, List<string> categories = null, bool? returnLines = null)
        {
            // verify the required parameter 'stopTypes' is set
            if (stopTypes == null)
                throw new ApiException(400, "Missing required parameter 'stopTypes' when calling StopPointApi->StopPointGetByGeoPoint");
            // verify the required parameter 'locationLat' is set
            if (locationLat == null)
                throw new ApiException(400, "Missing required parameter 'locationLat' when calling StopPointApi->StopPointGetByGeoPoint");
            // verify the required parameter 'locationLon' is set
            if (locationLon == null)
                throw new ApiException(400, "Missing required parameter 'locationLon' when calling StopPointApi->StopPointGetByGeoPoint");

            var localVarPath = "/StopPoint";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stopTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "stopTypes", stopTypes)); // query parameter
            if (radius != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "radius", radius)); // query parameter
            if (useStopPointHierarchy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "useStopPointHierarchy", useStopPointHierarchy)); // query parameter
            if (modes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "modes", modes)); // query parameter
            if (categories != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "categories", categories)); // query parameter
            if (returnLines != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "returnLines", returnLines)); // query parameter
            if (locationLat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "location.lat", locationLat)); // query parameter
            if (locationLon != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "location.lon", locationLon)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StopPointGetByGeoPoint", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TflApiPresentationEntitiesStopPointsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TflApiPresentationEntitiesStopPointsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TflApiPresentationEntitiesStopPointsResponse)));
        }

        /// <summary>
        /// Gets a list of StopPoints within {radius} by the specified criteria 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopTypes">a list of stopTypes that should be returned (a list of valid stop types can be obtained from the StopPoint/meta/stoptypes endpoint)</param>
        /// <param name="locationLat"></param>
        /// <param name="locationLon"></param>
        /// <param name="radius">the radius of the bounding circle in metres (default : 200) (optional)</param>
        /// <param name="useStopPointHierarchy">Re-arrange the output into a parent/child hierarchy (optional)</param>
        /// <param name="modes">the list of modes to search (comma separated mode names e.g. tube,dlr) (optional)</param>
        /// <param name="categories">an optional list of comma separated property categories to return in the StopPoint&#39;s property bag. If null or empty, all categories of property are returned. Pass the keyword \&quot;none\&quot; to return no properties (a valid list of categories can be obtained from the /StopPoint/Meta/categories endpoint) (optional)</param>
        /// <param name="returnLines">true to return the lines that each stop point serves as a nested resource (optional)</param>
        /// <returns>Task of TflApiPresentationEntitiesStopPointsResponse</returns>
        public async System.Threading.Tasks.Task<TflApiPresentationEntitiesStopPointsResponse> StopPointGetByGeoPointAsync (List<string> stopTypes, double? locationLat, double? locationLon, int? radius = null, bool? useStopPointHierarchy = null, List<string> modes = null, List<string> categories = null, bool? returnLines = null)
        {
             ApiResponse<TflApiPresentationEntitiesStopPointsResponse> localVarResponse = await StopPointGetByGeoPointAsyncWithHttpInfo(stopTypes, locationLat, locationLon, radius, useStopPointHierarchy, modes, categories, returnLines);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of StopPoints within {radius} by the specified criteria 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopTypes">a list of stopTypes that should be returned (a list of valid stop types can be obtained from the StopPoint/meta/stoptypes endpoint)</param>
        /// <param name="locationLat"></param>
        /// <param name="locationLon"></param>
        /// <param name="radius">the radius of the bounding circle in metres (default : 200) (optional)</param>
        /// <param name="useStopPointHierarchy">Re-arrange the output into a parent/child hierarchy (optional)</param>
        /// <param name="modes">the list of modes to search (comma separated mode names e.g. tube,dlr) (optional)</param>
        /// <param name="categories">an optional list of comma separated property categories to return in the StopPoint&#39;s property bag. If null or empty, all categories of property are returned. Pass the keyword \&quot;none\&quot; to return no properties (a valid list of categories can be obtained from the /StopPoint/Meta/categories endpoint) (optional)</param>
        /// <param name="returnLines">true to return the lines that each stop point serves as a nested resource (optional)</param>
        /// <returns>Task of ApiResponse (TflApiPresentationEntitiesStopPointsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TflApiPresentationEntitiesStopPointsResponse>> StopPointGetByGeoPointAsyncWithHttpInfo (List<string> stopTypes, double? locationLat, double? locationLon, int? radius = null, bool? useStopPointHierarchy = null, List<string> modes = null, List<string> categories = null, bool? returnLines = null)
        {
            // verify the required parameter 'stopTypes' is set
            if (stopTypes == null)
                throw new ApiException(400, "Missing required parameter 'stopTypes' when calling StopPointApi->StopPointGetByGeoPoint");
            // verify the required parameter 'locationLat' is set
            if (locationLat == null)
                throw new ApiException(400, "Missing required parameter 'locationLat' when calling StopPointApi->StopPointGetByGeoPoint");
            // verify the required parameter 'locationLon' is set
            if (locationLon == null)
                throw new ApiException(400, "Missing required parameter 'locationLon' when calling StopPointApi->StopPointGetByGeoPoint");

            var localVarPath = "/StopPoint";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stopTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "stopTypes", stopTypes)); // query parameter
            if (radius != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "radius", radius)); // query parameter
            if (useStopPointHierarchy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "useStopPointHierarchy", useStopPointHierarchy)); // query parameter
            if (modes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "modes", modes)); // query parameter
            if (categories != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "categories", categories)); // query parameter
            if (returnLines != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "returnLines", returnLines)); // query parameter
            if (locationLat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "location.lat", locationLat)); // query parameter
            if (locationLon != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "location.lon", locationLon)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StopPointGetByGeoPoint", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TflApiPresentationEntitiesStopPointsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TflApiPresentationEntitiesStopPointsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TflApiPresentationEntitiesStopPointsResponse)));
        }

        /// <summary>
        /// Gets a list of StopPoints filtered by the modes available at that StopPoint. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modes">A comma-seperated list of modes e.g. tube,dlr</param>
        /// <param name="page">The data set page to return. Page 1 equates to the first 1000 stop points, page 2 equates to 1001-2000 etc. Must be entered for bus mode as data set is too large. (optional)</param>
        /// <returns>TflApiPresentationEntitiesStopPointsResponse</returns>
        public TflApiPresentationEntitiesStopPointsResponse StopPointGetByMode (List<string> modes, int? page = null)
        {
             ApiResponse<TflApiPresentationEntitiesStopPointsResponse> localVarResponse = StopPointGetByModeWithHttpInfo(modes, page);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of StopPoints filtered by the modes available at that StopPoint. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modes">A comma-seperated list of modes e.g. tube,dlr</param>
        /// <param name="page">The data set page to return. Page 1 equates to the first 1000 stop points, page 2 equates to 1001-2000 etc. Must be entered for bus mode as data set is too large. (optional)</param>
        /// <returns>ApiResponse of TflApiPresentationEntitiesStopPointsResponse</returns>
        public ApiResponse< TflApiPresentationEntitiesStopPointsResponse > StopPointGetByModeWithHttpInfo (List<string> modes, int? page = null)
        {
            // verify the required parameter 'modes' is set
            if (modes == null)
                throw new ApiException(400, "Missing required parameter 'modes' when calling StopPointApi->StopPointGetByMode");

            var localVarPath = "/StopPoint/Mode/{modes}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modes != null) localVarPathParams.Add("modes", this.Configuration.ApiClient.ParameterToString(modes)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StopPointGetByMode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TflApiPresentationEntitiesStopPointsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TflApiPresentationEntitiesStopPointsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TflApiPresentationEntitiesStopPointsResponse)));
        }

        /// <summary>
        /// Gets a list of StopPoints filtered by the modes available at that StopPoint. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modes">A comma-seperated list of modes e.g. tube,dlr</param>
        /// <param name="page">The data set page to return. Page 1 equates to the first 1000 stop points, page 2 equates to 1001-2000 etc. Must be entered for bus mode as data set is too large. (optional)</param>
        /// <returns>Task of TflApiPresentationEntitiesStopPointsResponse</returns>
        public async System.Threading.Tasks.Task<TflApiPresentationEntitiesStopPointsResponse> StopPointGetByModeAsync (List<string> modes, int? page = null)
        {
             ApiResponse<TflApiPresentationEntitiesStopPointsResponse> localVarResponse = await StopPointGetByModeAsyncWithHttpInfo(modes, page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of StopPoints filtered by the modes available at that StopPoint. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modes">A comma-seperated list of modes e.g. tube,dlr</param>
        /// <param name="page">The data set page to return. Page 1 equates to the first 1000 stop points, page 2 equates to 1001-2000 etc. Must be entered for bus mode as data set is too large. (optional)</param>
        /// <returns>Task of ApiResponse (TflApiPresentationEntitiesStopPointsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TflApiPresentationEntitiesStopPointsResponse>> StopPointGetByModeAsyncWithHttpInfo (List<string> modes, int? page = null)
        {
            // verify the required parameter 'modes' is set
            if (modes == null)
                throw new ApiException(400, "Missing required parameter 'modes' when calling StopPointApi->StopPointGetByMode");

            var localVarPath = "/StopPoint/Mode/{modes}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modes != null) localVarPathParams.Add("modes", this.Configuration.ApiClient.ParameterToString(modes)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StopPointGetByMode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TflApiPresentationEntitiesStopPointsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TflApiPresentationEntitiesStopPointsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TflApiPresentationEntitiesStopPointsResponse)));
        }

        /// <summary>
        /// Gets a StopPoint for a given sms code. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A 5-digit Countdown Bus Stop Code e.g. 73241, 50435, 56334.</param>
        /// <param name="output">If set to \&quot;web\&quot;, a 302 redirect to relevant website bus stop page is returned. Valid values are : web. All other values are ignored. (optional)</param>
        /// <returns>SystemObject</returns>
        public SystemObject StopPointGetBySms (string id, string output = null)
        {
             ApiResponse<SystemObject> localVarResponse = StopPointGetBySmsWithHttpInfo(id, output);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a StopPoint for a given sms code. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A 5-digit Countdown Bus Stop Code e.g. 73241, 50435, 56334.</param>
        /// <param name="output">If set to \&quot;web\&quot;, a 302 redirect to relevant website bus stop page is returned. Valid values are : web. All other values are ignored. (optional)</param>
        /// <returns>ApiResponse of SystemObject</returns>
        public ApiResponse< SystemObject > StopPointGetBySmsWithHttpInfo (string id, string output = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StopPointApi->StopPointGetBySms");

            var localVarPath = "/StopPoint/Sms/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (output != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "output", output)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StopPointGetBySms", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SystemObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SystemObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SystemObject)));
        }

        /// <summary>
        /// Gets a StopPoint for a given sms code. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A 5-digit Countdown Bus Stop Code e.g. 73241, 50435, 56334.</param>
        /// <param name="output">If set to \&quot;web\&quot;, a 302 redirect to relevant website bus stop page is returned. Valid values are : web. All other values are ignored. (optional)</param>
        /// <returns>Task of SystemObject</returns>
        public async System.Threading.Tasks.Task<SystemObject> StopPointGetBySmsAsync (string id, string output = null)
        {
             ApiResponse<SystemObject> localVarResponse = await StopPointGetBySmsAsyncWithHttpInfo(id, output);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a StopPoint for a given sms code. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A 5-digit Countdown Bus Stop Code e.g. 73241, 50435, 56334.</param>
        /// <param name="output">If set to \&quot;web\&quot;, a 302 redirect to relevant website bus stop page is returned. Valid values are : web. All other values are ignored. (optional)</param>
        /// <returns>Task of ApiResponse (SystemObject)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SystemObject>> StopPointGetBySmsAsyncWithHttpInfo (string id, string output = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StopPointApi->StopPointGetBySms");

            var localVarPath = "/StopPoint/Sms/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (output != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "output", output)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StopPointGetBySms", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SystemObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SystemObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SystemObject)));
        }

        /// <summary>
        /// Gets all stop points of a given type 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="types">A comma-separated list of the types to return. Max. approx. 12 types.               A list of valid stop types can be obtained from the StopPoint/meta/stoptypes endpoint.</param>
        /// <returns>List&lt;TflApiPresentationEntitiesStopPoint&gt;</returns>
        public List<TflApiPresentationEntitiesStopPoint> StopPointGetByType (List<string> types)
        {
             ApiResponse<List<TflApiPresentationEntitiesStopPoint>> localVarResponse = StopPointGetByTypeWithHttpInfo(types);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all stop points of a given type 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="types">A comma-separated list of the types to return. Max. approx. 12 types.               A list of valid stop types can be obtained from the StopPoint/meta/stoptypes endpoint.</param>
        /// <returns>ApiResponse of List&lt;TflApiPresentationEntitiesStopPoint&gt;</returns>
        public ApiResponse< List<TflApiPresentationEntitiesStopPoint> > StopPointGetByTypeWithHttpInfo (List<string> types)
        {
            // verify the required parameter 'types' is set
            if (types == null)
                throw new ApiException(400, "Missing required parameter 'types' when calling StopPointApi->StopPointGetByType");

            var localVarPath = "/StopPoint/Type/{types}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (types != null) localVarPathParams.Add("types", this.Configuration.ApiClient.ParameterToString(types)); // path parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StopPointGetByType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TflApiPresentationEntitiesStopPoint>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TflApiPresentationEntitiesStopPoint>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TflApiPresentationEntitiesStopPoint>)));
        }

        /// <summary>
        /// Gets all stop points of a given type 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="types">A comma-separated list of the types to return. Max. approx. 12 types.               A list of valid stop types can be obtained from the StopPoint/meta/stoptypes endpoint.</param>
        /// <returns>Task of List&lt;TflApiPresentationEntitiesStopPoint&gt;</returns>
        public async System.Threading.Tasks.Task<List<TflApiPresentationEntitiesStopPoint>> StopPointGetByTypeAsync (List<string> types)
        {
             ApiResponse<List<TflApiPresentationEntitiesStopPoint>> localVarResponse = await StopPointGetByTypeAsyncWithHttpInfo(types);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets all stop points of a given type 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="types">A comma-separated list of the types to return. Max. approx. 12 types.               A list of valid stop types can be obtained from the StopPoint/meta/stoptypes endpoint.</param>
        /// <returns>Task of ApiResponse (List&lt;TflApiPresentationEntitiesStopPoint&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesStopPoint>>> StopPointGetByTypeAsyncWithHttpInfo (List<string> types)
        {
            // verify the required parameter 'types' is set
            if (types == null)
                throw new ApiException(400, "Missing required parameter 'types' when calling StopPointApi->StopPointGetByType");

            var localVarPath = "/StopPoint/Type/{types}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (types != null) localVarPathParams.Add("types", this.Configuration.ApiClient.ParameterToString(types)); // path parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StopPointGetByType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TflApiPresentationEntitiesStopPoint>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TflApiPresentationEntitiesStopPoint>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TflApiPresentationEntitiesStopPoint>)));
        }

        /// <summary>
        /// Gets all the stop points of given type(s) with a page number 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="types"></param>
        /// <param name="page"></param>
        /// <returns>List&lt;TflApiPresentationEntitiesStopPoint&gt;</returns>
        public List<TflApiPresentationEntitiesStopPoint> StopPointGetByTypeWithPagination (List<string> types, int? page)
        {
             ApiResponse<List<TflApiPresentationEntitiesStopPoint>> localVarResponse = StopPointGetByTypeWithPaginationWithHttpInfo(types, page);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all the stop points of given type(s) with a page number 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="types"></param>
        /// <param name="page"></param>
        /// <returns>ApiResponse of List&lt;TflApiPresentationEntitiesStopPoint&gt;</returns>
        public ApiResponse< List<TflApiPresentationEntitiesStopPoint> > StopPointGetByTypeWithPaginationWithHttpInfo (List<string> types, int? page)
        {
            // verify the required parameter 'types' is set
            if (types == null)
                throw new ApiException(400, "Missing required parameter 'types' when calling StopPointApi->StopPointGetByTypeWithPagination");
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling StopPointApi->StopPointGetByTypeWithPagination");

            var localVarPath = "/StopPoint/Type/{types}/page/{page}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (types != null) localVarPathParams.Add("types", this.Configuration.ApiClient.ParameterToString(types)); // path parameter
            if (page != null) localVarPathParams.Add("page", this.Configuration.ApiClient.ParameterToString(page)); // path parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StopPointGetByTypeWithPagination", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TflApiPresentationEntitiesStopPoint>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TflApiPresentationEntitiesStopPoint>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TflApiPresentationEntitiesStopPoint>)));
        }

        /// <summary>
        /// Gets all the stop points of given type(s) with a page number 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="types"></param>
        /// <param name="page"></param>
        /// <returns>Task of List&lt;TflApiPresentationEntitiesStopPoint&gt;</returns>
        public async System.Threading.Tasks.Task<List<TflApiPresentationEntitiesStopPoint>> StopPointGetByTypeWithPaginationAsync (List<string> types, int? page)
        {
             ApiResponse<List<TflApiPresentationEntitiesStopPoint>> localVarResponse = await StopPointGetByTypeWithPaginationAsyncWithHttpInfo(types, page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets all the stop points of given type(s) with a page number 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="types"></param>
        /// <param name="page"></param>
        /// <returns>Task of ApiResponse (List&lt;TflApiPresentationEntitiesStopPoint&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesStopPoint>>> StopPointGetByTypeWithPaginationAsyncWithHttpInfo (List<string> types, int? page)
        {
            // verify the required parameter 'types' is set
            if (types == null)
                throw new ApiException(400, "Missing required parameter 'types' when calling StopPointApi->StopPointGetByTypeWithPagination");
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling StopPointApi->StopPointGetByTypeWithPagination");

            var localVarPath = "/StopPoint/Type/{types}/page/{page}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (types != null) localVarPathParams.Add("types", this.Configuration.ApiClient.ParameterToString(types)); // path parameter
            if (page != null) localVarPathParams.Add("page", this.Configuration.ApiClient.ParameterToString(page)); // path parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StopPointGetByTypeWithPagination", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TflApiPresentationEntitiesStopPoint>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TflApiPresentationEntitiesStopPoint>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TflApiPresentationEntitiesStopPoint>)));
        }

        /// <summary>
        /// Get car parks corresponding to the given stop point id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopPointId">stopPointId is required to get the car parks.</param>
        /// <returns>List&lt;TflApiPresentationEntitiesPlace&gt;</returns>
        public List<TflApiPresentationEntitiesPlace> StopPointGetCarParksById (string stopPointId)
        {
             ApiResponse<List<TflApiPresentationEntitiesPlace>> localVarResponse = StopPointGetCarParksByIdWithHttpInfo(stopPointId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get car parks corresponding to the given stop point id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopPointId">stopPointId is required to get the car parks.</param>
        /// <returns>ApiResponse of List&lt;TflApiPresentationEntitiesPlace&gt;</returns>
        public ApiResponse< List<TflApiPresentationEntitiesPlace> > StopPointGetCarParksByIdWithHttpInfo (string stopPointId)
        {
            // verify the required parameter 'stopPointId' is set
            if (stopPointId == null)
                throw new ApiException(400, "Missing required parameter 'stopPointId' when calling StopPointApi->StopPointGetCarParksById");

            var localVarPath = "/StopPoint/{stopPointId}/CarParks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stopPointId != null) localVarPathParams.Add("stopPointId", this.Configuration.ApiClient.ParameterToString(stopPointId)); // path parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StopPointGetCarParksById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TflApiPresentationEntitiesPlace>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TflApiPresentationEntitiesPlace>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TflApiPresentationEntitiesPlace>)));
        }

        /// <summary>
        /// Get car parks corresponding to the given stop point id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopPointId">stopPointId is required to get the car parks.</param>
        /// <returns>Task of List&lt;TflApiPresentationEntitiesPlace&gt;</returns>
        public async System.Threading.Tasks.Task<List<TflApiPresentationEntitiesPlace>> StopPointGetCarParksByIdAsync (string stopPointId)
        {
             ApiResponse<List<TflApiPresentationEntitiesPlace>> localVarResponse = await StopPointGetCarParksByIdAsyncWithHttpInfo(stopPointId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get car parks corresponding to the given stop point id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopPointId">stopPointId is required to get the car parks.</param>
        /// <returns>Task of ApiResponse (List&lt;TflApiPresentationEntitiesPlace&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesPlace>>> StopPointGetCarParksByIdAsyncWithHttpInfo (string stopPointId)
        {
            // verify the required parameter 'stopPointId' is set
            if (stopPointId == null)
                throw new ApiException(400, "Missing required parameter 'stopPointId' when calling StopPointApi->StopPointGetCarParksById");

            var localVarPath = "/StopPoint/{stopPointId}/CarParks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stopPointId != null) localVarPathParams.Add("stopPointId", this.Configuration.ApiClient.ParameterToString(stopPointId)); // path parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StopPointGetCarParksById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TflApiPresentationEntitiesPlace>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TflApiPresentationEntitiesPlace>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TflApiPresentationEntitiesPlace>)));
        }

        /// <summary>
        /// Gets a list of StopPoints corresponding to the given list of stop ids. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma-separated list of stop point ids (station naptan code e.g. 940GZZLUASL). Max. approx. 20 ids.              You can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name.</param>
        /// <param name="includeCrowdingData">Include the crowding data (static). To Filter further use: /StopPoint/{ids}/Crowding/{line} (optional)</param>
        /// <returns>List&lt;TflApiPresentationEntitiesStopPoint&gt;</returns>
        public List<TflApiPresentationEntitiesStopPoint> StopPointGetId (List<string> ids, bool? includeCrowdingData = null)
        {
             ApiResponse<List<TflApiPresentationEntitiesStopPoint>> localVarResponse = StopPointGetIdWithHttpInfo(ids, includeCrowdingData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of StopPoints corresponding to the given list of stop ids. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma-separated list of stop point ids (station naptan code e.g. 940GZZLUASL). Max. approx. 20 ids.              You can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name.</param>
        /// <param name="includeCrowdingData">Include the crowding data (static). To Filter further use: /StopPoint/{ids}/Crowding/{line} (optional)</param>
        /// <returns>ApiResponse of List&lt;TflApiPresentationEntitiesStopPoint&gt;</returns>
        public ApiResponse< List<TflApiPresentationEntitiesStopPoint> > StopPointGetIdWithHttpInfo (List<string> ids, bool? includeCrowdingData = null)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling StopPointApi->StopPointGetId");

            var localVarPath = "/StopPoint/{ids}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarPathParams.Add("ids", this.Configuration.ApiClient.ParameterToString(ids)); // path parameter
            if (includeCrowdingData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeCrowdingData", includeCrowdingData)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StopPointGetId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TflApiPresentationEntitiesStopPoint>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TflApiPresentationEntitiesStopPoint>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TflApiPresentationEntitiesStopPoint>)));
        }

        /// <summary>
        /// Gets a list of StopPoints corresponding to the given list of stop ids. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma-separated list of stop point ids (station naptan code e.g. 940GZZLUASL). Max. approx. 20 ids.              You can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name.</param>
        /// <param name="includeCrowdingData">Include the crowding data (static). To Filter further use: /StopPoint/{ids}/Crowding/{line} (optional)</param>
        /// <returns>Task of List&lt;TflApiPresentationEntitiesStopPoint&gt;</returns>
        public async System.Threading.Tasks.Task<List<TflApiPresentationEntitiesStopPoint>> StopPointGetIdAsync (List<string> ids, bool? includeCrowdingData = null)
        {
             ApiResponse<List<TflApiPresentationEntitiesStopPoint>> localVarResponse = await StopPointGetIdAsyncWithHttpInfo(ids, includeCrowdingData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of StopPoints corresponding to the given list of stop ids. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma-separated list of stop point ids (station naptan code e.g. 940GZZLUASL). Max. approx. 20 ids.              You can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name.</param>
        /// <param name="includeCrowdingData">Include the crowding data (static). To Filter further use: /StopPoint/{ids}/Crowding/{line} (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TflApiPresentationEntitiesStopPoint&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesStopPoint>>> StopPointGetIdAsyncWithHttpInfo (List<string> ids, bool? includeCrowdingData = null)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling StopPointApi->StopPointGetId");

            var localVarPath = "/StopPoint/{ids}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarPathParams.Add("ids", this.Configuration.ApiClient.ParameterToString(ids)); // path parameter
            if (includeCrowdingData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeCrowdingData", includeCrowdingData)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StopPointGetId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TflApiPresentationEntitiesStopPoint>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TflApiPresentationEntitiesStopPoint>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TflApiPresentationEntitiesStopPoint>)));
        }

        /// <summary>
        /// Gets the service types for a given stoppoint 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The Naptan id of the stop</param>
        /// <param name="lineIds">The lines which contain the given Naptan id (all lines relevant to the given stoppoint if empty) (optional)</param>
        /// <param name="modes">The modes which the lines are relevant to (all if empty) (optional)</param>
        /// <returns>List&lt;TflApiPresentationEntitiesLineServiceType&gt;</returns>
        public List<TflApiPresentationEntitiesLineServiceType> StopPointGetServiceTypes (string id, List<string> lineIds = null, List<string> modes = null)
        {
             ApiResponse<List<TflApiPresentationEntitiesLineServiceType>> localVarResponse = StopPointGetServiceTypesWithHttpInfo(id, lineIds, modes);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the service types for a given stoppoint 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The Naptan id of the stop</param>
        /// <param name="lineIds">The lines which contain the given Naptan id (all lines relevant to the given stoppoint if empty) (optional)</param>
        /// <param name="modes">The modes which the lines are relevant to (all if empty) (optional)</param>
        /// <returns>ApiResponse of List&lt;TflApiPresentationEntitiesLineServiceType&gt;</returns>
        public ApiResponse< List<TflApiPresentationEntitiesLineServiceType> > StopPointGetServiceTypesWithHttpInfo (string id, List<string> lineIds = null, List<string> modes = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StopPointApi->StopPointGetServiceTypes");

            var localVarPath = "/StopPoint/ServiceTypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            if (lineIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "lineIds", lineIds)); // query parameter
            if (modes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "modes", modes)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StopPointGetServiceTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TflApiPresentationEntitiesLineServiceType>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TflApiPresentationEntitiesLineServiceType>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TflApiPresentationEntitiesLineServiceType>)));
        }

        /// <summary>
        /// Gets the service types for a given stoppoint 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The Naptan id of the stop</param>
        /// <param name="lineIds">The lines which contain the given Naptan id (all lines relevant to the given stoppoint if empty) (optional)</param>
        /// <param name="modes">The modes which the lines are relevant to (all if empty) (optional)</param>
        /// <returns>Task of List&lt;TflApiPresentationEntitiesLineServiceType&gt;</returns>
        public async System.Threading.Tasks.Task<List<TflApiPresentationEntitiesLineServiceType>> StopPointGetServiceTypesAsync (string id, List<string> lineIds = null, List<string> modes = null)
        {
             ApiResponse<List<TflApiPresentationEntitiesLineServiceType>> localVarResponse = await StopPointGetServiceTypesAsyncWithHttpInfo(id, lineIds, modes);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the service types for a given stoppoint 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The Naptan id of the stop</param>
        /// <param name="lineIds">The lines which contain the given Naptan id (all lines relevant to the given stoppoint if empty) (optional)</param>
        /// <param name="modes">The modes which the lines are relevant to (all if empty) (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TflApiPresentationEntitiesLineServiceType&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesLineServiceType>>> StopPointGetServiceTypesAsyncWithHttpInfo (string id, List<string> lineIds = null, List<string> modes = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StopPointApi->StopPointGetServiceTypes");

            var localVarPath = "/StopPoint/ServiceTypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            if (lineIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "lineIds", lineIds)); // query parameter
            if (modes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "modes", modes)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StopPointGetServiceTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TflApiPresentationEntitiesLineServiceType>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TflApiPresentationEntitiesLineServiceType>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TflApiPresentationEntitiesLineServiceType>)));
        }

        /// <summary>
        /// Gets a list of taxi ranks corresponding to the given stop point id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopPointId">stopPointId is required to get the taxi ranks.</param>
        /// <returns>List&lt;TflApiPresentationEntitiesPlace&gt;</returns>
        public List<TflApiPresentationEntitiesPlace> StopPointGetTaxiRanksByIds (string stopPointId)
        {
             ApiResponse<List<TflApiPresentationEntitiesPlace>> localVarResponse = StopPointGetTaxiRanksByIdsWithHttpInfo(stopPointId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of taxi ranks corresponding to the given stop point id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopPointId">stopPointId is required to get the taxi ranks.</param>
        /// <returns>ApiResponse of List&lt;TflApiPresentationEntitiesPlace&gt;</returns>
        public ApiResponse< List<TflApiPresentationEntitiesPlace> > StopPointGetTaxiRanksByIdsWithHttpInfo (string stopPointId)
        {
            // verify the required parameter 'stopPointId' is set
            if (stopPointId == null)
                throw new ApiException(400, "Missing required parameter 'stopPointId' when calling StopPointApi->StopPointGetTaxiRanksByIds");

            var localVarPath = "/StopPoint/{stopPointId}/TaxiRanks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stopPointId != null) localVarPathParams.Add("stopPointId", this.Configuration.ApiClient.ParameterToString(stopPointId)); // path parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StopPointGetTaxiRanksByIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TflApiPresentationEntitiesPlace>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TflApiPresentationEntitiesPlace>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TflApiPresentationEntitiesPlace>)));
        }

        /// <summary>
        /// Gets a list of taxi ranks corresponding to the given stop point id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopPointId">stopPointId is required to get the taxi ranks.</param>
        /// <returns>Task of List&lt;TflApiPresentationEntitiesPlace&gt;</returns>
        public async System.Threading.Tasks.Task<List<TflApiPresentationEntitiesPlace>> StopPointGetTaxiRanksByIdsAsync (string stopPointId)
        {
             ApiResponse<List<TflApiPresentationEntitiesPlace>> localVarResponse = await StopPointGetTaxiRanksByIdsAsyncWithHttpInfo(stopPointId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of taxi ranks corresponding to the given stop point id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopPointId">stopPointId is required to get the taxi ranks.</param>
        /// <returns>Task of ApiResponse (List&lt;TflApiPresentationEntitiesPlace&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesPlace>>> StopPointGetTaxiRanksByIdsAsyncWithHttpInfo (string stopPointId)
        {
            // verify the required parameter 'stopPointId' is set
            if (stopPointId == null)
                throw new ApiException(400, "Missing required parameter 'stopPointId' when calling StopPointApi->StopPointGetTaxiRanksByIds");

            var localVarPath = "/StopPoint/{stopPointId}/TaxiRanks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stopPointId != null) localVarPathParams.Add("stopPointId", this.Configuration.ApiClient.ParameterToString(stopPointId)); // path parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StopPointGetTaxiRanksByIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TflApiPresentationEntitiesPlace>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TflApiPresentationEntitiesPlace>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TflApiPresentationEntitiesPlace>)));
        }

        /// <summary>
        /// Gets the list of available StopPoint additional information categories 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TflApiPresentationEntitiesStopPointCategory&gt;</returns>
        public List<TflApiPresentationEntitiesStopPointCategory> StopPointMetaCategories ()
        {
             ApiResponse<List<TflApiPresentationEntitiesStopPointCategory>> localVarResponse = StopPointMetaCategoriesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the list of available StopPoint additional information categories 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TflApiPresentationEntitiesStopPointCategory&gt;</returns>
        public ApiResponse< List<TflApiPresentationEntitiesStopPointCategory> > StopPointMetaCategoriesWithHttpInfo ()
        {

            var localVarPath = "/StopPoint/Meta/Categories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StopPointMetaCategories", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TflApiPresentationEntitiesStopPointCategory>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TflApiPresentationEntitiesStopPointCategory>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TflApiPresentationEntitiesStopPointCategory>)));
        }

        /// <summary>
        /// Gets the list of available StopPoint additional information categories 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TflApiPresentationEntitiesStopPointCategory&gt;</returns>
        public async System.Threading.Tasks.Task<List<TflApiPresentationEntitiesStopPointCategory>> StopPointMetaCategoriesAsync ()
        {
             ApiResponse<List<TflApiPresentationEntitiesStopPointCategory>> localVarResponse = await StopPointMetaCategoriesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the list of available StopPoint additional information categories 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TflApiPresentationEntitiesStopPointCategory&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesStopPointCategory>>> StopPointMetaCategoriesAsyncWithHttpInfo ()
        {

            var localVarPath = "/StopPoint/Meta/Categories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StopPointMetaCategories", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TflApiPresentationEntitiesStopPointCategory>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TflApiPresentationEntitiesStopPointCategory>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TflApiPresentationEntitiesStopPointCategory>)));
        }

        /// <summary>
        /// Gets the list of available StopPoint modes 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TflApiPresentationEntitiesMode&gt;</returns>
        public List<TflApiPresentationEntitiesMode> StopPointMetaModes ()
        {
             ApiResponse<List<TflApiPresentationEntitiesMode>> localVarResponse = StopPointMetaModesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the list of available StopPoint modes 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TflApiPresentationEntitiesMode&gt;</returns>
        public ApiResponse< List<TflApiPresentationEntitiesMode> > StopPointMetaModesWithHttpInfo ()
        {

            var localVarPath = "/StopPoint/Meta/Modes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StopPointMetaModes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TflApiPresentationEntitiesMode>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TflApiPresentationEntitiesMode>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TflApiPresentationEntitiesMode>)));
        }

        /// <summary>
        /// Gets the list of available StopPoint modes 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TflApiPresentationEntitiesMode&gt;</returns>
        public async System.Threading.Tasks.Task<List<TflApiPresentationEntitiesMode>> StopPointMetaModesAsync ()
        {
             ApiResponse<List<TflApiPresentationEntitiesMode>> localVarResponse = await StopPointMetaModesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the list of available StopPoint modes 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TflApiPresentationEntitiesMode&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesMode>>> StopPointMetaModesAsyncWithHttpInfo ()
        {

            var localVarPath = "/StopPoint/Meta/Modes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StopPointMetaModes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TflApiPresentationEntitiesMode>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TflApiPresentationEntitiesMode>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TflApiPresentationEntitiesMode>)));
        }

        /// <summary>
        /// Gets the list of available StopPoint types 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> StopPointMetaStopTypes ()
        {
             ApiResponse<List<string>> localVarResponse = StopPointMetaStopTypesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the list of available StopPoint types 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ApiResponse< List<string> > StopPointMetaStopTypesWithHttpInfo ()
        {

            var localVarPath = "/StopPoint/Meta/StopTypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StopPointMetaStopTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        /// Gets the list of available StopPoint types 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> StopPointMetaStopTypesAsync ()
        {
             ApiResponse<List<string>> localVarResponse = await StopPointMetaStopTypesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the list of available StopPoint types 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<string>>> StopPointMetaStopTypesAsyncWithHttpInfo ()
        {

            var localVarPath = "/StopPoint/Meta/StopTypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StopPointMetaStopTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        /// Gets Stopoints that are reachable from a station/line combination. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) of the stop point to filter by</param>
        /// <param name="lineId">Line id of the line to filter by (e.g. victoria)</param>
        /// <param name="serviceTypes">A comma-separated list of service types to filter on. If not specified. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)</param>
        /// <returns>List&lt;TflApiPresentationEntitiesStopPoint&gt;</returns>
        public List<TflApiPresentationEntitiesStopPoint> StopPointReachableFrom (string id, string lineId, List<string> serviceTypes = null)
        {
             ApiResponse<List<TflApiPresentationEntitiesStopPoint>> localVarResponse = StopPointReachableFromWithHttpInfo(id, lineId, serviceTypes);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets Stopoints that are reachable from a station/line combination. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) of the stop point to filter by</param>
        /// <param name="lineId">Line id of the line to filter by (e.g. victoria)</param>
        /// <param name="serviceTypes">A comma-separated list of service types to filter on. If not specified. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)</param>
        /// <returns>ApiResponse of List&lt;TflApiPresentationEntitiesStopPoint&gt;</returns>
        public ApiResponse< List<TflApiPresentationEntitiesStopPoint> > StopPointReachableFromWithHttpInfo (string id, string lineId, List<string> serviceTypes = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StopPointApi->StopPointReachableFrom");
            // verify the required parameter 'lineId' is set
            if (lineId == null)
                throw new ApiException(400, "Missing required parameter 'lineId' when calling StopPointApi->StopPointReachableFrom");

            var localVarPath = "/StopPoint/{id}/CanReachOnLine/{lineId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (lineId != null) localVarPathParams.Add("lineId", this.Configuration.ApiClient.ParameterToString(lineId)); // path parameter
            if (serviceTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "serviceTypes", serviceTypes)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StopPointReachableFrom", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TflApiPresentationEntitiesStopPoint>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TflApiPresentationEntitiesStopPoint>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TflApiPresentationEntitiesStopPoint>)));
        }

        /// <summary>
        /// Gets Stopoints that are reachable from a station/line combination. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) of the stop point to filter by</param>
        /// <param name="lineId">Line id of the line to filter by (e.g. victoria)</param>
        /// <param name="serviceTypes">A comma-separated list of service types to filter on. If not specified. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)</param>
        /// <returns>Task of List&lt;TflApiPresentationEntitiesStopPoint&gt;</returns>
        public async System.Threading.Tasks.Task<List<TflApiPresentationEntitiesStopPoint>> StopPointReachableFromAsync (string id, string lineId, List<string> serviceTypes = null)
        {
             ApiResponse<List<TflApiPresentationEntitiesStopPoint>> localVarResponse = await StopPointReachableFromAsyncWithHttpInfo(id, lineId, serviceTypes);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets Stopoints that are reachable from a station/line combination. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) of the stop point to filter by</param>
        /// <param name="lineId">Line id of the line to filter by (e.g. victoria)</param>
        /// <param name="serviceTypes">A comma-separated list of service types to filter on. If not specified. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TflApiPresentationEntitiesStopPoint&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesStopPoint>>> StopPointReachableFromAsyncWithHttpInfo (string id, string lineId, List<string> serviceTypes = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StopPointApi->StopPointReachableFrom");
            // verify the required parameter 'lineId' is set
            if (lineId == null)
                throw new ApiException(400, "Missing required parameter 'lineId' when calling StopPointApi->StopPointReachableFrom");

            var localVarPath = "/StopPoint/{id}/CanReachOnLine/{lineId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (lineId != null) localVarPathParams.Add("lineId", this.Configuration.ApiClient.ParameterToString(lineId)); // path parameter
            if (serviceTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "serviceTypes", serviceTypes)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StopPointReachableFrom", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TflApiPresentationEntitiesStopPoint>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TflApiPresentationEntitiesStopPoint>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TflApiPresentationEntitiesStopPoint>)));
        }

        /// <summary>
        /// Returns the route sections for all the lines that service the given stop point ids 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A stop point id (station naptan codes e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)</param>
        /// <param name="serviceTypes">A comma-separated list of service types to filter on. If not specified. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)</param>
        /// <returns>List&lt;TflApiPresentationEntitiesStopPointRouteSection&gt;</returns>
        public List<TflApiPresentationEntitiesStopPointRouteSection> StopPointRoute (string id, List<string> serviceTypes = null)
        {
             ApiResponse<List<TflApiPresentationEntitiesStopPointRouteSection>> localVarResponse = StopPointRouteWithHttpInfo(id, serviceTypes);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the route sections for all the lines that service the given stop point ids 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A stop point id (station naptan codes e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)</param>
        /// <param name="serviceTypes">A comma-separated list of service types to filter on. If not specified. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)</param>
        /// <returns>ApiResponse of List&lt;TflApiPresentationEntitiesStopPointRouteSection&gt;</returns>
        public ApiResponse< List<TflApiPresentationEntitiesStopPointRouteSection> > StopPointRouteWithHttpInfo (string id, List<string> serviceTypes = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StopPointApi->StopPointRoute");

            var localVarPath = "/StopPoint/{id}/Route";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (serviceTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "serviceTypes", serviceTypes)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StopPointRoute", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TflApiPresentationEntitiesStopPointRouteSection>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TflApiPresentationEntitiesStopPointRouteSection>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TflApiPresentationEntitiesStopPointRouteSection>)));
        }

        /// <summary>
        /// Returns the route sections for all the lines that service the given stop point ids 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A stop point id (station naptan codes e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)</param>
        /// <param name="serviceTypes">A comma-separated list of service types to filter on. If not specified. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)</param>
        /// <returns>Task of List&lt;TflApiPresentationEntitiesStopPointRouteSection&gt;</returns>
        public async System.Threading.Tasks.Task<List<TflApiPresentationEntitiesStopPointRouteSection>> StopPointRouteAsync (string id, List<string> serviceTypes = null)
        {
             ApiResponse<List<TflApiPresentationEntitiesStopPointRouteSection>> localVarResponse = await StopPointRouteAsyncWithHttpInfo(id, serviceTypes);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the route sections for all the lines that service the given stop point ids 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A stop point id (station naptan codes e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)</param>
        /// <param name="serviceTypes">A comma-separated list of service types to filter on. If not specified. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TflApiPresentationEntitiesStopPointRouteSection&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TflApiPresentationEntitiesStopPointRouteSection>>> StopPointRouteAsyncWithHttpInfo (string id, List<string> serviceTypes = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StopPointApi->StopPointRoute");

            var localVarPath = "/StopPoint/{id}/Route";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (serviceTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "serviceTypes", serviceTypes)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StopPointRoute", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TflApiPresentationEntitiesStopPointRouteSection>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TflApiPresentationEntitiesStopPointRouteSection>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TflApiPresentationEntitiesStopPointRouteSection>)));
        }

        /// <summary>
        /// Search StopPoints by their common name, or their 5-digit Countdown Bus Stop Code. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The query string, case-insensitive. Leading and trailing wildcards are applied automatically.</param>
        /// <param name="modes">An optional, parameter separated list of the modes to filter by (optional)</param>
        /// <param name="faresOnly">True to only return stations in that have Fares data available for single fares to another station. (optional)</param>
        /// <param name="maxResults">An optional result limit, defaulting to and with a maximum of 50. Since children of the stop point heirarchy are returned for matches,              it is possible that the flattened result set will contain more than 50 items. (optional)</param>
        /// <param name="lines">An optional, parameter separated list of the lines to filter by (optional)</param>
        /// <param name="includeHubs">If true, returns results including HUBs. (optional)</param>
        /// <param name="tflOperatedNationalRailStationsOnly">If the national-rail mode is included, this flag will filter the national rail stations so that only those operated by TfL are returned (optional)</param>
        /// <returns>TflApiPresentationEntitiesSearchResponse</returns>
        public TflApiPresentationEntitiesSearchResponse StopPointSearch (string query, List<string> modes = null, bool? faresOnly = null, int? maxResults = null, List<string> lines = null, bool? includeHubs = null, bool? tflOperatedNationalRailStationsOnly = null)
        {
             ApiResponse<TflApiPresentationEntitiesSearchResponse> localVarResponse = StopPointSearchWithHttpInfo(query, modes, faresOnly, maxResults, lines, includeHubs, tflOperatedNationalRailStationsOnly);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search StopPoints by their common name, or their 5-digit Countdown Bus Stop Code. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The query string, case-insensitive. Leading and trailing wildcards are applied automatically.</param>
        /// <param name="modes">An optional, parameter separated list of the modes to filter by (optional)</param>
        /// <param name="faresOnly">True to only return stations in that have Fares data available for single fares to another station. (optional)</param>
        /// <param name="maxResults">An optional result limit, defaulting to and with a maximum of 50. Since children of the stop point heirarchy are returned for matches,              it is possible that the flattened result set will contain more than 50 items. (optional)</param>
        /// <param name="lines">An optional, parameter separated list of the lines to filter by (optional)</param>
        /// <param name="includeHubs">If true, returns results including HUBs. (optional)</param>
        /// <param name="tflOperatedNationalRailStationsOnly">If the national-rail mode is included, this flag will filter the national rail stations so that only those operated by TfL are returned (optional)</param>
        /// <returns>ApiResponse of TflApiPresentationEntitiesSearchResponse</returns>
        public ApiResponse< TflApiPresentationEntitiesSearchResponse > StopPointSearchWithHttpInfo (string query, List<string> modes = null, bool? faresOnly = null, int? maxResults = null, List<string> lines = null, bool? includeHubs = null, bool? tflOperatedNationalRailStationsOnly = null)
        {
            // verify the required parameter 'query' is set
            if (query == null)
                throw new ApiException(400, "Missing required parameter 'query' when calling StopPointApi->StopPointSearch");

            var localVarPath = "/StopPoint/Search/{query}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (query != null) localVarPathParams.Add("query", this.Configuration.ApiClient.ParameterToString(query)); // path parameter
            if (modes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "modes", modes)); // query parameter
            if (faresOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "faresOnly", faresOnly)); // query parameter
            if (maxResults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxResults", maxResults)); // query parameter
            if (lines != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "lines", lines)); // query parameter
            if (includeHubs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeHubs", includeHubs)); // query parameter
            if (tflOperatedNationalRailStationsOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tflOperatedNationalRailStationsOnly", tflOperatedNationalRailStationsOnly)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StopPointSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TflApiPresentationEntitiesSearchResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TflApiPresentationEntitiesSearchResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TflApiPresentationEntitiesSearchResponse)));
        }

        /// <summary>
        /// Search StopPoints by their common name, or their 5-digit Countdown Bus Stop Code. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The query string, case-insensitive. Leading and trailing wildcards are applied automatically.</param>
        /// <param name="modes">An optional, parameter separated list of the modes to filter by (optional)</param>
        /// <param name="faresOnly">True to only return stations in that have Fares data available for single fares to another station. (optional)</param>
        /// <param name="maxResults">An optional result limit, defaulting to and with a maximum of 50. Since children of the stop point heirarchy are returned for matches,              it is possible that the flattened result set will contain more than 50 items. (optional)</param>
        /// <param name="lines">An optional, parameter separated list of the lines to filter by (optional)</param>
        /// <param name="includeHubs">If true, returns results including HUBs. (optional)</param>
        /// <param name="tflOperatedNationalRailStationsOnly">If the national-rail mode is included, this flag will filter the national rail stations so that only those operated by TfL are returned (optional)</param>
        /// <returns>Task of TflApiPresentationEntitiesSearchResponse</returns>
        public async System.Threading.Tasks.Task<TflApiPresentationEntitiesSearchResponse> StopPointSearchAsync (string query, List<string> modes = null, bool? faresOnly = null, int? maxResults = null, List<string> lines = null, bool? includeHubs = null, bool? tflOperatedNationalRailStationsOnly = null)
        {
             ApiResponse<TflApiPresentationEntitiesSearchResponse> localVarResponse = await StopPointSearchAsyncWithHttpInfo(query, modes, faresOnly, maxResults, lines, includeHubs, tflOperatedNationalRailStationsOnly);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search StopPoints by their common name, or their 5-digit Countdown Bus Stop Code. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The query string, case-insensitive. Leading and trailing wildcards are applied automatically.</param>
        /// <param name="modes">An optional, parameter separated list of the modes to filter by (optional)</param>
        /// <param name="faresOnly">True to only return stations in that have Fares data available for single fares to another station. (optional)</param>
        /// <param name="maxResults">An optional result limit, defaulting to and with a maximum of 50. Since children of the stop point heirarchy are returned for matches,              it is possible that the flattened result set will contain more than 50 items. (optional)</param>
        /// <param name="lines">An optional, parameter separated list of the lines to filter by (optional)</param>
        /// <param name="includeHubs">If true, returns results including HUBs. (optional)</param>
        /// <param name="tflOperatedNationalRailStationsOnly">If the national-rail mode is included, this flag will filter the national rail stations so that only those operated by TfL are returned (optional)</param>
        /// <returns>Task of ApiResponse (TflApiPresentationEntitiesSearchResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TflApiPresentationEntitiesSearchResponse>> StopPointSearchAsyncWithHttpInfo (string query, List<string> modes = null, bool? faresOnly = null, int? maxResults = null, List<string> lines = null, bool? includeHubs = null, bool? tflOperatedNationalRailStationsOnly = null)
        {
            // verify the required parameter 'query' is set
            if (query == null)
                throw new ApiException(400, "Missing required parameter 'query' when calling StopPointApi->StopPointSearch");

            var localVarPath = "/StopPoint/Search/{query}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (query != null) localVarPathParams.Add("query", this.Configuration.ApiClient.ParameterToString(query)); // path parameter
            if (modes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "modes", modes)); // query parameter
            if (faresOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "faresOnly", faresOnly)); // query parameter
            if (maxResults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxResults", maxResults)); // query parameter
            if (lines != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "lines", lines)); // query parameter
            if (includeHubs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeHubs", includeHubs)); // query parameter
            if (tflOperatedNationalRailStationsOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tflOperatedNationalRailStationsOnly", tflOperatedNationalRailStationsOnly)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StopPointSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TflApiPresentationEntitiesSearchResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TflApiPresentationEntitiesSearchResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TflApiPresentationEntitiesSearchResponse)));
        }

        /// <summary>
        /// Search StopPoints by their common name, or their 5-digit Countdown Bus Stop Code. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The query string, case-insensitive. Leading and trailing wildcards are applied automatically.</param>
        /// <param name="modes">An optional, parameter separated list of the modes to filter by (optional)</param>
        /// <param name="faresOnly">True to only return stations in that have Fares data available for single fares to another station. (optional)</param>
        /// <param name="maxResults">An optional result limit, defaulting to and with a maximum of 50. Since children of the stop point heirarchy are returned for matches,              it is possible that the flattened result set will contain more than 50 items. (optional)</param>
        /// <param name="lines">An optional, parameter separated list of the lines to filter by (optional)</param>
        /// <param name="includeHubs">If true, returns results including HUBs. (optional)</param>
        /// <param name="tflOperatedNationalRailStationsOnly">If the national-rail mode is included, this flag will filter the national rail stations so that only those operated by TfL are returned (optional)</param>
        /// <returns>TflApiPresentationEntitiesSearchResponse</returns>
        public TflApiPresentationEntitiesSearchResponse StopPointSearch_0 (string query, List<string> modes = null, bool? faresOnly = null, int? maxResults = null, List<string> lines = null, bool? includeHubs = null, bool? tflOperatedNationalRailStationsOnly = null)
        {
             ApiResponse<TflApiPresentationEntitiesSearchResponse> localVarResponse = StopPointSearch_0WithHttpInfo(query, modes, faresOnly, maxResults, lines, includeHubs, tflOperatedNationalRailStationsOnly);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search StopPoints by their common name, or their 5-digit Countdown Bus Stop Code. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The query string, case-insensitive. Leading and trailing wildcards are applied automatically.</param>
        /// <param name="modes">An optional, parameter separated list of the modes to filter by (optional)</param>
        /// <param name="faresOnly">True to only return stations in that have Fares data available for single fares to another station. (optional)</param>
        /// <param name="maxResults">An optional result limit, defaulting to and with a maximum of 50. Since children of the stop point heirarchy are returned for matches,              it is possible that the flattened result set will contain more than 50 items. (optional)</param>
        /// <param name="lines">An optional, parameter separated list of the lines to filter by (optional)</param>
        /// <param name="includeHubs">If true, returns results including HUBs. (optional)</param>
        /// <param name="tflOperatedNationalRailStationsOnly">If the national-rail mode is included, this flag will filter the national rail stations so that only those operated by TfL are returned (optional)</param>
        /// <returns>ApiResponse of TflApiPresentationEntitiesSearchResponse</returns>
        public ApiResponse< TflApiPresentationEntitiesSearchResponse > StopPointSearch_0WithHttpInfo (string query, List<string> modes = null, bool? faresOnly = null, int? maxResults = null, List<string> lines = null, bool? includeHubs = null, bool? tflOperatedNationalRailStationsOnly = null)
        {
            // verify the required parameter 'query' is set
            if (query == null)
                throw new ApiException(400, "Missing required parameter 'query' when calling StopPointApi->StopPointSearch_0");

            var localVarPath = "/StopPoint/Search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (modes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "modes", modes)); // query parameter
            if (faresOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "faresOnly", faresOnly)); // query parameter
            if (maxResults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxResults", maxResults)); // query parameter
            if (lines != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "lines", lines)); // query parameter
            if (includeHubs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeHubs", includeHubs)); // query parameter
            if (tflOperatedNationalRailStationsOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tflOperatedNationalRailStationsOnly", tflOperatedNationalRailStationsOnly)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StopPointSearch_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TflApiPresentationEntitiesSearchResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TflApiPresentationEntitiesSearchResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TflApiPresentationEntitiesSearchResponse)));
        }

        /// <summary>
        /// Search StopPoints by their common name, or their 5-digit Countdown Bus Stop Code. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The query string, case-insensitive. Leading and trailing wildcards are applied automatically.</param>
        /// <param name="modes">An optional, parameter separated list of the modes to filter by (optional)</param>
        /// <param name="faresOnly">True to only return stations in that have Fares data available for single fares to another station. (optional)</param>
        /// <param name="maxResults">An optional result limit, defaulting to and with a maximum of 50. Since children of the stop point heirarchy are returned for matches,              it is possible that the flattened result set will contain more than 50 items. (optional)</param>
        /// <param name="lines">An optional, parameter separated list of the lines to filter by (optional)</param>
        /// <param name="includeHubs">If true, returns results including HUBs. (optional)</param>
        /// <param name="tflOperatedNationalRailStationsOnly">If the national-rail mode is included, this flag will filter the national rail stations so that only those operated by TfL are returned (optional)</param>
        /// <returns>Task of TflApiPresentationEntitiesSearchResponse</returns>
        public async System.Threading.Tasks.Task<TflApiPresentationEntitiesSearchResponse> StopPointSearch_0Async (string query, List<string> modes = null, bool? faresOnly = null, int? maxResults = null, List<string> lines = null, bool? includeHubs = null, bool? tflOperatedNationalRailStationsOnly = null)
        {
             ApiResponse<TflApiPresentationEntitiesSearchResponse> localVarResponse = await StopPointSearch_0AsyncWithHttpInfo(query, modes, faresOnly, maxResults, lines, includeHubs, tflOperatedNationalRailStationsOnly);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search StopPoints by their common name, or their 5-digit Countdown Bus Stop Code. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The query string, case-insensitive. Leading and trailing wildcards are applied automatically.</param>
        /// <param name="modes">An optional, parameter separated list of the modes to filter by (optional)</param>
        /// <param name="faresOnly">True to only return stations in that have Fares data available for single fares to another station. (optional)</param>
        /// <param name="maxResults">An optional result limit, defaulting to and with a maximum of 50. Since children of the stop point heirarchy are returned for matches,              it is possible that the flattened result set will contain more than 50 items. (optional)</param>
        /// <param name="lines">An optional, parameter separated list of the lines to filter by (optional)</param>
        /// <param name="includeHubs">If true, returns results including HUBs. (optional)</param>
        /// <param name="tflOperatedNationalRailStationsOnly">If the national-rail mode is included, this flag will filter the national rail stations so that only those operated by TfL are returned (optional)</param>
        /// <returns>Task of ApiResponse (TflApiPresentationEntitiesSearchResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TflApiPresentationEntitiesSearchResponse>> StopPointSearch_0AsyncWithHttpInfo (string query, List<string> modes = null, bool? faresOnly = null, int? maxResults = null, List<string> lines = null, bool? includeHubs = null, bool? tflOperatedNationalRailStationsOnly = null)
        {
            // verify the required parameter 'query' is set
            if (query == null)
                throw new ApiException(400, "Missing required parameter 'query' when calling StopPointApi->StopPointSearch_0");

            var localVarPath = "/StopPoint/Search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (modes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "modes", modes)); // query parameter
            if (faresOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "faresOnly", faresOnly)); // query parameter
            if (maxResults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxResults", maxResults)); // query parameter
            if (lines != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "lines", lines)); // query parameter
            if (includeHubs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeHubs", includeHubs)); // query parameter
            if (tflOperatedNationalRailStationsOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tflOperatedNationalRailStationsOnly", tflOperatedNationalRailStationsOnly)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StopPointSearch_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TflApiPresentationEntitiesSearchResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TflApiPresentationEntitiesSearchResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TflApiPresentationEntitiesSearchResponse)));
        }

    }
}
