/* 
 * Transport for London Unified API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITravelTimeApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Gets the TravelTime overlay.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="z">The zoom level.</param>
        /// <param name="pinLat">The latitude of the pin.</param>
        /// <param name="pinLon">The longitude of the pin.</param>
        /// <param name="mapCenterLat">The map center latitude.</param>
        /// <param name="mapCenterLon">The map center longitude.</param>
        /// <param name="scenarioTitle">The title of the scenario.</param>
        /// <param name="timeOfDayId">The id for the time of day (AM/INTER/PM)</param>
        /// <param name="modeId">The id of the mode.</param>
        /// <param name="width">The width of the requested overlay.</param>
        /// <param name="height">The height of the requested overlay.</param>
        /// <param name="direction">The direction of travel.</param>
        /// <param name="travelTimeInterval">The total minutes between the travel time bands</param>
        /// <param name="compareType"></param>
        /// <param name="compareValue"></param>
        /// <returns>SystemObject</returns>
        SystemObject TravelTimeGetCompareOverlay (int? z, double? pinLat, double? pinLon, double? mapCenterLat, double? mapCenterLon, string scenarioTitle, string timeOfDayId, string modeId, int? width, int? height, string direction, int? travelTimeInterval, string compareType, string compareValue);

        /// <summary>
        /// Gets the TravelTime overlay.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="z">The zoom level.</param>
        /// <param name="pinLat">The latitude of the pin.</param>
        /// <param name="pinLon">The longitude of the pin.</param>
        /// <param name="mapCenterLat">The map center latitude.</param>
        /// <param name="mapCenterLon">The map center longitude.</param>
        /// <param name="scenarioTitle">The title of the scenario.</param>
        /// <param name="timeOfDayId">The id for the time of day (AM/INTER/PM)</param>
        /// <param name="modeId">The id of the mode.</param>
        /// <param name="width">The width of the requested overlay.</param>
        /// <param name="height">The height of the requested overlay.</param>
        /// <param name="direction">The direction of travel.</param>
        /// <param name="travelTimeInterval">The total minutes between the travel time bands</param>
        /// <param name="compareType"></param>
        /// <param name="compareValue"></param>
        /// <returns>ApiResponse of SystemObject</returns>
        ApiResponse<SystemObject> TravelTimeGetCompareOverlayWithHttpInfo (int? z, double? pinLat, double? pinLon, double? mapCenterLat, double? mapCenterLon, string scenarioTitle, string timeOfDayId, string modeId, int? width, int? height, string direction, int? travelTimeInterval, string compareType, string compareValue);
        /// <summary>
        /// Gets the TravelTime overlay.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="z">The zoom level.</param>
        /// <param name="pinLat">The latitude of the pin.</param>
        /// <param name="pinLon">The longitude of the pin.</param>
        /// <param name="mapCenterLat">The map center latitude.</param>
        /// <param name="mapCenterLon">The map center longitude.</param>
        /// <param name="scenarioTitle">The title of the scenario.</param>
        /// <param name="timeOfDayId">The id for the time of day (AM/INTER/PM)</param>
        /// <param name="modeId">The id of the mode.</param>
        /// <param name="width">The width of the requested overlay.</param>
        /// <param name="height">The height of the requested overlay.</param>
        /// <param name="direction">The direction of travel.</param>
        /// <param name="travelTimeInterval">The total minutes between the travel time bands</param>
        /// <returns>SystemObject</returns>
        SystemObject TravelTimeGetOverlay (int? z, double? pinLat, double? pinLon, double? mapCenterLat, double? mapCenterLon, string scenarioTitle, string timeOfDayId, string modeId, int? width, int? height, string direction, int? travelTimeInterval);

        /// <summary>
        /// Gets the TravelTime overlay.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="z">The zoom level.</param>
        /// <param name="pinLat">The latitude of the pin.</param>
        /// <param name="pinLon">The longitude of the pin.</param>
        /// <param name="mapCenterLat">The map center latitude.</param>
        /// <param name="mapCenterLon">The map center longitude.</param>
        /// <param name="scenarioTitle">The title of the scenario.</param>
        /// <param name="timeOfDayId">The id for the time of day (AM/INTER/PM)</param>
        /// <param name="modeId">The id of the mode.</param>
        /// <param name="width">The width of the requested overlay.</param>
        /// <param name="height">The height of the requested overlay.</param>
        /// <param name="direction">The direction of travel.</param>
        /// <param name="travelTimeInterval">The total minutes between the travel time bands</param>
        /// <returns>ApiResponse of SystemObject</returns>
        ApiResponse<SystemObject> TravelTimeGetOverlayWithHttpInfo (int? z, double? pinLat, double? pinLon, double? mapCenterLat, double? mapCenterLon, string scenarioTitle, string timeOfDayId, string modeId, int? width, int? height, string direction, int? travelTimeInterval);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Gets the TravelTime overlay.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="z">The zoom level.</param>
        /// <param name="pinLat">The latitude of the pin.</param>
        /// <param name="pinLon">The longitude of the pin.</param>
        /// <param name="mapCenterLat">The map center latitude.</param>
        /// <param name="mapCenterLon">The map center longitude.</param>
        /// <param name="scenarioTitle">The title of the scenario.</param>
        /// <param name="timeOfDayId">The id for the time of day (AM/INTER/PM)</param>
        /// <param name="modeId">The id of the mode.</param>
        /// <param name="width">The width of the requested overlay.</param>
        /// <param name="height">The height of the requested overlay.</param>
        /// <param name="direction">The direction of travel.</param>
        /// <param name="travelTimeInterval">The total minutes between the travel time bands</param>
        /// <param name="compareType"></param>
        /// <param name="compareValue"></param>
        /// <returns>Task of SystemObject</returns>
        System.Threading.Tasks.Task<SystemObject> TravelTimeGetCompareOverlayAsync (int? z, double? pinLat, double? pinLon, double? mapCenterLat, double? mapCenterLon, string scenarioTitle, string timeOfDayId, string modeId, int? width, int? height, string direction, int? travelTimeInterval, string compareType, string compareValue);

        /// <summary>
        /// Gets the TravelTime overlay.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="z">The zoom level.</param>
        /// <param name="pinLat">The latitude of the pin.</param>
        /// <param name="pinLon">The longitude of the pin.</param>
        /// <param name="mapCenterLat">The map center latitude.</param>
        /// <param name="mapCenterLon">The map center longitude.</param>
        /// <param name="scenarioTitle">The title of the scenario.</param>
        /// <param name="timeOfDayId">The id for the time of day (AM/INTER/PM)</param>
        /// <param name="modeId">The id of the mode.</param>
        /// <param name="width">The width of the requested overlay.</param>
        /// <param name="height">The height of the requested overlay.</param>
        /// <param name="direction">The direction of travel.</param>
        /// <param name="travelTimeInterval">The total minutes between the travel time bands</param>
        /// <param name="compareType"></param>
        /// <param name="compareValue"></param>
        /// <returns>Task of ApiResponse (SystemObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<SystemObject>> TravelTimeGetCompareOverlayAsyncWithHttpInfo (int? z, double? pinLat, double? pinLon, double? mapCenterLat, double? mapCenterLon, string scenarioTitle, string timeOfDayId, string modeId, int? width, int? height, string direction, int? travelTimeInterval, string compareType, string compareValue);
        /// <summary>
        /// Gets the TravelTime overlay.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="z">The zoom level.</param>
        /// <param name="pinLat">The latitude of the pin.</param>
        /// <param name="pinLon">The longitude of the pin.</param>
        /// <param name="mapCenterLat">The map center latitude.</param>
        /// <param name="mapCenterLon">The map center longitude.</param>
        /// <param name="scenarioTitle">The title of the scenario.</param>
        /// <param name="timeOfDayId">The id for the time of day (AM/INTER/PM)</param>
        /// <param name="modeId">The id of the mode.</param>
        /// <param name="width">The width of the requested overlay.</param>
        /// <param name="height">The height of the requested overlay.</param>
        /// <param name="direction">The direction of travel.</param>
        /// <param name="travelTimeInterval">The total minutes between the travel time bands</param>
        /// <returns>Task of SystemObject</returns>
        System.Threading.Tasks.Task<SystemObject> TravelTimeGetOverlayAsync (int? z, double? pinLat, double? pinLon, double? mapCenterLat, double? mapCenterLon, string scenarioTitle, string timeOfDayId, string modeId, int? width, int? height, string direction, int? travelTimeInterval);

        /// <summary>
        /// Gets the TravelTime overlay.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="z">The zoom level.</param>
        /// <param name="pinLat">The latitude of the pin.</param>
        /// <param name="pinLon">The longitude of the pin.</param>
        /// <param name="mapCenterLat">The map center latitude.</param>
        /// <param name="mapCenterLon">The map center longitude.</param>
        /// <param name="scenarioTitle">The title of the scenario.</param>
        /// <param name="timeOfDayId">The id for the time of day (AM/INTER/PM)</param>
        /// <param name="modeId">The id of the mode.</param>
        /// <param name="width">The width of the requested overlay.</param>
        /// <param name="height">The height of the requested overlay.</param>
        /// <param name="direction">The direction of travel.</param>
        /// <param name="travelTimeInterval">The total minutes between the travel time bands</param>
        /// <returns>Task of ApiResponse (SystemObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<SystemObject>> TravelTimeGetOverlayAsyncWithHttpInfo (int? z, double? pinLat, double? pinLon, double? mapCenterLat, double? mapCenterLon, string scenarioTitle, string timeOfDayId, string modeId, int? width, int? height, string direction, int? travelTimeInterval);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TravelTimeApi : ITravelTimeApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TravelTimeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TravelTimeApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TravelTimeApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TravelTimeApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Gets the TravelTime overlay. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="z">The zoom level.</param>
        /// <param name="pinLat">The latitude of the pin.</param>
        /// <param name="pinLon">The longitude of the pin.</param>
        /// <param name="mapCenterLat">The map center latitude.</param>
        /// <param name="mapCenterLon">The map center longitude.</param>
        /// <param name="scenarioTitle">The title of the scenario.</param>
        /// <param name="timeOfDayId">The id for the time of day (AM/INTER/PM)</param>
        /// <param name="modeId">The id of the mode.</param>
        /// <param name="width">The width of the requested overlay.</param>
        /// <param name="height">The height of the requested overlay.</param>
        /// <param name="direction">The direction of travel.</param>
        /// <param name="travelTimeInterval">The total minutes between the travel time bands</param>
        /// <param name="compareType"></param>
        /// <param name="compareValue"></param>
        /// <returns>SystemObject</returns>
        public SystemObject TravelTimeGetCompareOverlay (int? z, double? pinLat, double? pinLon, double? mapCenterLat, double? mapCenterLon, string scenarioTitle, string timeOfDayId, string modeId, int? width, int? height, string direction, int? travelTimeInterval, string compareType, string compareValue)
        {
             ApiResponse<SystemObject> localVarResponse = TravelTimeGetCompareOverlayWithHttpInfo(z, pinLat, pinLon, mapCenterLat, mapCenterLon, scenarioTitle, timeOfDayId, modeId, width, height, direction, travelTimeInterval, compareType, compareValue);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the TravelTime overlay. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="z">The zoom level.</param>
        /// <param name="pinLat">The latitude of the pin.</param>
        /// <param name="pinLon">The longitude of the pin.</param>
        /// <param name="mapCenterLat">The map center latitude.</param>
        /// <param name="mapCenterLon">The map center longitude.</param>
        /// <param name="scenarioTitle">The title of the scenario.</param>
        /// <param name="timeOfDayId">The id for the time of day (AM/INTER/PM)</param>
        /// <param name="modeId">The id of the mode.</param>
        /// <param name="width">The width of the requested overlay.</param>
        /// <param name="height">The height of the requested overlay.</param>
        /// <param name="direction">The direction of travel.</param>
        /// <param name="travelTimeInterval">The total minutes between the travel time bands</param>
        /// <param name="compareType"></param>
        /// <param name="compareValue"></param>
        /// <returns>ApiResponse of SystemObject</returns>
        public ApiResponse< SystemObject > TravelTimeGetCompareOverlayWithHttpInfo (int? z, double? pinLat, double? pinLon, double? mapCenterLat, double? mapCenterLon, string scenarioTitle, string timeOfDayId, string modeId, int? width, int? height, string direction, int? travelTimeInterval, string compareType, string compareValue)
        {
            // verify the required parameter 'z' is set
            if (z == null)
                throw new ApiException(400, "Missing required parameter 'z' when calling TravelTimeApi->TravelTimeGetCompareOverlay");
            // verify the required parameter 'pinLat' is set
            if (pinLat == null)
                throw new ApiException(400, "Missing required parameter 'pinLat' when calling TravelTimeApi->TravelTimeGetCompareOverlay");
            // verify the required parameter 'pinLon' is set
            if (pinLon == null)
                throw new ApiException(400, "Missing required parameter 'pinLon' when calling TravelTimeApi->TravelTimeGetCompareOverlay");
            // verify the required parameter 'mapCenterLat' is set
            if (mapCenterLat == null)
                throw new ApiException(400, "Missing required parameter 'mapCenterLat' when calling TravelTimeApi->TravelTimeGetCompareOverlay");
            // verify the required parameter 'mapCenterLon' is set
            if (mapCenterLon == null)
                throw new ApiException(400, "Missing required parameter 'mapCenterLon' when calling TravelTimeApi->TravelTimeGetCompareOverlay");
            // verify the required parameter 'scenarioTitle' is set
            if (scenarioTitle == null)
                throw new ApiException(400, "Missing required parameter 'scenarioTitle' when calling TravelTimeApi->TravelTimeGetCompareOverlay");
            // verify the required parameter 'timeOfDayId' is set
            if (timeOfDayId == null)
                throw new ApiException(400, "Missing required parameter 'timeOfDayId' when calling TravelTimeApi->TravelTimeGetCompareOverlay");
            // verify the required parameter 'modeId' is set
            if (modeId == null)
                throw new ApiException(400, "Missing required parameter 'modeId' when calling TravelTimeApi->TravelTimeGetCompareOverlay");
            // verify the required parameter 'width' is set
            if (width == null)
                throw new ApiException(400, "Missing required parameter 'width' when calling TravelTimeApi->TravelTimeGetCompareOverlay");
            // verify the required parameter 'height' is set
            if (height == null)
                throw new ApiException(400, "Missing required parameter 'height' when calling TravelTimeApi->TravelTimeGetCompareOverlay");
            // verify the required parameter 'direction' is set
            if (direction == null)
                throw new ApiException(400, "Missing required parameter 'direction' when calling TravelTimeApi->TravelTimeGetCompareOverlay");
            // verify the required parameter 'travelTimeInterval' is set
            if (travelTimeInterval == null)
                throw new ApiException(400, "Missing required parameter 'travelTimeInterval' when calling TravelTimeApi->TravelTimeGetCompareOverlay");
            // verify the required parameter 'compareType' is set
            if (compareType == null)
                throw new ApiException(400, "Missing required parameter 'compareType' when calling TravelTimeApi->TravelTimeGetCompareOverlay");
            // verify the required parameter 'compareValue' is set
            if (compareValue == null)
                throw new ApiException(400, "Missing required parameter 'compareValue' when calling TravelTimeApi->TravelTimeGetCompareOverlay");

            var localVarPath = "/TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (z != null) localVarPathParams.Add("z", this.Configuration.ApiClient.ParameterToString(z)); // path parameter
            if (pinLat != null) localVarPathParams.Add("pinLat", this.Configuration.ApiClient.ParameterToString(pinLat)); // path parameter
            if (pinLon != null) localVarPathParams.Add("pinLon", this.Configuration.ApiClient.ParameterToString(pinLon)); // path parameter
            if (mapCenterLat != null) localVarPathParams.Add("mapCenterLat", this.Configuration.ApiClient.ParameterToString(mapCenterLat)); // path parameter
            if (mapCenterLon != null) localVarPathParams.Add("mapCenterLon", this.Configuration.ApiClient.ParameterToString(mapCenterLon)); // path parameter
            if (width != null) localVarPathParams.Add("width", this.Configuration.ApiClient.ParameterToString(width)); // path parameter
            if (height != null) localVarPathParams.Add("height", this.Configuration.ApiClient.ParameterToString(height)); // path parameter
            if (scenarioTitle != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "scenarioTitle", scenarioTitle)); // query parameter
            if (timeOfDayId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timeOfDayId", timeOfDayId)); // query parameter
            if (modeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "modeId", modeId)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter
            if (travelTimeInterval != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "travelTimeInterval", travelTimeInterval)); // query parameter
            if (compareType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "compareType", compareType)); // query parameter
            if (compareValue != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "compareValue", compareValue)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TravelTimeGetCompareOverlay", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SystemObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SystemObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SystemObject)));
        }

        /// <summary>
        /// Gets the TravelTime overlay. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="z">The zoom level.</param>
        /// <param name="pinLat">The latitude of the pin.</param>
        /// <param name="pinLon">The longitude of the pin.</param>
        /// <param name="mapCenterLat">The map center latitude.</param>
        /// <param name="mapCenterLon">The map center longitude.</param>
        /// <param name="scenarioTitle">The title of the scenario.</param>
        /// <param name="timeOfDayId">The id for the time of day (AM/INTER/PM)</param>
        /// <param name="modeId">The id of the mode.</param>
        /// <param name="width">The width of the requested overlay.</param>
        /// <param name="height">The height of the requested overlay.</param>
        /// <param name="direction">The direction of travel.</param>
        /// <param name="travelTimeInterval">The total minutes between the travel time bands</param>
        /// <param name="compareType"></param>
        /// <param name="compareValue"></param>
        /// <returns>Task of SystemObject</returns>
        public async System.Threading.Tasks.Task<SystemObject> TravelTimeGetCompareOverlayAsync (int? z, double? pinLat, double? pinLon, double? mapCenterLat, double? mapCenterLon, string scenarioTitle, string timeOfDayId, string modeId, int? width, int? height, string direction, int? travelTimeInterval, string compareType, string compareValue)
        {
             ApiResponse<SystemObject> localVarResponse = await TravelTimeGetCompareOverlayAsyncWithHttpInfo(z, pinLat, pinLon, mapCenterLat, mapCenterLon, scenarioTitle, timeOfDayId, modeId, width, height, direction, travelTimeInterval, compareType, compareValue);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the TravelTime overlay. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="z">The zoom level.</param>
        /// <param name="pinLat">The latitude of the pin.</param>
        /// <param name="pinLon">The longitude of the pin.</param>
        /// <param name="mapCenterLat">The map center latitude.</param>
        /// <param name="mapCenterLon">The map center longitude.</param>
        /// <param name="scenarioTitle">The title of the scenario.</param>
        /// <param name="timeOfDayId">The id for the time of day (AM/INTER/PM)</param>
        /// <param name="modeId">The id of the mode.</param>
        /// <param name="width">The width of the requested overlay.</param>
        /// <param name="height">The height of the requested overlay.</param>
        /// <param name="direction">The direction of travel.</param>
        /// <param name="travelTimeInterval">The total minutes between the travel time bands</param>
        /// <param name="compareType"></param>
        /// <param name="compareValue"></param>
        /// <returns>Task of ApiResponse (SystemObject)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SystemObject>> TravelTimeGetCompareOverlayAsyncWithHttpInfo (int? z, double? pinLat, double? pinLon, double? mapCenterLat, double? mapCenterLon, string scenarioTitle, string timeOfDayId, string modeId, int? width, int? height, string direction, int? travelTimeInterval, string compareType, string compareValue)
        {
            // verify the required parameter 'z' is set
            if (z == null)
                throw new ApiException(400, "Missing required parameter 'z' when calling TravelTimeApi->TravelTimeGetCompareOverlay");
            // verify the required parameter 'pinLat' is set
            if (pinLat == null)
                throw new ApiException(400, "Missing required parameter 'pinLat' when calling TravelTimeApi->TravelTimeGetCompareOverlay");
            // verify the required parameter 'pinLon' is set
            if (pinLon == null)
                throw new ApiException(400, "Missing required parameter 'pinLon' when calling TravelTimeApi->TravelTimeGetCompareOverlay");
            // verify the required parameter 'mapCenterLat' is set
            if (mapCenterLat == null)
                throw new ApiException(400, "Missing required parameter 'mapCenterLat' when calling TravelTimeApi->TravelTimeGetCompareOverlay");
            // verify the required parameter 'mapCenterLon' is set
            if (mapCenterLon == null)
                throw new ApiException(400, "Missing required parameter 'mapCenterLon' when calling TravelTimeApi->TravelTimeGetCompareOverlay");
            // verify the required parameter 'scenarioTitle' is set
            if (scenarioTitle == null)
                throw new ApiException(400, "Missing required parameter 'scenarioTitle' when calling TravelTimeApi->TravelTimeGetCompareOverlay");
            // verify the required parameter 'timeOfDayId' is set
            if (timeOfDayId == null)
                throw new ApiException(400, "Missing required parameter 'timeOfDayId' when calling TravelTimeApi->TravelTimeGetCompareOverlay");
            // verify the required parameter 'modeId' is set
            if (modeId == null)
                throw new ApiException(400, "Missing required parameter 'modeId' when calling TravelTimeApi->TravelTimeGetCompareOverlay");
            // verify the required parameter 'width' is set
            if (width == null)
                throw new ApiException(400, "Missing required parameter 'width' when calling TravelTimeApi->TravelTimeGetCompareOverlay");
            // verify the required parameter 'height' is set
            if (height == null)
                throw new ApiException(400, "Missing required parameter 'height' when calling TravelTimeApi->TravelTimeGetCompareOverlay");
            // verify the required parameter 'direction' is set
            if (direction == null)
                throw new ApiException(400, "Missing required parameter 'direction' when calling TravelTimeApi->TravelTimeGetCompareOverlay");
            // verify the required parameter 'travelTimeInterval' is set
            if (travelTimeInterval == null)
                throw new ApiException(400, "Missing required parameter 'travelTimeInterval' when calling TravelTimeApi->TravelTimeGetCompareOverlay");
            // verify the required parameter 'compareType' is set
            if (compareType == null)
                throw new ApiException(400, "Missing required parameter 'compareType' when calling TravelTimeApi->TravelTimeGetCompareOverlay");
            // verify the required parameter 'compareValue' is set
            if (compareValue == null)
                throw new ApiException(400, "Missing required parameter 'compareValue' when calling TravelTimeApi->TravelTimeGetCompareOverlay");

            var localVarPath = "/TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (z != null) localVarPathParams.Add("z", this.Configuration.ApiClient.ParameterToString(z)); // path parameter
            if (pinLat != null) localVarPathParams.Add("pinLat", this.Configuration.ApiClient.ParameterToString(pinLat)); // path parameter
            if (pinLon != null) localVarPathParams.Add("pinLon", this.Configuration.ApiClient.ParameterToString(pinLon)); // path parameter
            if (mapCenterLat != null) localVarPathParams.Add("mapCenterLat", this.Configuration.ApiClient.ParameterToString(mapCenterLat)); // path parameter
            if (mapCenterLon != null) localVarPathParams.Add("mapCenterLon", this.Configuration.ApiClient.ParameterToString(mapCenterLon)); // path parameter
            if (width != null) localVarPathParams.Add("width", this.Configuration.ApiClient.ParameterToString(width)); // path parameter
            if (height != null) localVarPathParams.Add("height", this.Configuration.ApiClient.ParameterToString(height)); // path parameter
            if (scenarioTitle != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "scenarioTitle", scenarioTitle)); // query parameter
            if (timeOfDayId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timeOfDayId", timeOfDayId)); // query parameter
            if (modeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "modeId", modeId)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter
            if (travelTimeInterval != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "travelTimeInterval", travelTimeInterval)); // query parameter
            if (compareType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "compareType", compareType)); // query parameter
            if (compareValue != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "compareValue", compareValue)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TravelTimeGetCompareOverlay", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SystemObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SystemObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SystemObject)));
        }

        /// <summary>
        /// Gets the TravelTime overlay. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="z">The zoom level.</param>
        /// <param name="pinLat">The latitude of the pin.</param>
        /// <param name="pinLon">The longitude of the pin.</param>
        /// <param name="mapCenterLat">The map center latitude.</param>
        /// <param name="mapCenterLon">The map center longitude.</param>
        /// <param name="scenarioTitle">The title of the scenario.</param>
        /// <param name="timeOfDayId">The id for the time of day (AM/INTER/PM)</param>
        /// <param name="modeId">The id of the mode.</param>
        /// <param name="width">The width of the requested overlay.</param>
        /// <param name="height">The height of the requested overlay.</param>
        /// <param name="direction">The direction of travel.</param>
        /// <param name="travelTimeInterval">The total minutes between the travel time bands</param>
        /// <returns>SystemObject</returns>
        public SystemObject TravelTimeGetOverlay (int? z, double? pinLat, double? pinLon, double? mapCenterLat, double? mapCenterLon, string scenarioTitle, string timeOfDayId, string modeId, int? width, int? height, string direction, int? travelTimeInterval)
        {
             ApiResponse<SystemObject> localVarResponse = TravelTimeGetOverlayWithHttpInfo(z, pinLat, pinLon, mapCenterLat, mapCenterLon, scenarioTitle, timeOfDayId, modeId, width, height, direction, travelTimeInterval);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the TravelTime overlay. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="z">The zoom level.</param>
        /// <param name="pinLat">The latitude of the pin.</param>
        /// <param name="pinLon">The longitude of the pin.</param>
        /// <param name="mapCenterLat">The map center latitude.</param>
        /// <param name="mapCenterLon">The map center longitude.</param>
        /// <param name="scenarioTitle">The title of the scenario.</param>
        /// <param name="timeOfDayId">The id for the time of day (AM/INTER/PM)</param>
        /// <param name="modeId">The id of the mode.</param>
        /// <param name="width">The width of the requested overlay.</param>
        /// <param name="height">The height of the requested overlay.</param>
        /// <param name="direction">The direction of travel.</param>
        /// <param name="travelTimeInterval">The total minutes between the travel time bands</param>
        /// <returns>ApiResponse of SystemObject</returns>
        public ApiResponse< SystemObject > TravelTimeGetOverlayWithHttpInfo (int? z, double? pinLat, double? pinLon, double? mapCenterLat, double? mapCenterLon, string scenarioTitle, string timeOfDayId, string modeId, int? width, int? height, string direction, int? travelTimeInterval)
        {
            // verify the required parameter 'z' is set
            if (z == null)
                throw new ApiException(400, "Missing required parameter 'z' when calling TravelTimeApi->TravelTimeGetOverlay");
            // verify the required parameter 'pinLat' is set
            if (pinLat == null)
                throw new ApiException(400, "Missing required parameter 'pinLat' when calling TravelTimeApi->TravelTimeGetOverlay");
            // verify the required parameter 'pinLon' is set
            if (pinLon == null)
                throw new ApiException(400, "Missing required parameter 'pinLon' when calling TravelTimeApi->TravelTimeGetOverlay");
            // verify the required parameter 'mapCenterLat' is set
            if (mapCenterLat == null)
                throw new ApiException(400, "Missing required parameter 'mapCenterLat' when calling TravelTimeApi->TravelTimeGetOverlay");
            // verify the required parameter 'mapCenterLon' is set
            if (mapCenterLon == null)
                throw new ApiException(400, "Missing required parameter 'mapCenterLon' when calling TravelTimeApi->TravelTimeGetOverlay");
            // verify the required parameter 'scenarioTitle' is set
            if (scenarioTitle == null)
                throw new ApiException(400, "Missing required parameter 'scenarioTitle' when calling TravelTimeApi->TravelTimeGetOverlay");
            // verify the required parameter 'timeOfDayId' is set
            if (timeOfDayId == null)
                throw new ApiException(400, "Missing required parameter 'timeOfDayId' when calling TravelTimeApi->TravelTimeGetOverlay");
            // verify the required parameter 'modeId' is set
            if (modeId == null)
                throw new ApiException(400, "Missing required parameter 'modeId' when calling TravelTimeApi->TravelTimeGetOverlay");
            // verify the required parameter 'width' is set
            if (width == null)
                throw new ApiException(400, "Missing required parameter 'width' when calling TravelTimeApi->TravelTimeGetOverlay");
            // verify the required parameter 'height' is set
            if (height == null)
                throw new ApiException(400, "Missing required parameter 'height' when calling TravelTimeApi->TravelTimeGetOverlay");
            // verify the required parameter 'direction' is set
            if (direction == null)
                throw new ApiException(400, "Missing required parameter 'direction' when calling TravelTimeApi->TravelTimeGetOverlay");
            // verify the required parameter 'travelTimeInterval' is set
            if (travelTimeInterval == null)
                throw new ApiException(400, "Missing required parameter 'travelTimeInterval' when calling TravelTimeApi->TravelTimeGetOverlay");

            var localVarPath = "/TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (z != null) localVarPathParams.Add("z", this.Configuration.ApiClient.ParameterToString(z)); // path parameter
            if (pinLat != null) localVarPathParams.Add("pinLat", this.Configuration.ApiClient.ParameterToString(pinLat)); // path parameter
            if (pinLon != null) localVarPathParams.Add("pinLon", this.Configuration.ApiClient.ParameterToString(pinLon)); // path parameter
            if (mapCenterLat != null) localVarPathParams.Add("mapCenterLat", this.Configuration.ApiClient.ParameterToString(mapCenterLat)); // path parameter
            if (mapCenterLon != null) localVarPathParams.Add("mapCenterLon", this.Configuration.ApiClient.ParameterToString(mapCenterLon)); // path parameter
            if (width != null) localVarPathParams.Add("width", this.Configuration.ApiClient.ParameterToString(width)); // path parameter
            if (height != null) localVarPathParams.Add("height", this.Configuration.ApiClient.ParameterToString(height)); // path parameter
            if (scenarioTitle != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "scenarioTitle", scenarioTitle)); // query parameter
            if (timeOfDayId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timeOfDayId", timeOfDayId)); // query parameter
            if (modeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "modeId", modeId)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter
            if (travelTimeInterval != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "travelTimeInterval", travelTimeInterval)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TravelTimeGetOverlay", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SystemObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SystemObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SystemObject)));
        }

        /// <summary>
        /// Gets the TravelTime overlay. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="z">The zoom level.</param>
        /// <param name="pinLat">The latitude of the pin.</param>
        /// <param name="pinLon">The longitude of the pin.</param>
        /// <param name="mapCenterLat">The map center latitude.</param>
        /// <param name="mapCenterLon">The map center longitude.</param>
        /// <param name="scenarioTitle">The title of the scenario.</param>
        /// <param name="timeOfDayId">The id for the time of day (AM/INTER/PM)</param>
        /// <param name="modeId">The id of the mode.</param>
        /// <param name="width">The width of the requested overlay.</param>
        /// <param name="height">The height of the requested overlay.</param>
        /// <param name="direction">The direction of travel.</param>
        /// <param name="travelTimeInterval">The total minutes between the travel time bands</param>
        /// <returns>Task of SystemObject</returns>
        public async System.Threading.Tasks.Task<SystemObject> TravelTimeGetOverlayAsync (int? z, double? pinLat, double? pinLon, double? mapCenterLat, double? mapCenterLon, string scenarioTitle, string timeOfDayId, string modeId, int? width, int? height, string direction, int? travelTimeInterval)
        {
             ApiResponse<SystemObject> localVarResponse = await TravelTimeGetOverlayAsyncWithHttpInfo(z, pinLat, pinLon, mapCenterLat, mapCenterLon, scenarioTitle, timeOfDayId, modeId, width, height, direction, travelTimeInterval);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the TravelTime overlay. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="z">The zoom level.</param>
        /// <param name="pinLat">The latitude of the pin.</param>
        /// <param name="pinLon">The longitude of the pin.</param>
        /// <param name="mapCenterLat">The map center latitude.</param>
        /// <param name="mapCenterLon">The map center longitude.</param>
        /// <param name="scenarioTitle">The title of the scenario.</param>
        /// <param name="timeOfDayId">The id for the time of day (AM/INTER/PM)</param>
        /// <param name="modeId">The id of the mode.</param>
        /// <param name="width">The width of the requested overlay.</param>
        /// <param name="height">The height of the requested overlay.</param>
        /// <param name="direction">The direction of travel.</param>
        /// <param name="travelTimeInterval">The total minutes between the travel time bands</param>
        /// <returns>Task of ApiResponse (SystemObject)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SystemObject>> TravelTimeGetOverlayAsyncWithHttpInfo (int? z, double? pinLat, double? pinLon, double? mapCenterLat, double? mapCenterLon, string scenarioTitle, string timeOfDayId, string modeId, int? width, int? height, string direction, int? travelTimeInterval)
        {
            // verify the required parameter 'z' is set
            if (z == null)
                throw new ApiException(400, "Missing required parameter 'z' when calling TravelTimeApi->TravelTimeGetOverlay");
            // verify the required parameter 'pinLat' is set
            if (pinLat == null)
                throw new ApiException(400, "Missing required parameter 'pinLat' when calling TravelTimeApi->TravelTimeGetOverlay");
            // verify the required parameter 'pinLon' is set
            if (pinLon == null)
                throw new ApiException(400, "Missing required parameter 'pinLon' when calling TravelTimeApi->TravelTimeGetOverlay");
            // verify the required parameter 'mapCenterLat' is set
            if (mapCenterLat == null)
                throw new ApiException(400, "Missing required parameter 'mapCenterLat' when calling TravelTimeApi->TravelTimeGetOverlay");
            // verify the required parameter 'mapCenterLon' is set
            if (mapCenterLon == null)
                throw new ApiException(400, "Missing required parameter 'mapCenterLon' when calling TravelTimeApi->TravelTimeGetOverlay");
            // verify the required parameter 'scenarioTitle' is set
            if (scenarioTitle == null)
                throw new ApiException(400, "Missing required parameter 'scenarioTitle' when calling TravelTimeApi->TravelTimeGetOverlay");
            // verify the required parameter 'timeOfDayId' is set
            if (timeOfDayId == null)
                throw new ApiException(400, "Missing required parameter 'timeOfDayId' when calling TravelTimeApi->TravelTimeGetOverlay");
            // verify the required parameter 'modeId' is set
            if (modeId == null)
                throw new ApiException(400, "Missing required parameter 'modeId' when calling TravelTimeApi->TravelTimeGetOverlay");
            // verify the required parameter 'width' is set
            if (width == null)
                throw new ApiException(400, "Missing required parameter 'width' when calling TravelTimeApi->TravelTimeGetOverlay");
            // verify the required parameter 'height' is set
            if (height == null)
                throw new ApiException(400, "Missing required parameter 'height' when calling TravelTimeApi->TravelTimeGetOverlay");
            // verify the required parameter 'direction' is set
            if (direction == null)
                throw new ApiException(400, "Missing required parameter 'direction' when calling TravelTimeApi->TravelTimeGetOverlay");
            // verify the required parameter 'travelTimeInterval' is set
            if (travelTimeInterval == null)
                throw new ApiException(400, "Missing required parameter 'travelTimeInterval' when calling TravelTimeApi->TravelTimeGetOverlay");

            var localVarPath = "/TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (z != null) localVarPathParams.Add("z", this.Configuration.ApiClient.ParameterToString(z)); // path parameter
            if (pinLat != null) localVarPathParams.Add("pinLat", this.Configuration.ApiClient.ParameterToString(pinLat)); // path parameter
            if (pinLon != null) localVarPathParams.Add("pinLon", this.Configuration.ApiClient.ParameterToString(pinLon)); // path parameter
            if (mapCenterLat != null) localVarPathParams.Add("mapCenterLat", this.Configuration.ApiClient.ParameterToString(mapCenterLat)); // path parameter
            if (mapCenterLon != null) localVarPathParams.Add("mapCenterLon", this.Configuration.ApiClient.ParameterToString(mapCenterLon)); // path parameter
            if (width != null) localVarPathParams.Add("width", this.Configuration.ApiClient.ParameterToString(width)); // path parameter
            if (height != null) localVarPathParams.Add("height", this.Configuration.ApiClient.ParameterToString(height)); // path parameter
            if (scenarioTitle != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "scenarioTitle", scenarioTitle)); // query parameter
            if (timeOfDayId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timeOfDayId", timeOfDayId)); // query parameter
            if (modeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "modeId", modeId)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter
            if (travelTimeInterval != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "travelTimeInterval", travelTimeInterval)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TravelTimeGetOverlay", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SystemObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SystemObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SystemObject)));
        }

    }
}
