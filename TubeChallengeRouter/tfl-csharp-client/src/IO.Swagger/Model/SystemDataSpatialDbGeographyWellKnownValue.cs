/* 
 * Transport for London Unified API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// SystemDataSpatialDbGeographyWellKnownValue
    /// </summary>
    [DataContract]
    public partial class SystemDataSpatialDbGeographyWellKnownValue :  IEquatable<SystemDataSpatialDbGeographyWellKnownValue>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemDataSpatialDbGeographyWellKnownValue" /> class.
        /// </summary>
        /// <param name="coordinateSystemId">coordinateSystemId.</param>
        /// <param name="wellKnownText">wellKnownText.</param>
        /// <param name="wellKnownBinary">wellKnownBinary.</param>
        public SystemDataSpatialDbGeographyWellKnownValue(int? coordinateSystemId = default(int?), string wellKnownText = default(string), byte[] wellKnownBinary = default(byte[]))
        {
            this.CoordinateSystemId = coordinateSystemId;
            this.WellKnownText = wellKnownText;
            this.WellKnownBinary = wellKnownBinary;
        }
        
        /// <summary>
        /// Gets or Sets CoordinateSystemId
        /// </summary>
        [DataMember(Name="coordinateSystemId", EmitDefaultValue=false)]
        public int? CoordinateSystemId { get; set; }

        /// <summary>
        /// Gets or Sets WellKnownText
        /// </summary>
        [DataMember(Name="wellKnownText", EmitDefaultValue=false)]
        public string WellKnownText { get; set; }

        /// <summary>
        /// Gets or Sets WellKnownBinary
        /// </summary>
        [DataMember(Name="wellKnownBinary", EmitDefaultValue=false)]
        public byte[] WellKnownBinary { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SystemDataSpatialDbGeographyWellKnownValue {\n");
            sb.Append("  CoordinateSystemId: ").Append(CoordinateSystemId).Append("\n");
            sb.Append("  WellKnownText: ").Append(WellKnownText).Append("\n");
            sb.Append("  WellKnownBinary: ").Append(WellKnownBinary).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SystemDataSpatialDbGeographyWellKnownValue);
        }

        /// <summary>
        /// Returns true if SystemDataSpatialDbGeographyWellKnownValue instances are equal
        /// </summary>
        /// <param name="input">Instance of SystemDataSpatialDbGeographyWellKnownValue to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SystemDataSpatialDbGeographyWellKnownValue input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CoordinateSystemId == input.CoordinateSystemId ||
                    (this.CoordinateSystemId != null &&
                    this.CoordinateSystemId.Equals(input.CoordinateSystemId))
                ) && 
                (
                    this.WellKnownText == input.WellKnownText ||
                    (this.WellKnownText != null &&
                    this.WellKnownText.Equals(input.WellKnownText))
                ) && 
                (
                    this.WellKnownBinary == input.WellKnownBinary ||
                    (this.WellKnownBinary != null &&
                    this.WellKnownBinary.Equals(input.WellKnownBinary))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CoordinateSystemId != null)
                    hashCode = hashCode * 59 + this.CoordinateSystemId.GetHashCode();
                if (this.WellKnownText != null)
                    hashCode = hashCode * 59 + this.WellKnownText.GetHashCode();
                if (this.WellKnownBinary != null)
                    hashCode = hashCode * 59 + this.WellKnownBinary.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
