/* 
 * Transport for London Unified API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TflApiCommonJourneyPlannerJpElevation
    /// </summary>
    [DataContract]
    public partial class TflApiCommonJourneyPlannerJpElevation :  IEquatable<TflApiCommonJourneyPlannerJpElevation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TflApiCommonJourneyPlannerJpElevation" /> class.
        /// </summary>
        /// <param name="distance">distance.</param>
        /// <param name="startLat">startLat.</param>
        /// <param name="startLon">startLon.</param>
        /// <param name="endLat">endLat.</param>
        /// <param name="endLon">endLon.</param>
        /// <param name="heightFromPreviousPoint">heightFromPreviousPoint.</param>
        /// <param name="gradient">gradient.</param>
        public TflApiCommonJourneyPlannerJpElevation(int? distance = default(int?), double? startLat = default(double?), double? startLon = default(double?), double? endLat = default(double?), double? endLon = default(double?), int? heightFromPreviousPoint = default(int?), double? gradient = default(double?))
        {
            this.Distance = distance;
            this.StartLat = startLat;
            this.StartLon = startLon;
            this.EndLat = endLat;
            this.EndLon = endLon;
            this.HeightFromPreviousPoint = heightFromPreviousPoint;
            this.Gradient = gradient;
        }
        
        /// <summary>
        /// Gets or Sets Distance
        /// </summary>
        [DataMember(Name="distance", EmitDefaultValue=false)]
        public int? Distance { get; set; }

        /// <summary>
        /// Gets or Sets StartLat
        /// </summary>
        [DataMember(Name="startLat", EmitDefaultValue=false)]
        public double? StartLat { get; set; }

        /// <summary>
        /// Gets or Sets StartLon
        /// </summary>
        [DataMember(Name="startLon", EmitDefaultValue=false)]
        public double? StartLon { get; set; }

        /// <summary>
        /// Gets or Sets EndLat
        /// </summary>
        [DataMember(Name="endLat", EmitDefaultValue=false)]
        public double? EndLat { get; set; }

        /// <summary>
        /// Gets or Sets EndLon
        /// </summary>
        [DataMember(Name="endLon", EmitDefaultValue=false)]
        public double? EndLon { get; set; }

        /// <summary>
        /// Gets or Sets HeightFromPreviousPoint
        /// </summary>
        [DataMember(Name="heightFromPreviousPoint", EmitDefaultValue=false)]
        public int? HeightFromPreviousPoint { get; set; }

        /// <summary>
        /// Gets or Sets Gradient
        /// </summary>
        [DataMember(Name="gradient", EmitDefaultValue=false)]
        public double? Gradient { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TflApiCommonJourneyPlannerJpElevation {\n");
            sb.Append("  Distance: ").Append(Distance).Append("\n");
            sb.Append("  StartLat: ").Append(StartLat).Append("\n");
            sb.Append("  StartLon: ").Append(StartLon).Append("\n");
            sb.Append("  EndLat: ").Append(EndLat).Append("\n");
            sb.Append("  EndLon: ").Append(EndLon).Append("\n");
            sb.Append("  HeightFromPreviousPoint: ").Append(HeightFromPreviousPoint).Append("\n");
            sb.Append("  Gradient: ").Append(Gradient).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TflApiCommonJourneyPlannerJpElevation);
        }

        /// <summary>
        /// Returns true if TflApiCommonJourneyPlannerJpElevation instances are equal
        /// </summary>
        /// <param name="input">Instance of TflApiCommonJourneyPlannerJpElevation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TflApiCommonJourneyPlannerJpElevation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Distance == input.Distance ||
                    (this.Distance != null &&
                    this.Distance.Equals(input.Distance))
                ) && 
                (
                    this.StartLat == input.StartLat ||
                    (this.StartLat != null &&
                    this.StartLat.Equals(input.StartLat))
                ) && 
                (
                    this.StartLon == input.StartLon ||
                    (this.StartLon != null &&
                    this.StartLon.Equals(input.StartLon))
                ) && 
                (
                    this.EndLat == input.EndLat ||
                    (this.EndLat != null &&
                    this.EndLat.Equals(input.EndLat))
                ) && 
                (
                    this.EndLon == input.EndLon ||
                    (this.EndLon != null &&
                    this.EndLon.Equals(input.EndLon))
                ) && 
                (
                    this.HeightFromPreviousPoint == input.HeightFromPreviousPoint ||
                    (this.HeightFromPreviousPoint != null &&
                    this.HeightFromPreviousPoint.Equals(input.HeightFromPreviousPoint))
                ) && 
                (
                    this.Gradient == input.Gradient ||
                    (this.Gradient != null &&
                    this.Gradient.Equals(input.Gradient))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Distance != null)
                    hashCode = hashCode * 59 + this.Distance.GetHashCode();
                if (this.StartLat != null)
                    hashCode = hashCode * 59 + this.StartLat.GetHashCode();
                if (this.StartLon != null)
                    hashCode = hashCode * 59 + this.StartLon.GetHashCode();
                if (this.EndLat != null)
                    hashCode = hashCode * 59 + this.EndLat.GetHashCode();
                if (this.EndLon != null)
                    hashCode = hashCode * 59 + this.EndLon.GetHashCode();
                if (this.HeightFromPreviousPoint != null)
                    hashCode = hashCode * 59 + this.HeightFromPreviousPoint.GetHashCode();
                if (this.Gradient != null)
                    hashCode = hashCode * 59 + this.Gradient.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
