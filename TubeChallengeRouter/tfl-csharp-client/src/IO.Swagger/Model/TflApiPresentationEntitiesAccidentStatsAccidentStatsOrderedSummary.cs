/* 
 * Transport for London Unified API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TflApiPresentationEntitiesAccidentStatsAccidentStatsOrderedSummary
    /// </summary>
    [DataContract]
    public partial class TflApiPresentationEntitiesAccidentStatsAccidentStatsOrderedSummary :  IEquatable<TflApiPresentationEntitiesAccidentStatsAccidentStatsOrderedSummary>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TflApiPresentationEntitiesAccidentStatsAccidentStatsOrderedSummary" /> class.
        /// </summary>
        /// <param name="year">year.</param>
        /// <param name="borough">borough.</param>
        /// <param name="accidents">accidents.</param>
        public TflApiPresentationEntitiesAccidentStatsAccidentStatsOrderedSummary(int? year = default(int?), string borough = default(string), int? accidents = default(int?))
        {
            this.Year = year;
            this.Borough = borough;
            this.Accidents = accidents;
        }
        
        /// <summary>
        /// Gets or Sets Year
        /// </summary>
        [DataMember(Name="year", EmitDefaultValue=false)]
        public int? Year { get; set; }

        /// <summary>
        /// Gets or Sets Borough
        /// </summary>
        [DataMember(Name="borough", EmitDefaultValue=false)]
        public string Borough { get; set; }

        /// <summary>
        /// Gets or Sets Accidents
        /// </summary>
        [DataMember(Name="accidents", EmitDefaultValue=false)]
        public int? Accidents { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TflApiPresentationEntitiesAccidentStatsAccidentStatsOrderedSummary {\n");
            sb.Append("  Year: ").Append(Year).Append("\n");
            sb.Append("  Borough: ").Append(Borough).Append("\n");
            sb.Append("  Accidents: ").Append(Accidents).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TflApiPresentationEntitiesAccidentStatsAccidentStatsOrderedSummary);
        }

        /// <summary>
        /// Returns true if TflApiPresentationEntitiesAccidentStatsAccidentStatsOrderedSummary instances are equal
        /// </summary>
        /// <param name="input">Instance of TflApiPresentationEntitiesAccidentStatsAccidentStatsOrderedSummary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TflApiPresentationEntitiesAccidentStatsAccidentStatsOrderedSummary input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Year == input.Year ||
                    (this.Year != null &&
                    this.Year.Equals(input.Year))
                ) && 
                (
                    this.Borough == input.Borough ||
                    (this.Borough != null &&
                    this.Borough.Equals(input.Borough))
                ) && 
                (
                    this.Accidents == input.Accidents ||
                    (this.Accidents != null &&
                    this.Accidents.Equals(input.Accidents))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Year != null)
                    hashCode = hashCode * 59 + this.Year.GetHashCode();
                if (this.Borough != null)
                    hashCode = hashCode * 59 + this.Borough.GetHashCode();
                if (this.Accidents != null)
                    hashCode = hashCode * 59 + this.Accidents.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
