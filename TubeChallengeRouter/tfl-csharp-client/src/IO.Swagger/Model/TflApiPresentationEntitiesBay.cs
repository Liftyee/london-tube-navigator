/* 
 * Transport for London Unified API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TflApiPresentationEntitiesBay
    /// </summary>
    [DataContract]
    public partial class TflApiPresentationEntitiesBay :  IEquatable<TflApiPresentationEntitiesBay>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TflApiPresentationEntitiesBay" /> class.
        /// </summary>
        /// <param name="bayType">bayType.</param>
        /// <param name="bayCount">bayCount.</param>
        /// <param name="free">free.</param>
        /// <param name="occupied">occupied.</param>
        public TflApiPresentationEntitiesBay(string bayType = default(string), int? bayCount = default(int?), int? free = default(int?), int? occupied = default(int?))
        {
            this.BayType = bayType;
            this.BayCount = bayCount;
            this.Free = free;
            this.Occupied = occupied;
        }
        
        /// <summary>
        /// Gets or Sets BayType
        /// </summary>
        [DataMember(Name="bayType", EmitDefaultValue=false)]
        public string BayType { get; set; }

        /// <summary>
        /// Gets or Sets BayCount
        /// </summary>
        [DataMember(Name="bayCount", EmitDefaultValue=false)]
        public int? BayCount { get; set; }

        /// <summary>
        /// Gets or Sets Free
        /// </summary>
        [DataMember(Name="free", EmitDefaultValue=false)]
        public int? Free { get; set; }

        /// <summary>
        /// Gets or Sets Occupied
        /// </summary>
        [DataMember(Name="occupied", EmitDefaultValue=false)]
        public int? Occupied { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TflApiPresentationEntitiesBay {\n");
            sb.Append("  BayType: ").Append(BayType).Append("\n");
            sb.Append("  BayCount: ").Append(BayCount).Append("\n");
            sb.Append("  Free: ").Append(Free).Append("\n");
            sb.Append("  Occupied: ").Append(Occupied).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TflApiPresentationEntitiesBay);
        }

        /// <summary>
        /// Returns true if TflApiPresentationEntitiesBay instances are equal
        /// </summary>
        /// <param name="input">Instance of TflApiPresentationEntitiesBay to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TflApiPresentationEntitiesBay input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BayType == input.BayType ||
                    (this.BayType != null &&
                    this.BayType.Equals(input.BayType))
                ) && 
                (
                    this.BayCount == input.BayCount ||
                    (this.BayCount != null &&
                    this.BayCount.Equals(input.BayCount))
                ) && 
                (
                    this.Free == input.Free ||
                    (this.Free != null &&
                    this.Free.Equals(input.Free))
                ) && 
                (
                    this.Occupied == input.Occupied ||
                    (this.Occupied != null &&
                    this.Occupied.Equals(input.Occupied))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BayType != null)
                    hashCode = hashCode * 59 + this.BayType.GetHashCode();
                if (this.BayCount != null)
                    hashCode = hashCode * 59 + this.BayCount.GetHashCode();
                if (this.Free != null)
                    hashCode = hashCode * 59 + this.Free.GetHashCode();
                if (this.Occupied != null)
                    hashCode = hashCode * 59 + this.Occupied.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
