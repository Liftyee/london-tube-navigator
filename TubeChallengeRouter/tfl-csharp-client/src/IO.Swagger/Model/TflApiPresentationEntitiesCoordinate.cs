/* 
 * Transport for London Unified API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TflApiPresentationEntitiesCoordinate
    /// </summary>
    [DataContract]
    public partial class TflApiPresentationEntitiesCoordinate :  IEquatable<TflApiPresentationEntitiesCoordinate>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TflApiPresentationEntitiesCoordinate" /> class.
        /// </summary>
        /// <param name="longitude">longitude.</param>
        /// <param name="latitude">latitude.</param>
        /// <param name="easting">easting.</param>
        /// <param name="northing">northing.</param>
        /// <param name="xCoord">xCoord.</param>
        /// <param name="yCoord">yCoord.</param>
        public TflApiPresentationEntitiesCoordinate(double? longitude = default(double?), double? latitude = default(double?), double? easting = default(double?), double? northing = default(double?), int? xCoord = default(int?), int? yCoord = default(int?))
        {
            this.Longitude = longitude;
            this.Latitude = latitude;
            this.Easting = easting;
            this.Northing = northing;
            this.XCoord = xCoord;
            this.YCoord = yCoord;
        }
        
        /// <summary>
        /// Gets or Sets Longitude
        /// </summary>
        [DataMember(Name="longitude", EmitDefaultValue=false)]
        public double? Longitude { get; set; }

        /// <summary>
        /// Gets or Sets Latitude
        /// </summary>
        [DataMember(Name="latitude", EmitDefaultValue=false)]
        public double? Latitude { get; set; }

        /// <summary>
        /// Gets or Sets Easting
        /// </summary>
        [DataMember(Name="easting", EmitDefaultValue=false)]
        public double? Easting { get; set; }

        /// <summary>
        /// Gets or Sets Northing
        /// </summary>
        [DataMember(Name="northing", EmitDefaultValue=false)]
        public double? Northing { get; set; }

        /// <summary>
        /// Gets or Sets XCoord
        /// </summary>
        [DataMember(Name="xCoord", EmitDefaultValue=false)]
        public int? XCoord { get; set; }

        /// <summary>
        /// Gets or Sets YCoord
        /// </summary>
        [DataMember(Name="yCoord", EmitDefaultValue=false)]
        public int? YCoord { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TflApiPresentationEntitiesCoordinate {\n");
            sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("  Easting: ").Append(Easting).Append("\n");
            sb.Append("  Northing: ").Append(Northing).Append("\n");
            sb.Append("  XCoord: ").Append(XCoord).Append("\n");
            sb.Append("  YCoord: ").Append(YCoord).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TflApiPresentationEntitiesCoordinate);
        }

        /// <summary>
        /// Returns true if TflApiPresentationEntitiesCoordinate instances are equal
        /// </summary>
        /// <param name="input">Instance of TflApiPresentationEntitiesCoordinate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TflApiPresentationEntitiesCoordinate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Longitude == input.Longitude ||
                    (this.Longitude != null &&
                    this.Longitude.Equals(input.Longitude))
                ) && 
                (
                    this.Latitude == input.Latitude ||
                    (this.Latitude != null &&
                    this.Latitude.Equals(input.Latitude))
                ) && 
                (
                    this.Easting == input.Easting ||
                    (this.Easting != null &&
                    this.Easting.Equals(input.Easting))
                ) && 
                (
                    this.Northing == input.Northing ||
                    (this.Northing != null &&
                    this.Northing.Equals(input.Northing))
                ) && 
                (
                    this.XCoord == input.XCoord ||
                    (this.XCoord != null &&
                    this.XCoord.Equals(input.XCoord))
                ) && 
                (
                    this.YCoord == input.YCoord ||
                    (this.YCoord != null &&
                    this.YCoord.Equals(input.YCoord))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Longitude != null)
                    hashCode = hashCode * 59 + this.Longitude.GetHashCode();
                if (this.Latitude != null)
                    hashCode = hashCode * 59 + this.Latitude.GetHashCode();
                if (this.Easting != null)
                    hashCode = hashCode * 59 + this.Easting.GetHashCode();
                if (this.Northing != null)
                    hashCode = hashCode * 59 + this.Northing.GetHashCode();
                if (this.XCoord != null)
                    hashCode = hashCode * 59 + this.XCoord.GetHashCode();
                if (this.YCoord != null)
                    hashCode = hashCode * 59 + this.YCoord.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
