/* 
 * Transport for London Unified API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TflApiPresentationEntitiesCycleSuperhighway
    /// </summary>
    [DataContract]
    public partial class TflApiPresentationEntitiesCycleSuperhighway :  IEquatable<TflApiPresentationEntitiesCycleSuperhighway>, IValidatableObject
    {
        /// <summary>
        /// Cycle route status i.e Proposed, Existing etc
        /// </summary>
        /// <value>Cycle route status i.e Proposed, Existing etc</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum Unknown for value: Unknown
            /// </summary>
            [EnumMember(Value = "Unknown")]
            Unknown = 1,
            
            /// <summary>
            /// Enum All for value: All
            /// </summary>
            [EnumMember(Value = "All")]
            All = 2,
            
            /// <summary>
            /// Enum Open for value: Open
            /// </summary>
            [EnumMember(Value = "Open")]
            Open = 3,
            
            /// <summary>
            /// Enum InProgress for value: In Progress
            /// </summary>
            [EnumMember(Value = "In Progress")]
            InProgress = 4,
            
            /// <summary>
            /// Enum Planned for value: Planned
            /// </summary>
            [EnumMember(Value = "Planned")]
            Planned = 5,
            
            /// <summary>
            /// Enum PlannedSubjecttofeasibilityandconsultation for value: Planned - Subject to feasibility and consultation.
            /// </summary>
            [EnumMember(Value = "Planned - Subject to feasibility and consultation.")]
            PlannedSubjecttofeasibilityandconsultation = 6,
            
            /// <summary>
            /// Enum NotOpen for value: Not Open
            /// </summary>
            [EnumMember(Value = "Not Open")]
            NotOpen = 7
        }

        /// <summary>
        /// Cycle route status i.e Proposed, Existing etc
        /// </summary>
        /// <value>Cycle route status i.e Proposed, Existing etc</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Type of cycle route e.g CycleSuperhighways, Quietways, MiniHollands etc
        /// </summary>
        /// <value>Type of cycle route e.g CycleSuperhighways, Quietways, MiniHollands etc</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RouteTypeEnum
        {
            
            /// <summary>
            /// Enum Unknown for value: Unknown
            /// </summary>
            [EnumMember(Value = "Unknown")]
            Unknown = 1,
            
            /// <summary>
            /// Enum All for value: All
            /// </summary>
            [EnumMember(Value = "All")]
            All = 2,
            
            /// <summary>
            /// Enum CycleSuperhighways for value: Cycle Superhighways
            /// </summary>
            [EnumMember(Value = "Cycle Superhighways")]
            CycleSuperhighways = 3,
            
            /// <summary>
            /// Enum Quietways for value: Quietways
            /// </summary>
            [EnumMember(Value = "Quietways")]
            Quietways = 4,
            
            /// <summary>
            /// Enum Cycleways for value: Cycleways
            /// </summary>
            [EnumMember(Value = "Cycleways")]
            Cycleways = 5,
            
            /// <summary>
            /// Enum MiniHollands for value: Mini-Hollands
            /// </summary>
            [EnumMember(Value = "Mini-Hollands")]
            MiniHollands = 6,
            
            /// <summary>
            /// Enum CentralLondonGrid for value: Central London Grid
            /// </summary>
            [EnumMember(Value = "Central London Grid")]
            CentralLondonGrid = 7,
            
            /// <summary>
            /// Enum StreetspaceRoute for value: Streetspace Route
            /// </summary>
            [EnumMember(Value = "Streetspace Route")]
            StreetspaceRoute = 8
        }

        /// <summary>
        /// Type of cycle route e.g CycleSuperhighways, Quietways, MiniHollands etc
        /// </summary>
        /// <value>Type of cycle route e.g CycleSuperhighways, Quietways, MiniHollands etc</value>
        [DataMember(Name="routeType", EmitDefaultValue=false)]
        public RouteTypeEnum? RouteType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TflApiPresentationEntitiesCycleSuperhighway" /> class.
        /// </summary>
        /// <param name="id">The Id.</param>
        /// <param name="label">The long label to show on maps when zoomed in.</param>
        /// <param name="labelShort">The short label to show on maps.</param>
        /// <param name="geography">A LineString or MultiLineString that forms the route of the highway.</param>
        /// <param name="segmented">True if the route is split into segments.</param>
        /// <param name="modified">When the data was last updated.</param>
        /// <param name="status">Cycle route status i.e Proposed, Existing etc.</param>
        /// <param name="routeType">Type of cycle route e.g CycleSuperhighways, Quietways, MiniHollands etc.</param>
        public TflApiPresentationEntitiesCycleSuperhighway(string id = default(string), string label = default(string), string labelShort = default(string), SystemDataSpatialDbGeography geography = default(SystemDataSpatialDbGeography), bool? segmented = default(bool?), DateTime? modified = default(DateTime?), StatusEnum? status = default(StatusEnum?), RouteTypeEnum? routeType = default(RouteTypeEnum?))
        {
            this.Id = id;
            this.Label = label;
            this.LabelShort = labelShort;
            this.Geography = geography;
            this.Segmented = segmented;
            this.Modified = modified;
            this.Status = status;
            this.RouteType = routeType;
        }
        
        /// <summary>
        /// The Id
        /// </summary>
        /// <value>The Id</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The long label to show on maps when zoomed in
        /// </summary>
        /// <value>The long label to show on maps when zoomed in</value>
        [DataMember(Name="label", EmitDefaultValue=false)]
        public string Label { get; set; }

        /// <summary>
        /// The short label to show on maps
        /// </summary>
        /// <value>The short label to show on maps</value>
        [DataMember(Name="labelShort", EmitDefaultValue=false)]
        public string LabelShort { get; set; }

        /// <summary>
        /// A LineString or MultiLineString that forms the route of the highway
        /// </summary>
        /// <value>A LineString or MultiLineString that forms the route of the highway</value>
        [DataMember(Name="geography", EmitDefaultValue=false)]
        public SystemDataSpatialDbGeography Geography { get; set; }

        /// <summary>
        /// True if the route is split into segments
        /// </summary>
        /// <value>True if the route is split into segments</value>
        [DataMember(Name="segmented", EmitDefaultValue=false)]
        public bool? Segmented { get; set; }

        /// <summary>
        /// When the data was last updated
        /// </summary>
        /// <value>When the data was last updated</value>
        [DataMember(Name="modified", EmitDefaultValue=false)]
        public DateTime? Modified { get; set; }



        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TflApiPresentationEntitiesCycleSuperhighway {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  LabelShort: ").Append(LabelShort).Append("\n");
            sb.Append("  Geography: ").Append(Geography).Append("\n");
            sb.Append("  Segmented: ").Append(Segmented).Append("\n");
            sb.Append("  Modified: ").Append(Modified).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  RouteType: ").Append(RouteType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TflApiPresentationEntitiesCycleSuperhighway);
        }

        /// <summary>
        /// Returns true if TflApiPresentationEntitiesCycleSuperhighway instances are equal
        /// </summary>
        /// <param name="input">Instance of TflApiPresentationEntitiesCycleSuperhighway to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TflApiPresentationEntitiesCycleSuperhighway input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Label == input.Label ||
                    (this.Label != null &&
                    this.Label.Equals(input.Label))
                ) && 
                (
                    this.LabelShort == input.LabelShort ||
                    (this.LabelShort != null &&
                    this.LabelShort.Equals(input.LabelShort))
                ) && 
                (
                    this.Geography == input.Geography ||
                    (this.Geography != null &&
                    this.Geography.Equals(input.Geography))
                ) && 
                (
                    this.Segmented == input.Segmented ||
                    (this.Segmented != null &&
                    this.Segmented.Equals(input.Segmented))
                ) && 
                (
                    this.Modified == input.Modified ||
                    (this.Modified != null &&
                    this.Modified.Equals(input.Modified))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.RouteType == input.RouteType ||
                    (this.RouteType != null &&
                    this.RouteType.Equals(input.RouteType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Label != null)
                    hashCode = hashCode * 59 + this.Label.GetHashCode();
                if (this.LabelShort != null)
                    hashCode = hashCode * 59 + this.LabelShort.GetHashCode();
                if (this.Geography != null)
                    hashCode = hashCode * 59 + this.Geography.GetHashCode();
                if (this.Segmented != null)
                    hashCode = hashCode * 59 + this.Segmented.GetHashCode();
                if (this.Modified != null)
                    hashCode = hashCode * 59 + this.Modified.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.RouteType != null)
                    hashCode = hashCode * 59 + this.RouteType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
