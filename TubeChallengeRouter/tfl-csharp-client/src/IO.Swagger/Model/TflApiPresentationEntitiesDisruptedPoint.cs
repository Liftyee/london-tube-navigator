/* 
 * Transport for London Unified API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TflApiPresentationEntitiesDisruptedPoint
    /// </summary>
    [DataContract]
    public partial class TflApiPresentationEntitiesDisruptedPoint :  IEquatable<TflApiPresentationEntitiesDisruptedPoint>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TflApiPresentationEntitiesDisruptedPoint" /> class.
        /// </summary>
        /// <param name="atcoCode">atcoCode.</param>
        /// <param name="fromDate">fromDate.</param>
        /// <param name="toDate">toDate.</param>
        /// <param name="description">description.</param>
        /// <param name="commonName">commonName.</param>
        /// <param name="type">type.</param>
        /// <param name="mode">mode.</param>
        /// <param name="stationAtcoCode">stationAtcoCode.</param>
        /// <param name="appearance">appearance.</param>
        /// <param name="additionalInformation">additionalInformation.</param>
        public TflApiPresentationEntitiesDisruptedPoint(string atcoCode = default(string), DateTime? fromDate = default(DateTime?), DateTime? toDate = default(DateTime?), string description = default(string), string commonName = default(string), string type = default(string), string mode = default(string), string stationAtcoCode = default(string), string appearance = default(string), string additionalInformation = default(string))
        {
            this.AtcoCode = atcoCode;
            this.FromDate = fromDate;
            this.ToDate = toDate;
            this.Description = description;
            this.CommonName = commonName;
            this.Type = type;
            this.Mode = mode;
            this.StationAtcoCode = stationAtcoCode;
            this.Appearance = appearance;
            this.AdditionalInformation = additionalInformation;
        }
        
        /// <summary>
        /// Gets or Sets AtcoCode
        /// </summary>
        [DataMember(Name="atcoCode", EmitDefaultValue=false)]
        public string AtcoCode { get; set; }

        /// <summary>
        /// Gets or Sets FromDate
        /// </summary>
        [DataMember(Name="fromDate", EmitDefaultValue=false)]
        public DateTime? FromDate { get; set; }

        /// <summary>
        /// Gets or Sets ToDate
        /// </summary>
        [DataMember(Name="toDate", EmitDefaultValue=false)]
        public DateTime? ToDate { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets CommonName
        /// </summary>
        [DataMember(Name="commonName", EmitDefaultValue=false)]
        public string CommonName { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Mode
        /// </summary>
        [DataMember(Name="mode", EmitDefaultValue=false)]
        public string Mode { get; set; }

        /// <summary>
        /// Gets or Sets StationAtcoCode
        /// </summary>
        [DataMember(Name="stationAtcoCode", EmitDefaultValue=false)]
        public string StationAtcoCode { get; set; }

        /// <summary>
        /// Gets or Sets Appearance
        /// </summary>
        [DataMember(Name="appearance", EmitDefaultValue=false)]
        public string Appearance { get; set; }

        /// <summary>
        /// Gets or Sets AdditionalInformation
        /// </summary>
        [DataMember(Name="additionalInformation", EmitDefaultValue=false)]
        public string AdditionalInformation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TflApiPresentationEntitiesDisruptedPoint {\n");
            sb.Append("  AtcoCode: ").Append(AtcoCode).Append("\n");
            sb.Append("  FromDate: ").Append(FromDate).Append("\n");
            sb.Append("  ToDate: ").Append(ToDate).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  CommonName: ").Append(CommonName).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  StationAtcoCode: ").Append(StationAtcoCode).Append("\n");
            sb.Append("  Appearance: ").Append(Appearance).Append("\n");
            sb.Append("  AdditionalInformation: ").Append(AdditionalInformation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TflApiPresentationEntitiesDisruptedPoint);
        }

        /// <summary>
        /// Returns true if TflApiPresentationEntitiesDisruptedPoint instances are equal
        /// </summary>
        /// <param name="input">Instance of TflApiPresentationEntitiesDisruptedPoint to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TflApiPresentationEntitiesDisruptedPoint input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AtcoCode == input.AtcoCode ||
                    (this.AtcoCode != null &&
                    this.AtcoCode.Equals(input.AtcoCode))
                ) && 
                (
                    this.FromDate == input.FromDate ||
                    (this.FromDate != null &&
                    this.FromDate.Equals(input.FromDate))
                ) && 
                (
                    this.ToDate == input.ToDate ||
                    (this.ToDate != null &&
                    this.ToDate.Equals(input.ToDate))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.CommonName == input.CommonName ||
                    (this.CommonName != null &&
                    this.CommonName.Equals(input.CommonName))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Mode == input.Mode ||
                    (this.Mode != null &&
                    this.Mode.Equals(input.Mode))
                ) && 
                (
                    this.StationAtcoCode == input.StationAtcoCode ||
                    (this.StationAtcoCode != null &&
                    this.StationAtcoCode.Equals(input.StationAtcoCode))
                ) && 
                (
                    this.Appearance == input.Appearance ||
                    (this.Appearance != null &&
                    this.Appearance.Equals(input.Appearance))
                ) && 
                (
                    this.AdditionalInformation == input.AdditionalInformation ||
                    (this.AdditionalInformation != null &&
                    this.AdditionalInformation.Equals(input.AdditionalInformation))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AtcoCode != null)
                    hashCode = hashCode * 59 + this.AtcoCode.GetHashCode();
                if (this.FromDate != null)
                    hashCode = hashCode * 59 + this.FromDate.GetHashCode();
                if (this.ToDate != null)
                    hashCode = hashCode * 59 + this.ToDate.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.CommonName != null)
                    hashCode = hashCode * 59 + this.CommonName.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Mode != null)
                    hashCode = hashCode * 59 + this.Mode.GetHashCode();
                if (this.StationAtcoCode != null)
                    hashCode = hashCode * 59 + this.StationAtcoCode.GetHashCode();
                if (this.Appearance != null)
                    hashCode = hashCode * 59 + this.Appearance.GetHashCode();
                if (this.AdditionalInformation != null)
                    hashCode = hashCode * 59 + this.AdditionalInformation.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
