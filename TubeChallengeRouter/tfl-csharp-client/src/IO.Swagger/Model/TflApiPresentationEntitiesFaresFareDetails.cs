/* 
 * Transport for London Unified API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TflApiPresentationEntitiesFaresFareDetails
    /// </summary>
    [DataContract]
    public partial class TflApiPresentationEntitiesFaresFareDetails :  IEquatable<TflApiPresentationEntitiesFaresFareDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TflApiPresentationEntitiesFaresFareDetails" /> class.
        /// </summary>
        /// <param name="boundsId">boundsId.</param>
        /// <param name="startDate">startDate.</param>
        /// <param name="endDate">endDate.</param>
        /// <param name="mode">mode.</param>
        /// <param name="passengerType">passengerType.</param>
        /// <param name="contactlessPaygOnlyFare">contactlessPAYGOnlyFare.</param>
        /// <param name="from">from.</param>
        /// <param name="to">to.</param>
        /// <param name="fromStation">fromStation.</param>
        /// <param name="toStation">toStation.</param>
        /// <param name="via">via.</param>
        /// <param name="routeCode">routeCode.</param>
        /// <param name="displayName">displayName.</param>
        /// <param name="displayOrder">displayOrder.</param>
        /// <param name="routeDescription">routeDescription.</param>
        /// <param name="validatorInformation">validatorInformation.</param>
        /// <param name="operator">_operator.</param>
        /// <param name="specialFare">specialFare.</param>
        /// <param name="throughFare">throughFare.</param>
        /// <param name="isTour">isTour.</param>
        /// <param name="ticketsAvailable">ticketsAvailable.</param>
        /// <param name="messages">messages.</param>
        public TflApiPresentationEntitiesFaresFareDetails(int? boundsId = default(int?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), string mode = default(string), string passengerType = default(string), bool? contactlessPaygOnlyFare = default(bool?), string from = default(string), string to = default(string), string fromStation = default(string), string toStation = default(string), string via = default(string), string routeCode = default(string), string displayName = default(string), int? displayOrder = default(int?), string routeDescription = default(string), string validatorInformation = default(string), string @operator = default(string), bool? specialFare = default(bool?), bool? throughFare = default(bool?), bool? isTour = default(bool?), List<TflApiPresentationEntitiesFaresTicket> ticketsAvailable = default(List<TflApiPresentationEntitiesFaresTicket>), List<TflApiPresentationEntitiesMessage> messages = default(List<TflApiPresentationEntitiesMessage>))
        {
            this.BoundsId = boundsId;
            this.StartDate = startDate;
            this.EndDate = endDate;
            this.Mode = mode;
            this.PassengerType = passengerType;
            this.ContactlessPaygOnlyFare = contactlessPaygOnlyFare;
            this.From = from;
            this.To = to;
            this.FromStation = fromStation;
            this.ToStation = toStation;
            this.Via = via;
            this.RouteCode = routeCode;
            this.DisplayName = displayName;
            this.DisplayOrder = displayOrder;
            this.RouteDescription = routeDescription;
            this.ValidatorInformation = validatorInformation;
            this.Operator = @operator;
            this.SpecialFare = specialFare;
            this.ThroughFare = throughFare;
            this.IsTour = isTour;
            this.TicketsAvailable = ticketsAvailable;
            this.Messages = messages;
        }
        
        /// <summary>
        /// Gets or Sets BoundsId
        /// </summary>
        [DataMember(Name="boundsId", EmitDefaultValue=false)]
        public int? BoundsId { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name="startDate", EmitDefaultValue=false)]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// Gets or Sets EndDate
        /// </summary>
        [DataMember(Name="endDate", EmitDefaultValue=false)]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// Gets or Sets Mode
        /// </summary>
        [DataMember(Name="mode", EmitDefaultValue=false)]
        public string Mode { get; set; }

        /// <summary>
        /// Gets or Sets PassengerType
        /// </summary>
        [DataMember(Name="passengerType", EmitDefaultValue=false)]
        public string PassengerType { get; set; }

        /// <summary>
        /// Gets or Sets ContactlessPAYGOnlyFare
        /// </summary>
        [DataMember(Name="contactlessPAYGOnlyFare", EmitDefaultValue=false)]
        public bool? ContactlessPaygOnlyFare { get; set; }

        /// <summary>
        /// Gets or Sets From
        /// </summary>
        [DataMember(Name="from", EmitDefaultValue=false)]
        public string From { get; set; }

        /// <summary>
        /// Gets or Sets To
        /// </summary>
        [DataMember(Name="to", EmitDefaultValue=false)]
        public string To { get; set; }

        /// <summary>
        /// Gets or Sets FromStation
        /// </summary>
        [DataMember(Name="fromStation", EmitDefaultValue=false)]
        public string FromStation { get; set; }

        /// <summary>
        /// Gets or Sets ToStation
        /// </summary>
        [DataMember(Name="toStation", EmitDefaultValue=false)]
        public string ToStation { get; set; }

        /// <summary>
        /// Gets or Sets Via
        /// </summary>
        [DataMember(Name="via", EmitDefaultValue=false)]
        public string Via { get; set; }

        /// <summary>
        /// Gets or Sets RouteCode
        /// </summary>
        [DataMember(Name="routeCode", EmitDefaultValue=false)]
        public string RouteCode { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name="displayName", EmitDefaultValue=false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets DisplayOrder
        /// </summary>
        [DataMember(Name="displayOrder", EmitDefaultValue=false)]
        public int? DisplayOrder { get; set; }

        /// <summary>
        /// Gets or Sets RouteDescription
        /// </summary>
        [DataMember(Name="routeDescription", EmitDefaultValue=false)]
        public string RouteDescription { get; set; }

        /// <summary>
        /// Gets or Sets ValidatorInformation
        /// </summary>
        [DataMember(Name="validatorInformation", EmitDefaultValue=false)]
        public string ValidatorInformation { get; set; }

        /// <summary>
        /// Gets or Sets Operator
        /// </summary>
        [DataMember(Name="operator", EmitDefaultValue=false)]
        public string Operator { get; set; }

        /// <summary>
        /// Gets or Sets SpecialFare
        /// </summary>
        [DataMember(Name="specialFare", EmitDefaultValue=false)]
        public bool? SpecialFare { get; set; }

        /// <summary>
        /// Gets or Sets ThroughFare
        /// </summary>
        [DataMember(Name="throughFare", EmitDefaultValue=false)]
        public bool? ThroughFare { get; set; }

        /// <summary>
        /// Gets or Sets IsTour
        /// </summary>
        [DataMember(Name="isTour", EmitDefaultValue=false)]
        public bool? IsTour { get; set; }

        /// <summary>
        /// Gets or Sets TicketsAvailable
        /// </summary>
        [DataMember(Name="ticketsAvailable", EmitDefaultValue=false)]
        public List<TflApiPresentationEntitiesFaresTicket> TicketsAvailable { get; set; }

        /// <summary>
        /// Gets or Sets Messages
        /// </summary>
        [DataMember(Name="messages", EmitDefaultValue=false)]
        public List<TflApiPresentationEntitiesMessage> Messages { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TflApiPresentationEntitiesFaresFareDetails {\n");
            sb.Append("  BoundsId: ").Append(BoundsId).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  PassengerType: ").Append(PassengerType).Append("\n");
            sb.Append("  ContactlessPAYGOnlyFare: ").Append(ContactlessPaygOnlyFare).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  FromStation: ").Append(FromStation).Append("\n");
            sb.Append("  ToStation: ").Append(ToStation).Append("\n");
            sb.Append("  Via: ").Append(Via).Append("\n");
            sb.Append("  RouteCode: ").Append(RouteCode).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  DisplayOrder: ").Append(DisplayOrder).Append("\n");
            sb.Append("  RouteDescription: ").Append(RouteDescription).Append("\n");
            sb.Append("  ValidatorInformation: ").Append(ValidatorInformation).Append("\n");
            sb.Append("  Operator: ").Append(Operator).Append("\n");
            sb.Append("  SpecialFare: ").Append(SpecialFare).Append("\n");
            sb.Append("  ThroughFare: ").Append(ThroughFare).Append("\n");
            sb.Append("  IsTour: ").Append(IsTour).Append("\n");
            sb.Append("  TicketsAvailable: ").Append(TicketsAvailable).Append("\n");
            sb.Append("  Messages: ").Append(Messages).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TflApiPresentationEntitiesFaresFareDetails);
        }

        /// <summary>
        /// Returns true if TflApiPresentationEntitiesFaresFareDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of TflApiPresentationEntitiesFaresFareDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TflApiPresentationEntitiesFaresFareDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BoundsId == input.BoundsId ||
                    (this.BoundsId != null &&
                    this.BoundsId.Equals(input.BoundsId))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.Mode == input.Mode ||
                    (this.Mode != null &&
                    this.Mode.Equals(input.Mode))
                ) && 
                (
                    this.PassengerType == input.PassengerType ||
                    (this.PassengerType != null &&
                    this.PassengerType.Equals(input.PassengerType))
                ) && 
                (
                    this.ContactlessPaygOnlyFare == input.ContactlessPaygOnlyFare ||
                    (this.ContactlessPaygOnlyFare != null &&
                    this.ContactlessPaygOnlyFare.Equals(input.ContactlessPaygOnlyFare))
                ) && 
                (
                    this.From == input.From ||
                    (this.From != null &&
                    this.From.Equals(input.From))
                ) && 
                (
                    this.To == input.To ||
                    (this.To != null &&
                    this.To.Equals(input.To))
                ) && 
                (
                    this.FromStation == input.FromStation ||
                    (this.FromStation != null &&
                    this.FromStation.Equals(input.FromStation))
                ) && 
                (
                    this.ToStation == input.ToStation ||
                    (this.ToStation != null &&
                    this.ToStation.Equals(input.ToStation))
                ) && 
                (
                    this.Via == input.Via ||
                    (this.Via != null &&
                    this.Via.Equals(input.Via))
                ) && 
                (
                    this.RouteCode == input.RouteCode ||
                    (this.RouteCode != null &&
                    this.RouteCode.Equals(input.RouteCode))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.DisplayOrder == input.DisplayOrder ||
                    (this.DisplayOrder != null &&
                    this.DisplayOrder.Equals(input.DisplayOrder))
                ) && 
                (
                    this.RouteDescription == input.RouteDescription ||
                    (this.RouteDescription != null &&
                    this.RouteDescription.Equals(input.RouteDescription))
                ) && 
                (
                    this.ValidatorInformation == input.ValidatorInformation ||
                    (this.ValidatorInformation != null &&
                    this.ValidatorInformation.Equals(input.ValidatorInformation))
                ) && 
                (
                    this.Operator == input.Operator ||
                    (this.Operator != null &&
                    this.Operator.Equals(input.Operator))
                ) && 
                (
                    this.SpecialFare == input.SpecialFare ||
                    (this.SpecialFare != null &&
                    this.SpecialFare.Equals(input.SpecialFare))
                ) && 
                (
                    this.ThroughFare == input.ThroughFare ||
                    (this.ThroughFare != null &&
                    this.ThroughFare.Equals(input.ThroughFare))
                ) && 
                (
                    this.IsTour == input.IsTour ||
                    (this.IsTour != null &&
                    this.IsTour.Equals(input.IsTour))
                ) && 
                (
                    this.TicketsAvailable == input.TicketsAvailable ||
                    this.TicketsAvailable != null &&
                    this.TicketsAvailable.SequenceEqual(input.TicketsAvailable)
                ) && 
                (
                    this.Messages == input.Messages ||
                    this.Messages != null &&
                    this.Messages.SequenceEqual(input.Messages)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BoundsId != null)
                    hashCode = hashCode * 59 + this.BoundsId.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                if (this.Mode != null)
                    hashCode = hashCode * 59 + this.Mode.GetHashCode();
                if (this.PassengerType != null)
                    hashCode = hashCode * 59 + this.PassengerType.GetHashCode();
                if (this.ContactlessPaygOnlyFare != null)
                    hashCode = hashCode * 59 + this.ContactlessPaygOnlyFare.GetHashCode();
                if (this.From != null)
                    hashCode = hashCode * 59 + this.From.GetHashCode();
                if (this.To != null)
                    hashCode = hashCode * 59 + this.To.GetHashCode();
                if (this.FromStation != null)
                    hashCode = hashCode * 59 + this.FromStation.GetHashCode();
                if (this.ToStation != null)
                    hashCode = hashCode * 59 + this.ToStation.GetHashCode();
                if (this.Via != null)
                    hashCode = hashCode * 59 + this.Via.GetHashCode();
                if (this.RouteCode != null)
                    hashCode = hashCode * 59 + this.RouteCode.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.DisplayOrder != null)
                    hashCode = hashCode * 59 + this.DisplayOrder.GetHashCode();
                if (this.RouteDescription != null)
                    hashCode = hashCode * 59 + this.RouteDescription.GetHashCode();
                if (this.ValidatorInformation != null)
                    hashCode = hashCode * 59 + this.ValidatorInformation.GetHashCode();
                if (this.Operator != null)
                    hashCode = hashCode * 59 + this.Operator.GetHashCode();
                if (this.SpecialFare != null)
                    hashCode = hashCode * 59 + this.SpecialFare.GetHashCode();
                if (this.ThroughFare != null)
                    hashCode = hashCode * 59 + this.ThroughFare.GetHashCode();
                if (this.IsTour != null)
                    hashCode = hashCode * 59 + this.IsTour.GetHashCode();
                if (this.TicketsAvailable != null)
                    hashCode = hashCode * 59 + this.TicketsAvailable.GetHashCode();
                if (this.Messages != null)
                    hashCode = hashCode * 59 + this.Messages.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
