/* 
 * Transport for London Unified API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TflApiPresentationEntitiesFaresFaresPeriod
    /// </summary>
    [DataContract]
    public partial class TflApiPresentationEntitiesFaresFaresPeriod :  IEquatable<TflApiPresentationEntitiesFaresFaresPeriod>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TflApiPresentationEntitiesFaresFaresPeriod" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="startDate">startDate.</param>
        /// <param name="viewableDate">viewableDate.</param>
        /// <param name="endDate">endDate.</param>
        /// <param name="isFuture">isFuture.</param>
        public TflApiPresentationEntitiesFaresFaresPeriod(int? id = default(int?), DateTime? startDate = default(DateTime?), DateTime? viewableDate = default(DateTime?), DateTime? endDate = default(DateTime?), bool? isFuture = default(bool?))
        {
            this.Id = id;
            this.StartDate = startDate;
            this.ViewableDate = viewableDate;
            this.EndDate = endDate;
            this.IsFuture = isFuture;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name="startDate", EmitDefaultValue=false)]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// Gets or Sets ViewableDate
        /// </summary>
        [DataMember(Name="viewableDate", EmitDefaultValue=false)]
        public DateTime? ViewableDate { get; set; }

        /// <summary>
        /// Gets or Sets EndDate
        /// </summary>
        [DataMember(Name="endDate", EmitDefaultValue=false)]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// Gets or Sets IsFuture
        /// </summary>
        [DataMember(Name="isFuture", EmitDefaultValue=false)]
        public bool? IsFuture { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TflApiPresentationEntitiesFaresFaresPeriod {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  ViewableDate: ").Append(ViewableDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  IsFuture: ").Append(IsFuture).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TflApiPresentationEntitiesFaresFaresPeriod);
        }

        /// <summary>
        /// Returns true if TflApiPresentationEntitiesFaresFaresPeriod instances are equal
        /// </summary>
        /// <param name="input">Instance of TflApiPresentationEntitiesFaresFaresPeriod to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TflApiPresentationEntitiesFaresFaresPeriod input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.ViewableDate == input.ViewableDate ||
                    (this.ViewableDate != null &&
                    this.ViewableDate.Equals(input.ViewableDate))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.IsFuture == input.IsFuture ||
                    (this.IsFuture != null &&
                    this.IsFuture.Equals(input.IsFuture))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.ViewableDate != null)
                    hashCode = hashCode * 59 + this.ViewableDate.GetHashCode();
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                if (this.IsFuture != null)
                    hashCode = hashCode * 59 + this.IsFuture.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
