/* 
 * Transport for London Unified API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TflApiPresentationEntitiesInstructionStep
    /// </summary>
    [DataContract]
    public partial class TflApiPresentationEntitiesInstructionStep :  IEquatable<TflApiPresentationEntitiesInstructionStep>, IValidatableObject
    {
        /// <summary>
        /// Defines SkyDirectionDescription
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SkyDirectionDescriptionEnum
        {
            
            /// <summary>
            /// Enum North for value: North
            /// </summary>
            [EnumMember(Value = "North")]
            North = 1,
            
            /// <summary>
            /// Enum NorthEast for value: NorthEast
            /// </summary>
            [EnumMember(Value = "NorthEast")]
            NorthEast = 2,
            
            /// <summary>
            /// Enum East for value: East
            /// </summary>
            [EnumMember(Value = "East")]
            East = 3,
            
            /// <summary>
            /// Enum SouthEast for value: SouthEast
            /// </summary>
            [EnumMember(Value = "SouthEast")]
            SouthEast = 4,
            
            /// <summary>
            /// Enum South for value: South
            /// </summary>
            [EnumMember(Value = "South")]
            South = 5,
            
            /// <summary>
            /// Enum SouthWest for value: SouthWest
            /// </summary>
            [EnumMember(Value = "SouthWest")]
            SouthWest = 6,
            
            /// <summary>
            /// Enum West for value: West
            /// </summary>
            [EnumMember(Value = "West")]
            West = 7,
            
            /// <summary>
            /// Enum NorthWest for value: NorthWest
            /// </summary>
            [EnumMember(Value = "NorthWest")]
            NorthWest = 8
        }

        /// <summary>
        /// Gets or Sets SkyDirectionDescription
        /// </summary>
        [DataMember(Name="skyDirectionDescription", EmitDefaultValue=false)]
        public SkyDirectionDescriptionEnum? SkyDirectionDescription { get; set; }
        /// <summary>
        /// Defines TrackType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TrackTypeEnum
        {
            
            /// <summary>
            /// Enum CycleSuperHighway for value: CycleSuperHighway
            /// </summary>
            [EnumMember(Value = "CycleSuperHighway")]
            CycleSuperHighway = 1,
            
            /// <summary>
            /// Enum CanalTowpath for value: CanalTowpath
            /// </summary>
            [EnumMember(Value = "CanalTowpath")]
            CanalTowpath = 2,
            
            /// <summary>
            /// Enum QuietRoad for value: QuietRoad
            /// </summary>
            [EnumMember(Value = "QuietRoad")]
            QuietRoad = 3,
            
            /// <summary>
            /// Enum ProvisionForCyclists for value: ProvisionForCyclists
            /// </summary>
            [EnumMember(Value = "ProvisionForCyclists")]
            ProvisionForCyclists = 4,
            
            /// <summary>
            /// Enum BusyRoads for value: BusyRoads
            /// </summary>
            [EnumMember(Value = "BusyRoads")]
            BusyRoads = 5,
            
            /// <summary>
            /// Enum None for value: None
            /// </summary>
            [EnumMember(Value = "None")]
            None = 6,
            
            /// <summary>
            /// Enum PushBike for value: PushBike
            /// </summary>
            [EnumMember(Value = "PushBike")]
            PushBike = 7,
            
            /// <summary>
            /// Enum Quietway for value: Quietway
            /// </summary>
            [EnumMember(Value = "Quietway")]
            Quietway = 8
        }

        /// <summary>
        /// Gets or Sets TrackType
        /// </summary>
        [DataMember(Name="trackType", EmitDefaultValue=false)]
        public TrackTypeEnum? TrackType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TflApiPresentationEntitiesInstructionStep" /> class.
        /// </summary>
        /// <param name="description">description.</param>
        /// <param name="turnDirection">turnDirection.</param>
        /// <param name="streetName">streetName.</param>
        /// <param name="distance">distance.</param>
        /// <param name="cumulativeDistance">cumulativeDistance.</param>
        /// <param name="skyDirection">skyDirection.</param>
        /// <param name="skyDirectionDescription">skyDirectionDescription.</param>
        /// <param name="cumulativeTravelTime">cumulativeTravelTime.</param>
        /// <param name="latitude">latitude.</param>
        /// <param name="longitude">longitude.</param>
        /// <param name="pathAttribute">pathAttribute.</param>
        /// <param name="descriptionHeading">descriptionHeading.</param>
        /// <param name="trackType">trackType.</param>
        public TflApiPresentationEntitiesInstructionStep(string description = default(string), string turnDirection = default(string), string streetName = default(string), int? distance = default(int?), int? cumulativeDistance = default(int?), int? skyDirection = default(int?), SkyDirectionDescriptionEnum? skyDirectionDescription = default(SkyDirectionDescriptionEnum?), int? cumulativeTravelTime = default(int?), double? latitude = default(double?), double? longitude = default(double?), TflApiPresentationEntitiesPathAttribute pathAttribute = default(TflApiPresentationEntitiesPathAttribute), string descriptionHeading = default(string), TrackTypeEnum? trackType = default(TrackTypeEnum?))
        {
            this.Description = description;
            this.TurnDirection = turnDirection;
            this.StreetName = streetName;
            this.Distance = distance;
            this.CumulativeDistance = cumulativeDistance;
            this.SkyDirection = skyDirection;
            this.SkyDirectionDescription = skyDirectionDescription;
            this.CumulativeTravelTime = cumulativeTravelTime;
            this.Latitude = latitude;
            this.Longitude = longitude;
            this.PathAttribute = pathAttribute;
            this.DescriptionHeading = descriptionHeading;
            this.TrackType = trackType;
        }
        
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets TurnDirection
        /// </summary>
        [DataMember(Name="turnDirection", EmitDefaultValue=false)]
        public string TurnDirection { get; set; }

        /// <summary>
        /// Gets or Sets StreetName
        /// </summary>
        [DataMember(Name="streetName", EmitDefaultValue=false)]
        public string StreetName { get; set; }

        /// <summary>
        /// Gets or Sets Distance
        /// </summary>
        [DataMember(Name="distance", EmitDefaultValue=false)]
        public int? Distance { get; set; }

        /// <summary>
        /// Gets or Sets CumulativeDistance
        /// </summary>
        [DataMember(Name="cumulativeDistance", EmitDefaultValue=false)]
        public int? CumulativeDistance { get; set; }

        /// <summary>
        /// Gets or Sets SkyDirection
        /// </summary>
        [DataMember(Name="skyDirection", EmitDefaultValue=false)]
        public int? SkyDirection { get; set; }


        /// <summary>
        /// Gets or Sets CumulativeTravelTime
        /// </summary>
        [DataMember(Name="cumulativeTravelTime", EmitDefaultValue=false)]
        public int? CumulativeTravelTime { get; set; }

        /// <summary>
        /// Gets or Sets Latitude
        /// </summary>
        [DataMember(Name="latitude", EmitDefaultValue=false)]
        public double? Latitude { get; set; }

        /// <summary>
        /// Gets or Sets Longitude
        /// </summary>
        [DataMember(Name="longitude", EmitDefaultValue=false)]
        public double? Longitude { get; set; }

        /// <summary>
        /// Gets or Sets PathAttribute
        /// </summary>
        [DataMember(Name="pathAttribute", EmitDefaultValue=false)]
        public TflApiPresentationEntitiesPathAttribute PathAttribute { get; set; }

        /// <summary>
        /// Gets or Sets DescriptionHeading
        /// </summary>
        [DataMember(Name="descriptionHeading", EmitDefaultValue=false)]
        public string DescriptionHeading { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TflApiPresentationEntitiesInstructionStep {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  TurnDirection: ").Append(TurnDirection).Append("\n");
            sb.Append("  StreetName: ").Append(StreetName).Append("\n");
            sb.Append("  Distance: ").Append(Distance).Append("\n");
            sb.Append("  CumulativeDistance: ").Append(CumulativeDistance).Append("\n");
            sb.Append("  SkyDirection: ").Append(SkyDirection).Append("\n");
            sb.Append("  SkyDirectionDescription: ").Append(SkyDirectionDescription).Append("\n");
            sb.Append("  CumulativeTravelTime: ").Append(CumulativeTravelTime).Append("\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            sb.Append("  PathAttribute: ").Append(PathAttribute).Append("\n");
            sb.Append("  DescriptionHeading: ").Append(DescriptionHeading).Append("\n");
            sb.Append("  TrackType: ").Append(TrackType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TflApiPresentationEntitiesInstructionStep);
        }

        /// <summary>
        /// Returns true if TflApiPresentationEntitiesInstructionStep instances are equal
        /// </summary>
        /// <param name="input">Instance of TflApiPresentationEntitiesInstructionStep to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TflApiPresentationEntitiesInstructionStep input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.TurnDirection == input.TurnDirection ||
                    (this.TurnDirection != null &&
                    this.TurnDirection.Equals(input.TurnDirection))
                ) && 
                (
                    this.StreetName == input.StreetName ||
                    (this.StreetName != null &&
                    this.StreetName.Equals(input.StreetName))
                ) && 
                (
                    this.Distance == input.Distance ||
                    (this.Distance != null &&
                    this.Distance.Equals(input.Distance))
                ) && 
                (
                    this.CumulativeDistance == input.CumulativeDistance ||
                    (this.CumulativeDistance != null &&
                    this.CumulativeDistance.Equals(input.CumulativeDistance))
                ) && 
                (
                    this.SkyDirection == input.SkyDirection ||
                    (this.SkyDirection != null &&
                    this.SkyDirection.Equals(input.SkyDirection))
                ) && 
                (
                    this.SkyDirectionDescription == input.SkyDirectionDescription ||
                    (this.SkyDirectionDescription != null &&
                    this.SkyDirectionDescription.Equals(input.SkyDirectionDescription))
                ) && 
                (
                    this.CumulativeTravelTime == input.CumulativeTravelTime ||
                    (this.CumulativeTravelTime != null &&
                    this.CumulativeTravelTime.Equals(input.CumulativeTravelTime))
                ) && 
                (
                    this.Latitude == input.Latitude ||
                    (this.Latitude != null &&
                    this.Latitude.Equals(input.Latitude))
                ) && 
                (
                    this.Longitude == input.Longitude ||
                    (this.Longitude != null &&
                    this.Longitude.Equals(input.Longitude))
                ) && 
                (
                    this.PathAttribute == input.PathAttribute ||
                    (this.PathAttribute != null &&
                    this.PathAttribute.Equals(input.PathAttribute))
                ) && 
                (
                    this.DescriptionHeading == input.DescriptionHeading ||
                    (this.DescriptionHeading != null &&
                    this.DescriptionHeading.Equals(input.DescriptionHeading))
                ) && 
                (
                    this.TrackType == input.TrackType ||
                    (this.TrackType != null &&
                    this.TrackType.Equals(input.TrackType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.TurnDirection != null)
                    hashCode = hashCode * 59 + this.TurnDirection.GetHashCode();
                if (this.StreetName != null)
                    hashCode = hashCode * 59 + this.StreetName.GetHashCode();
                if (this.Distance != null)
                    hashCode = hashCode * 59 + this.Distance.GetHashCode();
                if (this.CumulativeDistance != null)
                    hashCode = hashCode * 59 + this.CumulativeDistance.GetHashCode();
                if (this.SkyDirection != null)
                    hashCode = hashCode * 59 + this.SkyDirection.GetHashCode();
                if (this.SkyDirectionDescription != null)
                    hashCode = hashCode * 59 + this.SkyDirectionDescription.GetHashCode();
                if (this.CumulativeTravelTime != null)
                    hashCode = hashCode * 59 + this.CumulativeTravelTime.GetHashCode();
                if (this.Latitude != null)
                    hashCode = hashCode * 59 + this.Latitude.GetHashCode();
                if (this.Longitude != null)
                    hashCode = hashCode * 59 + this.Longitude.GetHashCode();
                if (this.PathAttribute != null)
                    hashCode = hashCode * 59 + this.PathAttribute.GetHashCode();
                if (this.DescriptionHeading != null)
                    hashCode = hashCode * 59 + this.DescriptionHeading.GetHashCode();
                if (this.TrackType != null)
                    hashCode = hashCode * 59 + this.TrackType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
