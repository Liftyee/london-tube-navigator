/* 
 * Transport for London Unified API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TflApiPresentationEntitiesJourneyPlannerFare
    /// </summary>
    [DataContract]
    public partial class TflApiPresentationEntitiesJourneyPlannerFare :  IEquatable<TflApiPresentationEntitiesJourneyPlannerFare>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TflApiPresentationEntitiesJourneyPlannerFare" /> class.
        /// </summary>
        /// <param name="lowZone">lowZone.</param>
        /// <param name="highZone">highZone.</param>
        /// <param name="cost">cost.</param>
        /// <param name="chargeProfileName">chargeProfileName.</param>
        /// <param name="isHopperFare">isHopperFare.</param>
        /// <param name="chargeLevel">chargeLevel.</param>
        /// <param name="peak">peak.</param>
        /// <param name="offPeak">offPeak.</param>
        /// <param name="taps">taps.</param>
        public TflApiPresentationEntitiesJourneyPlannerFare(int? lowZone = default(int?), int? highZone = default(int?), int? cost = default(int?), string chargeProfileName = default(string), bool? isHopperFare = default(bool?), string chargeLevel = default(string), int? peak = default(int?), int? offPeak = default(int?), List<TflApiPresentationEntitiesJourneyPlannerFareTap> taps = default(List<TflApiPresentationEntitiesJourneyPlannerFareTap>))
        {
            this.LowZone = lowZone;
            this.HighZone = highZone;
            this.Cost = cost;
            this.ChargeProfileName = chargeProfileName;
            this.IsHopperFare = isHopperFare;
            this.ChargeLevel = chargeLevel;
            this.Peak = peak;
            this.OffPeak = offPeak;
            this.Taps = taps;
        }
        
        /// <summary>
        /// Gets or Sets LowZone
        /// </summary>
        [DataMember(Name="lowZone", EmitDefaultValue=false)]
        public int? LowZone { get; set; }

        /// <summary>
        /// Gets or Sets HighZone
        /// </summary>
        [DataMember(Name="highZone", EmitDefaultValue=false)]
        public int? HighZone { get; set; }

        /// <summary>
        /// Gets or Sets Cost
        /// </summary>
        [DataMember(Name="cost", EmitDefaultValue=false)]
        public int? Cost { get; set; }

        /// <summary>
        /// Gets or Sets ChargeProfileName
        /// </summary>
        [DataMember(Name="chargeProfileName", EmitDefaultValue=false)]
        public string ChargeProfileName { get; set; }

        /// <summary>
        /// Gets or Sets IsHopperFare
        /// </summary>
        [DataMember(Name="isHopperFare", EmitDefaultValue=false)]
        public bool? IsHopperFare { get; set; }

        /// <summary>
        /// Gets or Sets ChargeLevel
        /// </summary>
        [DataMember(Name="chargeLevel", EmitDefaultValue=false)]
        public string ChargeLevel { get; set; }

        /// <summary>
        /// Gets or Sets Peak
        /// </summary>
        [DataMember(Name="peak", EmitDefaultValue=false)]
        public int? Peak { get; set; }

        /// <summary>
        /// Gets or Sets OffPeak
        /// </summary>
        [DataMember(Name="offPeak", EmitDefaultValue=false)]
        public int? OffPeak { get; set; }

        /// <summary>
        /// Gets or Sets Taps
        /// </summary>
        [DataMember(Name="taps", EmitDefaultValue=false)]
        public List<TflApiPresentationEntitiesJourneyPlannerFareTap> Taps { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TflApiPresentationEntitiesJourneyPlannerFare {\n");
            sb.Append("  LowZone: ").Append(LowZone).Append("\n");
            sb.Append("  HighZone: ").Append(HighZone).Append("\n");
            sb.Append("  Cost: ").Append(Cost).Append("\n");
            sb.Append("  ChargeProfileName: ").Append(ChargeProfileName).Append("\n");
            sb.Append("  IsHopperFare: ").Append(IsHopperFare).Append("\n");
            sb.Append("  ChargeLevel: ").Append(ChargeLevel).Append("\n");
            sb.Append("  Peak: ").Append(Peak).Append("\n");
            sb.Append("  OffPeak: ").Append(OffPeak).Append("\n");
            sb.Append("  Taps: ").Append(Taps).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TflApiPresentationEntitiesJourneyPlannerFare);
        }

        /// <summary>
        /// Returns true if TflApiPresentationEntitiesJourneyPlannerFare instances are equal
        /// </summary>
        /// <param name="input">Instance of TflApiPresentationEntitiesJourneyPlannerFare to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TflApiPresentationEntitiesJourneyPlannerFare input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LowZone == input.LowZone ||
                    (this.LowZone != null &&
                    this.LowZone.Equals(input.LowZone))
                ) && 
                (
                    this.HighZone == input.HighZone ||
                    (this.HighZone != null &&
                    this.HighZone.Equals(input.HighZone))
                ) && 
                (
                    this.Cost == input.Cost ||
                    (this.Cost != null &&
                    this.Cost.Equals(input.Cost))
                ) && 
                (
                    this.ChargeProfileName == input.ChargeProfileName ||
                    (this.ChargeProfileName != null &&
                    this.ChargeProfileName.Equals(input.ChargeProfileName))
                ) && 
                (
                    this.IsHopperFare == input.IsHopperFare ||
                    (this.IsHopperFare != null &&
                    this.IsHopperFare.Equals(input.IsHopperFare))
                ) && 
                (
                    this.ChargeLevel == input.ChargeLevel ||
                    (this.ChargeLevel != null &&
                    this.ChargeLevel.Equals(input.ChargeLevel))
                ) && 
                (
                    this.Peak == input.Peak ||
                    (this.Peak != null &&
                    this.Peak.Equals(input.Peak))
                ) && 
                (
                    this.OffPeak == input.OffPeak ||
                    (this.OffPeak != null &&
                    this.OffPeak.Equals(input.OffPeak))
                ) && 
                (
                    this.Taps == input.Taps ||
                    this.Taps != null &&
                    this.Taps.SequenceEqual(input.Taps)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LowZone != null)
                    hashCode = hashCode * 59 + this.LowZone.GetHashCode();
                if (this.HighZone != null)
                    hashCode = hashCode * 59 + this.HighZone.GetHashCode();
                if (this.Cost != null)
                    hashCode = hashCode * 59 + this.Cost.GetHashCode();
                if (this.ChargeProfileName != null)
                    hashCode = hashCode * 59 + this.ChargeProfileName.GetHashCode();
                if (this.IsHopperFare != null)
                    hashCode = hashCode * 59 + this.IsHopperFare.GetHashCode();
                if (this.ChargeLevel != null)
                    hashCode = hashCode * 59 + this.ChargeLevel.GetHashCode();
                if (this.Peak != null)
                    hashCode = hashCode * 59 + this.Peak.GetHashCode();
                if (this.OffPeak != null)
                    hashCode = hashCode * 59 + this.OffPeak.GetHashCode();
                if (this.Taps != null)
                    hashCode = hashCode * 59 + this.Taps.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
