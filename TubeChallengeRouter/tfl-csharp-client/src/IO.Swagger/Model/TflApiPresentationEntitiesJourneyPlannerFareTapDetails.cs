/* 
 * Transport for London Unified API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TflApiPresentationEntitiesJourneyPlannerFareTapDetails
    /// </summary>
    [DataContract]
    public partial class TflApiPresentationEntitiesJourneyPlannerFareTapDetails :  IEquatable<TflApiPresentationEntitiesJourneyPlannerFareTapDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TflApiPresentationEntitiesJourneyPlannerFareTapDetails" /> class.
        /// </summary>
        /// <param name="modeType">modeType.</param>
        /// <param name="validationType">validationType.</param>
        /// <param name="hostDeviceType">hostDeviceType.</param>
        /// <param name="busRouteId">busRouteId.</param>
        /// <param name="nationalLocationCode">nationalLocationCode.</param>
        /// <param name="tapTimestamp">tapTimestamp.</param>
        public TflApiPresentationEntitiesJourneyPlannerFareTapDetails(string modeType = default(string), string validationType = default(string), string hostDeviceType = default(string), string busRouteId = default(string), int? nationalLocationCode = default(int?), DateTime? tapTimestamp = default(DateTime?))
        {
            this.ModeType = modeType;
            this.ValidationType = validationType;
            this.HostDeviceType = hostDeviceType;
            this.BusRouteId = busRouteId;
            this.NationalLocationCode = nationalLocationCode;
            this.TapTimestamp = tapTimestamp;
        }
        
        /// <summary>
        /// Gets or Sets ModeType
        /// </summary>
        [DataMember(Name="modeType", EmitDefaultValue=false)]
        public string ModeType { get; set; }

        /// <summary>
        /// Gets or Sets ValidationType
        /// </summary>
        [DataMember(Name="validationType", EmitDefaultValue=false)]
        public string ValidationType { get; set; }

        /// <summary>
        /// Gets or Sets HostDeviceType
        /// </summary>
        [DataMember(Name="hostDeviceType", EmitDefaultValue=false)]
        public string HostDeviceType { get; set; }

        /// <summary>
        /// Gets or Sets BusRouteId
        /// </summary>
        [DataMember(Name="busRouteId", EmitDefaultValue=false)]
        public string BusRouteId { get; set; }

        /// <summary>
        /// Gets or Sets NationalLocationCode
        /// </summary>
        [DataMember(Name="nationalLocationCode", EmitDefaultValue=false)]
        public int? NationalLocationCode { get; set; }

        /// <summary>
        /// Gets or Sets TapTimestamp
        /// </summary>
        [DataMember(Name="tapTimestamp", EmitDefaultValue=false)]
        public DateTime? TapTimestamp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TflApiPresentationEntitiesJourneyPlannerFareTapDetails {\n");
            sb.Append("  ModeType: ").Append(ModeType).Append("\n");
            sb.Append("  ValidationType: ").Append(ValidationType).Append("\n");
            sb.Append("  HostDeviceType: ").Append(HostDeviceType).Append("\n");
            sb.Append("  BusRouteId: ").Append(BusRouteId).Append("\n");
            sb.Append("  NationalLocationCode: ").Append(NationalLocationCode).Append("\n");
            sb.Append("  TapTimestamp: ").Append(TapTimestamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TflApiPresentationEntitiesJourneyPlannerFareTapDetails);
        }

        /// <summary>
        /// Returns true if TflApiPresentationEntitiesJourneyPlannerFareTapDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of TflApiPresentationEntitiesJourneyPlannerFareTapDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TflApiPresentationEntitiesJourneyPlannerFareTapDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ModeType == input.ModeType ||
                    (this.ModeType != null &&
                    this.ModeType.Equals(input.ModeType))
                ) && 
                (
                    this.ValidationType == input.ValidationType ||
                    (this.ValidationType != null &&
                    this.ValidationType.Equals(input.ValidationType))
                ) && 
                (
                    this.HostDeviceType == input.HostDeviceType ||
                    (this.HostDeviceType != null &&
                    this.HostDeviceType.Equals(input.HostDeviceType))
                ) && 
                (
                    this.BusRouteId == input.BusRouteId ||
                    (this.BusRouteId != null &&
                    this.BusRouteId.Equals(input.BusRouteId))
                ) && 
                (
                    this.NationalLocationCode == input.NationalLocationCode ||
                    (this.NationalLocationCode != null &&
                    this.NationalLocationCode.Equals(input.NationalLocationCode))
                ) && 
                (
                    this.TapTimestamp == input.TapTimestamp ||
                    (this.TapTimestamp != null &&
                    this.TapTimestamp.Equals(input.TapTimestamp))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ModeType != null)
                    hashCode = hashCode * 59 + this.ModeType.GetHashCode();
                if (this.ValidationType != null)
                    hashCode = hashCode * 59 + this.ValidationType.GetHashCode();
                if (this.HostDeviceType != null)
                    hashCode = hashCode * 59 + this.HostDeviceType.GetHashCode();
                if (this.BusRouteId != null)
                    hashCode = hashCode * 59 + this.BusRouteId.GetHashCode();
                if (this.NationalLocationCode != null)
                    hashCode = hashCode * 59 + this.NationalLocationCode.GetHashCode();
                if (this.TapTimestamp != null)
                    hashCode = hashCode * 59 + this.TapTimestamp.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
