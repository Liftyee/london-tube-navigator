/* 
 * Transport for London Unified API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TflApiPresentationEntitiesLineRouteSection
    /// </summary>
    [DataContract]
    public partial class TflApiPresentationEntitiesLineRouteSection :  IEquatable<TflApiPresentationEntitiesLineRouteSection>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TflApiPresentationEntitiesLineRouteSection" /> class.
        /// </summary>
        /// <param name="routeId">routeId.</param>
        /// <param name="direction">direction.</param>
        /// <param name="destination">destination.</param>
        /// <param name="fromStation">fromStation.</param>
        /// <param name="toStation">toStation.</param>
        /// <param name="serviceType">serviceType.</param>
        /// <param name="vehicleDestinationText">vehicleDestinationText.</param>
        public TflApiPresentationEntitiesLineRouteSection(int? routeId = default(int?), string direction = default(string), string destination = default(string), string fromStation = default(string), string toStation = default(string), string serviceType = default(string), string vehicleDestinationText = default(string))
        {
            this.RouteId = routeId;
            this.Direction = direction;
            this.Destination = destination;
            this.FromStation = fromStation;
            this.ToStation = toStation;
            this.ServiceType = serviceType;
            this.VehicleDestinationText = vehicleDestinationText;
        }
        
        /// <summary>
        /// Gets or Sets RouteId
        /// </summary>
        [DataMember(Name="routeId", EmitDefaultValue=false)]
        public int? RouteId { get; set; }

        /// <summary>
        /// Gets or Sets Direction
        /// </summary>
        [DataMember(Name="direction", EmitDefaultValue=false)]
        public string Direction { get; set; }

        /// <summary>
        /// Gets or Sets Destination
        /// </summary>
        [DataMember(Name="destination", EmitDefaultValue=false)]
        public string Destination { get; set; }

        /// <summary>
        /// Gets or Sets FromStation
        /// </summary>
        [DataMember(Name="fromStation", EmitDefaultValue=false)]
        public string FromStation { get; set; }

        /// <summary>
        /// Gets or Sets ToStation
        /// </summary>
        [DataMember(Name="toStation", EmitDefaultValue=false)]
        public string ToStation { get; set; }

        /// <summary>
        /// Gets or Sets ServiceType
        /// </summary>
        [DataMember(Name="serviceType", EmitDefaultValue=false)]
        public string ServiceType { get; set; }

        /// <summary>
        /// Gets or Sets VehicleDestinationText
        /// </summary>
        [DataMember(Name="vehicleDestinationText", EmitDefaultValue=false)]
        public string VehicleDestinationText { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TflApiPresentationEntitiesLineRouteSection {\n");
            sb.Append("  RouteId: ").Append(RouteId).Append("\n");
            sb.Append("  Direction: ").Append(Direction).Append("\n");
            sb.Append("  Destination: ").Append(Destination).Append("\n");
            sb.Append("  FromStation: ").Append(FromStation).Append("\n");
            sb.Append("  ToStation: ").Append(ToStation).Append("\n");
            sb.Append("  ServiceType: ").Append(ServiceType).Append("\n");
            sb.Append("  VehicleDestinationText: ").Append(VehicleDestinationText).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TflApiPresentationEntitiesLineRouteSection);
        }

        /// <summary>
        /// Returns true if TflApiPresentationEntitiesLineRouteSection instances are equal
        /// </summary>
        /// <param name="input">Instance of TflApiPresentationEntitiesLineRouteSection to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TflApiPresentationEntitiesLineRouteSection input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RouteId == input.RouteId ||
                    (this.RouteId != null &&
                    this.RouteId.Equals(input.RouteId))
                ) && 
                (
                    this.Direction == input.Direction ||
                    (this.Direction != null &&
                    this.Direction.Equals(input.Direction))
                ) && 
                (
                    this.Destination == input.Destination ||
                    (this.Destination != null &&
                    this.Destination.Equals(input.Destination))
                ) && 
                (
                    this.FromStation == input.FromStation ||
                    (this.FromStation != null &&
                    this.FromStation.Equals(input.FromStation))
                ) && 
                (
                    this.ToStation == input.ToStation ||
                    (this.ToStation != null &&
                    this.ToStation.Equals(input.ToStation))
                ) && 
                (
                    this.ServiceType == input.ServiceType ||
                    (this.ServiceType != null &&
                    this.ServiceType.Equals(input.ServiceType))
                ) && 
                (
                    this.VehicleDestinationText == input.VehicleDestinationText ||
                    (this.VehicleDestinationText != null &&
                    this.VehicleDestinationText.Equals(input.VehicleDestinationText))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RouteId != null)
                    hashCode = hashCode * 59 + this.RouteId.GetHashCode();
                if (this.Direction != null)
                    hashCode = hashCode * 59 + this.Direction.GetHashCode();
                if (this.Destination != null)
                    hashCode = hashCode * 59 + this.Destination.GetHashCode();
                if (this.FromStation != null)
                    hashCode = hashCode * 59 + this.FromStation.GetHashCode();
                if (this.ToStation != null)
                    hashCode = hashCode * 59 + this.ToStation.GetHashCode();
                if (this.ServiceType != null)
                    hashCode = hashCode * 59 + this.ServiceType.GetHashCode();
                if (this.VehicleDestinationText != null)
                    hashCode = hashCode * 59 + this.VehicleDestinationText.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
