/* 
 * Transport for London Unified API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System.Text;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Description of a Route used in Route search results.
    /// </summary>
    [DataContract]
    public partial class TflApiPresentationEntitiesMatchedRoute :  IEquatable<TflApiPresentationEntitiesMatchedRoute>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TflApiPresentationEntitiesMatchedRoute" /> class.
        /// </summary>
        /// <param name="routeCode">The route code.</param>
        /// <param name="name">Name such as \&quot;72\&quot;.</param>
        /// <param name="direction">Inbound or Outbound.</param>
        /// <param name="originationName">The name of the Origin StopPoint.</param>
        /// <param name="destinationName">The name of the Destination StopPoint.</param>
        /// <param name="originator">The Id (NaPTAN code) of the Origin StopPoint.</param>
        /// <param name="destination">The Id (NaPTAN code) or the Destination StopPoint.</param>
        /// <param name="serviceType">Regular or Night.</param>
        /// <param name="validTo">The DateTime that the Service containing this Route is valid until..</param>
        /// <param name="validFrom">The DateTime that the Service containing this Route is valid from..</param>
        public TflApiPresentationEntitiesMatchedRoute(string routeCode = default(string), string name = default(string), string direction = default(string), string originationName = default(string), string destinationName = default(string), string originator = default(string), string destination = default(string), string serviceType = default(string), DateTime? validTo = default(DateTime?), DateTime? validFrom = default(DateTime?))
        {
            this.RouteCode = routeCode;
            this.Name = name;
            this.Direction = direction;
            this.OriginationName = originationName;
            this.DestinationName = destinationName;
            this.Originator = originator;
            this.Destination = destination;
            this.ServiceType = serviceType;
            this.ValidTo = validTo;
            this.ValidFrom = validFrom;
        }
        
        /// <summary>
        /// The route code
        /// </summary>
        /// <value>The route code</value>
        [DataMember(Name="routeCode", EmitDefaultValue=false)]
        public string RouteCode { get; set; }

        /// <summary>
        /// Name such as \&quot;72\&quot;
        /// </summary>
        /// <value>Name such as \&quot;72\&quot;</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Inbound or Outbound
        /// </summary>
        /// <value>Inbound or Outbound</value>
        [DataMember(Name="direction", EmitDefaultValue=false)]
        public string Direction { get; set; }

        /// <summary>
        /// The name of the Origin StopPoint
        /// </summary>
        /// <value>The name of the Origin StopPoint</value>
        [DataMember(Name="originationName", EmitDefaultValue=false)]
        public string OriginationName { get; set; }

        /// <summary>
        /// The name of the Destination StopPoint
        /// </summary>
        /// <value>The name of the Destination StopPoint</value>
        [DataMember(Name="destinationName", EmitDefaultValue=false)]
        public string DestinationName { get; set; }

        /// <summary>
        /// The Id (NaPTAN code) of the Origin StopPoint
        /// </summary>
        /// <value>The Id (NaPTAN code) of the Origin StopPoint</value>
        [DataMember(Name="originator", EmitDefaultValue=false)]
        public string Originator { get; set; }

        /// <summary>
        /// The Id (NaPTAN code) or the Destination StopPoint
        /// </summary>
        /// <value>The Id (NaPTAN code) or the Destination StopPoint</value>
        [DataMember(Name="destination", EmitDefaultValue=false)]
        public string Destination { get; set; }

        /// <summary>
        /// Regular or Night
        /// </summary>
        /// <value>Regular or Night</value>
        [DataMember(Name="serviceType", EmitDefaultValue=false)]
        public string ServiceType { get; set; }

        /// <summary>
        /// The DateTime that the Service containing this Route is valid until.
        /// </summary>
        /// <value>The DateTime that the Service containing this Route is valid until.</value>
        [DataMember(Name="validTo", EmitDefaultValue=false)]
        public DateTime? ValidTo { get; set; }

        /// <summary>
        /// The DateTime that the Service containing this Route is valid from.
        /// </summary>
        /// <value>The DateTime that the Service containing this Route is valid from.</value>
        [DataMember(Name="validFrom", EmitDefaultValue=false)]
        public DateTime? ValidFrom { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TflApiPresentationEntitiesMatchedRoute {\n");
            sb.Append("  RouteCode: ").Append(RouteCode).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Direction: ").Append(Direction).Append("\n");
            sb.Append("  OriginationName: ").Append(OriginationName).Append("\n");
            sb.Append("  DestinationName: ").Append(DestinationName).Append("\n");
            sb.Append("  Originator: ").Append(Originator).Append("\n");
            sb.Append("  Destination: ").Append(Destination).Append("\n");
            sb.Append("  ServiceType: ").Append(ServiceType).Append("\n");
            sb.Append("  ValidTo: ").Append(ValidTo).Append("\n");
            sb.Append("  ValidFrom: ").Append(ValidFrom).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TflApiPresentationEntitiesMatchedRoute);
        }

        /// <summary>
        /// Returns true if TflApiPresentationEntitiesMatchedRoute instances are equal
        /// </summary>
        /// <param name="input">Instance of TflApiPresentationEntitiesMatchedRoute to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TflApiPresentationEntitiesMatchedRoute input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RouteCode == input.RouteCode ||
                    (this.RouteCode != null &&
                    this.RouteCode.Equals(input.RouteCode))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Direction == input.Direction ||
                    (this.Direction != null &&
                    this.Direction.Equals(input.Direction))
                ) && 
                (
                    this.OriginationName == input.OriginationName ||
                    (this.OriginationName != null &&
                    this.OriginationName.Equals(input.OriginationName))
                ) && 
                (
                    this.DestinationName == input.DestinationName ||
                    (this.DestinationName != null &&
                    this.DestinationName.Equals(input.DestinationName))
                ) && 
                (
                    this.Originator == input.Originator ||
                    (this.Originator != null &&
                    this.Originator.Equals(input.Originator))
                ) && 
                (
                    this.Destination == input.Destination ||
                    (this.Destination != null &&
                    this.Destination.Equals(input.Destination))
                ) && 
                (
                    this.ServiceType == input.ServiceType ||
                    (this.ServiceType != null &&
                    this.ServiceType.Equals(input.ServiceType))
                ) && 
                (
                    this.ValidTo == input.ValidTo ||
                    (this.ValidTo != null &&
                    this.ValidTo.Equals(input.ValidTo))
                ) && 
                (
                    this.ValidFrom == input.ValidFrom ||
                    (this.ValidFrom != null &&
                    this.ValidFrom.Equals(input.ValidFrom))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RouteCode != null)
                    hashCode = hashCode * 59 + this.RouteCode.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Direction != null)
                    hashCode = hashCode * 59 + this.Direction.GetHashCode();
                if (this.OriginationName != null)
                    hashCode = hashCode * 59 + this.OriginationName.GetHashCode();
                if (this.DestinationName != null)
                    hashCode = hashCode * 59 + this.DestinationName.GetHashCode();
                if (this.Originator != null)
                    hashCode = hashCode * 59 + this.Originator.GetHashCode();
                if (this.Destination != null)
                    hashCode = hashCode * 59 + this.Destination.GetHashCode();
                if (this.ServiceType != null)
                    hashCode = hashCode * 59 + this.ServiceType.GetHashCode();
                if (this.ValidTo != null)
                    hashCode = hashCode * 59 + this.ValidTo.GetHashCode();
                if (this.ValidFrom != null)
                    hashCode = hashCode * 59 + this.ValidFrom.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
