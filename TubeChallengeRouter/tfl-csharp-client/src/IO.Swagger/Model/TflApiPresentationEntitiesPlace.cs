/* 
 * Transport for London Unified API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TflApiPresentationEntitiesPlace
    /// </summary>
    [DataContract]
    public partial class TflApiPresentationEntitiesPlace :  IEquatable<TflApiPresentationEntitiesPlace>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TflApiPresentationEntitiesPlace" /> class.
        /// </summary>
        /// <param name="id">A unique identifier..</param>
        /// <param name="url">The unique location of this resource..</param>
        /// <param name="commonName">A human readable name..</param>
        /// <param name="distance">The distance of the place from its search point, if this is the result              of a geographical search, otherwise zero..</param>
        /// <param name="placeType">The type of Place. See /Place/Meta/placeTypes for possible values..</param>
        /// <param name="additionalProperties">A bag of additional key/value pairs with extra information about this place..</param>
        /// <param name="children">children.</param>
        /// <param name="childrenUrls">childrenUrls.</param>
        /// <param name="lat">WGS84 latitude of the location..</param>
        /// <param name="lon">WGS84 longitude of the location..</param>
        public TflApiPresentationEntitiesPlace(string id = default(string), string url = default(string), string commonName = default(string), double? distance = default(double?), string placeType = default(string), List<TflApiPresentationEntitiesAdditionalProperties> additionalProperties = default(List<TflApiPresentationEntitiesAdditionalProperties>), List<TflApiPresentationEntitiesPlace> children = default(List<TflApiPresentationEntitiesPlace>), List<string> childrenUrls = default(List<string>), double? lat = default(double?), double? lon = default(double?))
        {
            this.Id = id;
            this.Url = url;
            this.CommonName = commonName;
            this.Distance = distance;
            this.PlaceType = placeType;
            this.AdditionalProperties = additionalProperties;
            this.Children = children;
            this.ChildrenUrls = childrenUrls;
            this.Lat = lat;
            this.Lon = lon;
        }
        
        /// <summary>
        /// A unique identifier.
        /// </summary>
        /// <value>A unique identifier.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The unique location of this resource.
        /// </summary>
        /// <value>The unique location of this resource.</value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// A human readable name.
        /// </summary>
        /// <value>A human readable name.</value>
        [DataMember(Name="commonName", EmitDefaultValue=false)]
        public string CommonName { get; set; }

        /// <summary>
        /// The distance of the place from its search point, if this is the result              of a geographical search, otherwise zero.
        /// </summary>
        /// <value>The distance of the place from its search point, if this is the result              of a geographical search, otherwise zero.</value>
        [DataMember(Name="distance", EmitDefaultValue=false)]
        public double? Distance { get; set; }

        /// <summary>
        /// The type of Place. See /Place/Meta/placeTypes for possible values.
        /// </summary>
        /// <value>The type of Place. See /Place/Meta/placeTypes for possible values.</value>
        [DataMember(Name="placeType", EmitDefaultValue=false)]
        public string PlaceType { get; set; }

        /// <summary>
        /// A bag of additional key/value pairs with extra information about this place.
        /// </summary>
        /// <value>A bag of additional key/value pairs with extra information about this place.</value>
        [DataMember(Name="additionalProperties", EmitDefaultValue=false)]
        public List<TflApiPresentationEntitiesAdditionalProperties> AdditionalProperties { get; set; }

        /// <summary>
        /// Gets or Sets Children
        /// </summary>
        [DataMember(Name="children", EmitDefaultValue=false)]
        public List<TflApiPresentationEntitiesPlace> Children { get; set; }

        /// <summary>
        /// Gets or Sets ChildrenUrls
        /// </summary>
        [DataMember(Name="childrenUrls", EmitDefaultValue=false)]
        public List<string> ChildrenUrls { get; set; }

        /// <summary>
        /// WGS84 latitude of the location.
        /// </summary>
        /// <value>WGS84 latitude of the location.</value>
        [DataMember(Name="lat", EmitDefaultValue=false)]
        public double? Lat { get; set; }

        /// <summary>
        /// WGS84 longitude of the location.
        /// </summary>
        /// <value>WGS84 longitude of the location.</value>
        [DataMember(Name="lon", EmitDefaultValue=false)]
        public double? Lon { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TflApiPresentationEntitiesPlace {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  CommonName: ").Append(CommonName).Append("\n");
            sb.Append("  Distance: ").Append(Distance).Append("\n");
            sb.Append("  PlaceType: ").Append(PlaceType).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("  Children: ").Append(Children).Append("\n");
            sb.Append("  ChildrenUrls: ").Append(ChildrenUrls).Append("\n");
            sb.Append("  Lat: ").Append(Lat).Append("\n");
            sb.Append("  Lon: ").Append(Lon).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TflApiPresentationEntitiesPlace);
        }

        /// <summary>
        /// Returns true if TflApiPresentationEntitiesPlace instances are equal
        /// </summary>
        /// <param name="input">Instance of TflApiPresentationEntitiesPlace to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TflApiPresentationEntitiesPlace input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.CommonName == input.CommonName ||
                    (this.CommonName != null &&
                    this.CommonName.Equals(input.CommonName))
                ) && 
                (
                    this.Distance == input.Distance ||
                    (this.Distance != null &&
                    this.Distance.Equals(input.Distance))
                ) && 
                (
                    this.PlaceType == input.PlaceType ||
                    (this.PlaceType != null &&
                    this.PlaceType.Equals(input.PlaceType))
                ) && 
                (
                    this.AdditionalProperties == input.AdditionalProperties ||
                    this.AdditionalProperties != null &&
                    this.AdditionalProperties.SequenceEqual(input.AdditionalProperties)
                ) && 
                (
                    this.Children == input.Children ||
                    this.Children != null &&
                    this.Children.SequenceEqual(input.Children)
                ) && 
                (
                    this.ChildrenUrls == input.ChildrenUrls ||
                    this.ChildrenUrls != null &&
                    this.ChildrenUrls.SequenceEqual(input.ChildrenUrls)
                ) && 
                (
                    this.Lat == input.Lat ||
                    (this.Lat != null &&
                    this.Lat.Equals(input.Lat))
                ) && 
                (
                    this.Lon == input.Lon ||
                    (this.Lon != null &&
                    this.Lon.Equals(input.Lon))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.CommonName != null)
                    hashCode = hashCode * 59 + this.CommonName.GetHashCode();
                if (this.Distance != null)
                    hashCode = hashCode * 59 + this.Distance.GetHashCode();
                if (this.PlaceType != null)
                    hashCode = hashCode * 59 + this.PlaceType.GetHashCode();
                if (this.AdditionalProperties != null)
                    hashCode = hashCode * 59 + this.AdditionalProperties.GetHashCode();
                if (this.Children != null)
                    hashCode = hashCode * 59 + this.Children.GetHashCode();
                if (this.ChildrenUrls != null)
                    hashCode = hashCode * 59 + this.ChildrenUrls.GetHashCode();
                if (this.Lat != null)
                    hashCode = hashCode * 59 + this.Lat.GetHashCode();
                if (this.Lon != null)
                    hashCode = hashCode * 59 + this.Lon.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
