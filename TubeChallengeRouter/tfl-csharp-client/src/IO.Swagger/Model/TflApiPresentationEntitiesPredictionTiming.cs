/* 
 * Transport for London Unified API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TflApiPresentationEntitiesPredictionTiming
    /// </summary>
    [DataContract]
    public partial class TflApiPresentationEntitiesPredictionTiming :  IEquatable<TflApiPresentationEntitiesPredictionTiming>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TflApiPresentationEntitiesPredictionTiming" /> class.
        /// </summary>
        /// <param name="countdownServerAdjustment">countdownServerAdjustment.</param>
        /// <param name="source">source.</param>
        /// <param name="insert">insert.</param>
        /// <param name="read">read.</param>
        /// <param name="sent">sent.</param>
        /// <param name="received">received.</param>
        public TflApiPresentationEntitiesPredictionTiming(string countdownServerAdjustment = default(string), DateTime? source = default(DateTime?), DateTime? insert = default(DateTime?), DateTime? read = default(DateTime?), DateTime? sent = default(DateTime?), DateTime? received = default(DateTime?))
        {
            this.CountdownServerAdjustment = countdownServerAdjustment;
            this.Source = source;
            this.Insert = insert;
            this.Read = read;
            this.Sent = sent;
            this.Received = received;
        }
        
        /// <summary>
        /// Gets or Sets CountdownServerAdjustment
        /// </summary>
        [DataMember(Name="countdownServerAdjustment", EmitDefaultValue=false)]
        public string CountdownServerAdjustment { get; set; }

        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name="source", EmitDefaultValue=false)]
        public DateTime? Source { get; set; }

        /// <summary>
        /// Gets or Sets Insert
        /// </summary>
        [DataMember(Name="insert", EmitDefaultValue=false)]
        public DateTime? Insert { get; set; }

        /// <summary>
        /// Gets or Sets Read
        /// </summary>
        [DataMember(Name="read", EmitDefaultValue=false)]
        public DateTime? Read { get; set; }

        /// <summary>
        /// Gets or Sets Sent
        /// </summary>
        [DataMember(Name="sent", EmitDefaultValue=false)]
        public DateTime? Sent { get; set; }

        /// <summary>
        /// Gets or Sets Received
        /// </summary>
        [DataMember(Name="received", EmitDefaultValue=false)]
        public DateTime? Received { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TflApiPresentationEntitiesPredictionTiming {\n");
            sb.Append("  CountdownServerAdjustment: ").Append(CountdownServerAdjustment).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  Insert: ").Append(Insert).Append("\n");
            sb.Append("  Read: ").Append(Read).Append("\n");
            sb.Append("  Sent: ").Append(Sent).Append("\n");
            sb.Append("  Received: ").Append(Received).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TflApiPresentationEntitiesPredictionTiming);
        }

        /// <summary>
        /// Returns true if TflApiPresentationEntitiesPredictionTiming instances are equal
        /// </summary>
        /// <param name="input">Instance of TflApiPresentationEntitiesPredictionTiming to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TflApiPresentationEntitiesPredictionTiming input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CountdownServerAdjustment == input.CountdownServerAdjustment ||
                    (this.CountdownServerAdjustment != null &&
                    this.CountdownServerAdjustment.Equals(input.CountdownServerAdjustment))
                ) && 
                (
                    this.Source == input.Source ||
                    (this.Source != null &&
                    this.Source.Equals(input.Source))
                ) && 
                (
                    this.Insert == input.Insert ||
                    (this.Insert != null &&
                    this.Insert.Equals(input.Insert))
                ) && 
                (
                    this.Read == input.Read ||
                    (this.Read != null &&
                    this.Read.Equals(input.Read))
                ) && 
                (
                    this.Sent == input.Sent ||
                    (this.Sent != null &&
                    this.Sent.Equals(input.Sent))
                ) && 
                (
                    this.Received == input.Received ||
                    (this.Received != null &&
                    this.Received.Equals(input.Received))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CountdownServerAdjustment != null)
                    hashCode = hashCode * 59 + this.CountdownServerAdjustment.GetHashCode();
                if (this.Source != null)
                    hashCode = hashCode * 59 + this.Source.GetHashCode();
                if (this.Insert != null)
                    hashCode = hashCode * 59 + this.Insert.GetHashCode();
                if (this.Read != null)
                    hashCode = hashCode * 59 + this.Read.GetHashCode();
                if (this.Sent != null)
                    hashCode = hashCode * 59 + this.Sent.GetHashCode();
                if (this.Received != null)
                    hashCode = hashCode * 59 + this.Received.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
