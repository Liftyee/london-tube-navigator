/* 
 * Transport for London Unified API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TflApiPresentationEntitiesRoadProject
    /// </summary>
    [DataContract]
    public partial class TflApiPresentationEntitiesRoadProject :  IEquatable<TflApiPresentationEntitiesRoadProject>, IValidatableObject
    {
        /// <summary>
        /// Defines Phase
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PhaseEnum
        {
            
            /// <summary>
            /// Enum Unscoped for value: Unscoped
            /// </summary>
            [EnumMember(Value = "Unscoped")]
            Unscoped = 1,
            
            /// <summary>
            /// Enum Concept for value: Concept
            /// </summary>
            [EnumMember(Value = "Concept")]
            Concept = 2,
            
            /// <summary>
            /// Enum ConsultationEnded for value: ConsultationEnded
            /// </summary>
            [EnumMember(Value = "ConsultationEnded")]
            ConsultationEnded = 3,
            
            /// <summary>
            /// Enum Consultation for value: Consultation
            /// </summary>
            [EnumMember(Value = "Consultation")]
            Consultation = 4,
            
            /// <summary>
            /// Enum Construction for value: Construction
            /// </summary>
            [EnumMember(Value = "Construction")]
            Construction = 5,
            
            /// <summary>
            /// Enum Complete for value: Complete
            /// </summary>
            [EnumMember(Value = "Complete")]
            Complete = 6
        }

        /// <summary>
        /// Gets or Sets Phase
        /// </summary>
        [DataMember(Name="phase", EmitDefaultValue=false)]
        public PhaseEnum? Phase { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TflApiPresentationEntitiesRoadProject" /> class.
        /// </summary>
        /// <param name="projectId">projectId.</param>
        /// <param name="schemeName">schemeName.</param>
        /// <param name="projectName">projectName.</param>
        /// <param name="projectDescription">projectDescription.</param>
        /// <param name="projectPageUrl">projectPageUrl.</param>
        /// <param name="consultationPageUrl">consultationPageUrl.</param>
        /// <param name="consultationStartDate">consultationStartDate.</param>
        /// <param name="consultationEndDate">consultationEndDate.</param>
        /// <param name="constructionStartDate">constructionStartDate.</param>
        /// <param name="constructionEndDate">constructionEndDate.</param>
        /// <param name="boroughsBenefited">boroughsBenefited.</param>
        /// <param name="cycleSuperhighwayId">cycleSuperhighwayId.</param>
        /// <param name="phase">phase.</param>
        /// <param name="contactName">contactName.</param>
        /// <param name="contactEmail">contactEmail.</param>
        /// <param name="externalPageUrl">externalPageUrl.</param>
        /// <param name="projectSummaryPageUrl">projectSummaryPageUrl.</param>
        public TflApiPresentationEntitiesRoadProject(string projectId = default(string), string schemeName = default(string), string projectName = default(string), string projectDescription = default(string), string projectPageUrl = default(string), string consultationPageUrl = default(string), DateTime? consultationStartDate = default(DateTime?), DateTime? consultationEndDate = default(DateTime?), DateTime? constructionStartDate = default(DateTime?), DateTime? constructionEndDate = default(DateTime?), List<string> boroughsBenefited = default(List<string>), string cycleSuperhighwayId = default(string), PhaseEnum? phase = default(PhaseEnum?), string contactName = default(string), string contactEmail = default(string), string externalPageUrl = default(string), string projectSummaryPageUrl = default(string))
        {
            this.ProjectId = projectId;
            this.SchemeName = schemeName;
            this.ProjectName = projectName;
            this.ProjectDescription = projectDescription;
            this.ProjectPageUrl = projectPageUrl;
            this.ConsultationPageUrl = consultationPageUrl;
            this.ConsultationStartDate = consultationStartDate;
            this.ConsultationEndDate = consultationEndDate;
            this.ConstructionStartDate = constructionStartDate;
            this.ConstructionEndDate = constructionEndDate;
            this.BoroughsBenefited = boroughsBenefited;
            this.CycleSuperhighwayId = cycleSuperhighwayId;
            this.Phase = phase;
            this.ContactName = contactName;
            this.ContactEmail = contactEmail;
            this.ExternalPageUrl = externalPageUrl;
            this.ProjectSummaryPageUrl = projectSummaryPageUrl;
        }
        
        /// <summary>
        /// Gets or Sets ProjectId
        /// </summary>
        [DataMember(Name="projectId", EmitDefaultValue=false)]
        public string ProjectId { get; set; }

        /// <summary>
        /// Gets or Sets SchemeName
        /// </summary>
        [DataMember(Name="schemeName", EmitDefaultValue=false)]
        public string SchemeName { get; set; }

        /// <summary>
        /// Gets or Sets ProjectName
        /// </summary>
        [DataMember(Name="projectName", EmitDefaultValue=false)]
        public string ProjectName { get; set; }

        /// <summary>
        /// Gets or Sets ProjectDescription
        /// </summary>
        [DataMember(Name="projectDescription", EmitDefaultValue=false)]
        public string ProjectDescription { get; set; }

        /// <summary>
        /// Gets or Sets ProjectPageUrl
        /// </summary>
        [DataMember(Name="projectPageUrl", EmitDefaultValue=false)]
        public string ProjectPageUrl { get; set; }

        /// <summary>
        /// Gets or Sets ConsultationPageUrl
        /// </summary>
        [DataMember(Name="consultationPageUrl", EmitDefaultValue=false)]
        public string ConsultationPageUrl { get; set; }

        /// <summary>
        /// Gets or Sets ConsultationStartDate
        /// </summary>
        [DataMember(Name="consultationStartDate", EmitDefaultValue=false)]
        public DateTime? ConsultationStartDate { get; set; }

        /// <summary>
        /// Gets or Sets ConsultationEndDate
        /// </summary>
        [DataMember(Name="consultationEndDate", EmitDefaultValue=false)]
        public DateTime? ConsultationEndDate { get; set; }

        /// <summary>
        /// Gets or Sets ConstructionStartDate
        /// </summary>
        [DataMember(Name="constructionStartDate", EmitDefaultValue=false)]
        public DateTime? ConstructionStartDate { get; set; }

        /// <summary>
        /// Gets or Sets ConstructionEndDate
        /// </summary>
        [DataMember(Name="constructionEndDate", EmitDefaultValue=false)]
        public DateTime? ConstructionEndDate { get; set; }

        /// <summary>
        /// Gets or Sets BoroughsBenefited
        /// </summary>
        [DataMember(Name="boroughsBenefited", EmitDefaultValue=false)]
        public List<string> BoroughsBenefited { get; set; }

        /// <summary>
        /// Gets or Sets CycleSuperhighwayId
        /// </summary>
        [DataMember(Name="cycleSuperhighwayId", EmitDefaultValue=false)]
        public string CycleSuperhighwayId { get; set; }


        /// <summary>
        /// Gets or Sets ContactName
        /// </summary>
        [DataMember(Name="contactName", EmitDefaultValue=false)]
        public string ContactName { get; set; }

        /// <summary>
        /// Gets or Sets ContactEmail
        /// </summary>
        [DataMember(Name="contactEmail", EmitDefaultValue=false)]
        public string ContactEmail { get; set; }

        /// <summary>
        /// Gets or Sets ExternalPageUrl
        /// </summary>
        [DataMember(Name="externalPageUrl", EmitDefaultValue=false)]
        public string ExternalPageUrl { get; set; }

        /// <summary>
        /// Gets or Sets ProjectSummaryPageUrl
        /// </summary>
        [DataMember(Name="projectSummaryPageUrl", EmitDefaultValue=false)]
        public string ProjectSummaryPageUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TflApiPresentationEntitiesRoadProject {\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  SchemeName: ").Append(SchemeName).Append("\n");
            sb.Append("  ProjectName: ").Append(ProjectName).Append("\n");
            sb.Append("  ProjectDescription: ").Append(ProjectDescription).Append("\n");
            sb.Append("  ProjectPageUrl: ").Append(ProjectPageUrl).Append("\n");
            sb.Append("  ConsultationPageUrl: ").Append(ConsultationPageUrl).Append("\n");
            sb.Append("  ConsultationStartDate: ").Append(ConsultationStartDate).Append("\n");
            sb.Append("  ConsultationEndDate: ").Append(ConsultationEndDate).Append("\n");
            sb.Append("  ConstructionStartDate: ").Append(ConstructionStartDate).Append("\n");
            sb.Append("  ConstructionEndDate: ").Append(ConstructionEndDate).Append("\n");
            sb.Append("  BoroughsBenefited: ").Append(BoroughsBenefited).Append("\n");
            sb.Append("  CycleSuperhighwayId: ").Append(CycleSuperhighwayId).Append("\n");
            sb.Append("  Phase: ").Append(Phase).Append("\n");
            sb.Append("  ContactName: ").Append(ContactName).Append("\n");
            sb.Append("  ContactEmail: ").Append(ContactEmail).Append("\n");
            sb.Append("  ExternalPageUrl: ").Append(ExternalPageUrl).Append("\n");
            sb.Append("  ProjectSummaryPageUrl: ").Append(ProjectSummaryPageUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TflApiPresentationEntitiesRoadProject);
        }

        /// <summary>
        /// Returns true if TflApiPresentationEntitiesRoadProject instances are equal
        /// </summary>
        /// <param name="input">Instance of TflApiPresentationEntitiesRoadProject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TflApiPresentationEntitiesRoadProject input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ProjectId == input.ProjectId ||
                    (this.ProjectId != null &&
                    this.ProjectId.Equals(input.ProjectId))
                ) && 
                (
                    this.SchemeName == input.SchemeName ||
                    (this.SchemeName != null &&
                    this.SchemeName.Equals(input.SchemeName))
                ) && 
                (
                    this.ProjectName == input.ProjectName ||
                    (this.ProjectName != null &&
                    this.ProjectName.Equals(input.ProjectName))
                ) && 
                (
                    this.ProjectDescription == input.ProjectDescription ||
                    (this.ProjectDescription != null &&
                    this.ProjectDescription.Equals(input.ProjectDescription))
                ) && 
                (
                    this.ProjectPageUrl == input.ProjectPageUrl ||
                    (this.ProjectPageUrl != null &&
                    this.ProjectPageUrl.Equals(input.ProjectPageUrl))
                ) && 
                (
                    this.ConsultationPageUrl == input.ConsultationPageUrl ||
                    (this.ConsultationPageUrl != null &&
                    this.ConsultationPageUrl.Equals(input.ConsultationPageUrl))
                ) && 
                (
                    this.ConsultationStartDate == input.ConsultationStartDate ||
                    (this.ConsultationStartDate != null &&
                    this.ConsultationStartDate.Equals(input.ConsultationStartDate))
                ) && 
                (
                    this.ConsultationEndDate == input.ConsultationEndDate ||
                    (this.ConsultationEndDate != null &&
                    this.ConsultationEndDate.Equals(input.ConsultationEndDate))
                ) && 
                (
                    this.ConstructionStartDate == input.ConstructionStartDate ||
                    (this.ConstructionStartDate != null &&
                    this.ConstructionStartDate.Equals(input.ConstructionStartDate))
                ) && 
                (
                    this.ConstructionEndDate == input.ConstructionEndDate ||
                    (this.ConstructionEndDate != null &&
                    this.ConstructionEndDate.Equals(input.ConstructionEndDate))
                ) && 
                (
                    this.BoroughsBenefited == input.BoroughsBenefited ||
                    this.BoroughsBenefited != null &&
                    this.BoroughsBenefited.SequenceEqual(input.BoroughsBenefited)
                ) && 
                (
                    this.CycleSuperhighwayId == input.CycleSuperhighwayId ||
                    (this.CycleSuperhighwayId != null &&
                    this.CycleSuperhighwayId.Equals(input.CycleSuperhighwayId))
                ) && 
                (
                    this.Phase == input.Phase ||
                    (this.Phase != null &&
                    this.Phase.Equals(input.Phase))
                ) && 
                (
                    this.ContactName == input.ContactName ||
                    (this.ContactName != null &&
                    this.ContactName.Equals(input.ContactName))
                ) && 
                (
                    this.ContactEmail == input.ContactEmail ||
                    (this.ContactEmail != null &&
                    this.ContactEmail.Equals(input.ContactEmail))
                ) && 
                (
                    this.ExternalPageUrl == input.ExternalPageUrl ||
                    (this.ExternalPageUrl != null &&
                    this.ExternalPageUrl.Equals(input.ExternalPageUrl))
                ) && 
                (
                    this.ProjectSummaryPageUrl == input.ProjectSummaryPageUrl ||
                    (this.ProjectSummaryPageUrl != null &&
                    this.ProjectSummaryPageUrl.Equals(input.ProjectSummaryPageUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ProjectId != null)
                    hashCode = hashCode * 59 + this.ProjectId.GetHashCode();
                if (this.SchemeName != null)
                    hashCode = hashCode * 59 + this.SchemeName.GetHashCode();
                if (this.ProjectName != null)
                    hashCode = hashCode * 59 + this.ProjectName.GetHashCode();
                if (this.ProjectDescription != null)
                    hashCode = hashCode * 59 + this.ProjectDescription.GetHashCode();
                if (this.ProjectPageUrl != null)
                    hashCode = hashCode * 59 + this.ProjectPageUrl.GetHashCode();
                if (this.ConsultationPageUrl != null)
                    hashCode = hashCode * 59 + this.ConsultationPageUrl.GetHashCode();
                if (this.ConsultationStartDate != null)
                    hashCode = hashCode * 59 + this.ConsultationStartDate.GetHashCode();
                if (this.ConsultationEndDate != null)
                    hashCode = hashCode * 59 + this.ConsultationEndDate.GetHashCode();
                if (this.ConstructionStartDate != null)
                    hashCode = hashCode * 59 + this.ConstructionStartDate.GetHashCode();
                if (this.ConstructionEndDate != null)
                    hashCode = hashCode * 59 + this.ConstructionEndDate.GetHashCode();
                if (this.BoroughsBenefited != null)
                    hashCode = hashCode * 59 + this.BoroughsBenefited.GetHashCode();
                if (this.CycleSuperhighwayId != null)
                    hashCode = hashCode * 59 + this.CycleSuperhighwayId.GetHashCode();
                if (this.Phase != null)
                    hashCode = hashCode * 59 + this.Phase.GetHashCode();
                if (this.ContactName != null)
                    hashCode = hashCode * 59 + this.ContactName.GetHashCode();
                if (this.ContactEmail != null)
                    hashCode = hashCode * 59 + this.ContactEmail.GetHashCode();
                if (this.ExternalPageUrl != null)
                    hashCode = hashCode * 59 + this.ExternalPageUrl.GetHashCode();
                if (this.ProjectSummaryPageUrl != null)
                    hashCode = hashCode * 59 + this.ProjectSummaryPageUrl.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
