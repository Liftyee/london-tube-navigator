/* 
 * Transport for London Unified API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TflApiPresentationEntitiesStopPointRouteSection
    /// </summary>
    [DataContract]
    public partial class TflApiPresentationEntitiesStopPointRouteSection :  IEquatable<TflApiPresentationEntitiesStopPointRouteSection>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TflApiPresentationEntitiesStopPointRouteSection" /> class.
        /// </summary>
        /// <param name="naptanId">naptanId.</param>
        /// <param name="lineId">lineId.</param>
        /// <param name="mode">mode.</param>
        /// <param name="validFrom">validFrom.</param>
        /// <param name="validTo">validTo.</param>
        /// <param name="direction">direction.</param>
        /// <param name="routeSectionName">routeSectionName.</param>
        /// <param name="lineString">lineString.</param>
        /// <param name="isActive">isActive.</param>
        /// <param name="serviceType">serviceType.</param>
        /// <param name="vehicleDestinationText">vehicleDestinationText.</param>
        /// <param name="destinationName">destinationName.</param>
        public TflApiPresentationEntitiesStopPointRouteSection(string naptanId = default(string), string lineId = default(string), string mode = default(string), DateTime? validFrom = default(DateTime?), DateTime? validTo = default(DateTime?), string direction = default(string), string routeSectionName = default(string), string lineString = default(string), bool? isActive = default(bool?), string serviceType = default(string), string vehicleDestinationText = default(string), string destinationName = default(string))
        {
            this.NaptanId = naptanId;
            this.LineId = lineId;
            this.Mode = mode;
            this.ValidFrom = validFrom;
            this.ValidTo = validTo;
            this.Direction = direction;
            this.RouteSectionName = routeSectionName;
            this.LineString = lineString;
            this.IsActive = isActive;
            this.ServiceType = serviceType;
            this.VehicleDestinationText = vehicleDestinationText;
            this.DestinationName = destinationName;
        }
        
        /// <summary>
        /// Gets or Sets NaptanId
        /// </summary>
        [DataMember(Name="naptanId", EmitDefaultValue=false)]
        public string NaptanId { get; set; }

        /// <summary>
        /// Gets or Sets LineId
        /// </summary>
        [DataMember(Name="lineId", EmitDefaultValue=false)]
        public string LineId { get; set; }

        /// <summary>
        /// Gets or Sets Mode
        /// </summary>
        [DataMember(Name="mode", EmitDefaultValue=false)]
        public string Mode { get; set; }

        /// <summary>
        /// Gets or Sets ValidFrom
        /// </summary>
        [DataMember(Name="validFrom", EmitDefaultValue=false)]
        public DateTime? ValidFrom { get; set; }

        /// <summary>
        /// Gets or Sets ValidTo
        /// </summary>
        [DataMember(Name="validTo", EmitDefaultValue=false)]
        public DateTime? ValidTo { get; set; }

        /// <summary>
        /// Gets or Sets Direction
        /// </summary>
        [DataMember(Name="direction", EmitDefaultValue=false)]
        public string Direction { get; set; }

        /// <summary>
        /// Gets or Sets RouteSectionName
        /// </summary>
        [DataMember(Name="routeSectionName", EmitDefaultValue=false)]
        public string RouteSectionName { get; set; }

        /// <summary>
        /// Gets or Sets LineString
        /// </summary>
        [DataMember(Name="lineString", EmitDefaultValue=false)]
        public string LineString { get; set; }

        /// <summary>
        /// Gets or Sets IsActive
        /// </summary>
        [DataMember(Name="isActive", EmitDefaultValue=false)]
        public bool? IsActive { get; set; }

        /// <summary>
        /// Gets or Sets ServiceType
        /// </summary>
        [DataMember(Name="serviceType", EmitDefaultValue=false)]
        public string ServiceType { get; set; }

        /// <summary>
        /// Gets or Sets VehicleDestinationText
        /// </summary>
        [DataMember(Name="vehicleDestinationText", EmitDefaultValue=false)]
        public string VehicleDestinationText { get; set; }

        /// <summary>
        /// Gets or Sets DestinationName
        /// </summary>
        [DataMember(Name="destinationName", EmitDefaultValue=false)]
        public string DestinationName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TflApiPresentationEntitiesStopPointRouteSection {\n");
            sb.Append("  NaptanId: ").Append(NaptanId).Append("\n");
            sb.Append("  LineId: ").Append(LineId).Append("\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  ValidFrom: ").Append(ValidFrom).Append("\n");
            sb.Append("  ValidTo: ").Append(ValidTo).Append("\n");
            sb.Append("  Direction: ").Append(Direction).Append("\n");
            sb.Append("  RouteSectionName: ").Append(RouteSectionName).Append("\n");
            sb.Append("  LineString: ").Append(LineString).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  ServiceType: ").Append(ServiceType).Append("\n");
            sb.Append("  VehicleDestinationText: ").Append(VehicleDestinationText).Append("\n");
            sb.Append("  DestinationName: ").Append(DestinationName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TflApiPresentationEntitiesStopPointRouteSection);
        }

        /// <summary>
        /// Returns true if TflApiPresentationEntitiesStopPointRouteSection instances are equal
        /// </summary>
        /// <param name="input">Instance of TflApiPresentationEntitiesStopPointRouteSection to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TflApiPresentationEntitiesStopPointRouteSection input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.NaptanId == input.NaptanId ||
                    (this.NaptanId != null &&
                    this.NaptanId.Equals(input.NaptanId))
                ) && 
                (
                    this.LineId == input.LineId ||
                    (this.LineId != null &&
                    this.LineId.Equals(input.LineId))
                ) && 
                (
                    this.Mode == input.Mode ||
                    (this.Mode != null &&
                    this.Mode.Equals(input.Mode))
                ) && 
                (
                    this.ValidFrom == input.ValidFrom ||
                    (this.ValidFrom != null &&
                    this.ValidFrom.Equals(input.ValidFrom))
                ) && 
                (
                    this.ValidTo == input.ValidTo ||
                    (this.ValidTo != null &&
                    this.ValidTo.Equals(input.ValidTo))
                ) && 
                (
                    this.Direction == input.Direction ||
                    (this.Direction != null &&
                    this.Direction.Equals(input.Direction))
                ) && 
                (
                    this.RouteSectionName == input.RouteSectionName ||
                    (this.RouteSectionName != null &&
                    this.RouteSectionName.Equals(input.RouteSectionName))
                ) && 
                (
                    this.LineString == input.LineString ||
                    (this.LineString != null &&
                    this.LineString.Equals(input.LineString))
                ) && 
                (
                    this.IsActive == input.IsActive ||
                    (this.IsActive != null &&
                    this.IsActive.Equals(input.IsActive))
                ) && 
                (
                    this.ServiceType == input.ServiceType ||
                    (this.ServiceType != null &&
                    this.ServiceType.Equals(input.ServiceType))
                ) && 
                (
                    this.VehicleDestinationText == input.VehicleDestinationText ||
                    (this.VehicleDestinationText != null &&
                    this.VehicleDestinationText.Equals(input.VehicleDestinationText))
                ) && 
                (
                    this.DestinationName == input.DestinationName ||
                    (this.DestinationName != null &&
                    this.DestinationName.Equals(input.DestinationName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NaptanId != null)
                    hashCode = hashCode * 59 + this.NaptanId.GetHashCode();
                if (this.LineId != null)
                    hashCode = hashCode * 59 + this.LineId.GetHashCode();
                if (this.Mode != null)
                    hashCode = hashCode * 59 + this.Mode.GetHashCode();
                if (this.ValidFrom != null)
                    hashCode = hashCode * 59 + this.ValidFrom.GetHashCode();
                if (this.ValidTo != null)
                    hashCode = hashCode * 59 + this.ValidTo.GetHashCode();
                if (this.Direction != null)
                    hashCode = hashCode * 59 + this.Direction.GetHashCode();
                if (this.RouteSectionName != null)
                    hashCode = hashCode * 59 + this.RouteSectionName.GetHashCode();
                if (this.LineString != null)
                    hashCode = hashCode * 59 + this.LineString.GetHashCode();
                if (this.IsActive != null)
                    hashCode = hashCode * 59 + this.IsActive.GetHashCode();
                if (this.ServiceType != null)
                    hashCode = hashCode * 59 + this.ServiceType.GetHashCode();
                if (this.VehicleDestinationText != null)
                    hashCode = hashCode * 59 + this.VehicleDestinationText.GetHashCode();
                if (this.DestinationName != null)
                    hashCode = hashCode * 59 + this.DestinationName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
