/* 
 * Transport for London Unified API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TflApiPresentationEntitiesStreet
    /// </summary>
    [DataContract]
    public partial class TflApiPresentationEntitiesStreet :  IEquatable<TflApiPresentationEntitiesStreet>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TflApiPresentationEntitiesStreet" /> class.
        /// </summary>
        /// <param name="name">Street name.</param>
        /// <param name="closure">Type of road closure. Some example values:              Open &#x3D; road is open, not blocked, not closed, not restricted. It maybe that the disruption has been moved out of the carriageway.              Partial Closure &#x3D; road is partially blocked, closed or restricted.               Full Closure &#x3D; road is fully blocked or closed..</param>
        /// <param name="directions">The direction of the disruption on the street. Some example values:              All Directions              All Approaches              Clockwise              Anti-Clockwise              Northbound              Eastbound              Southbound              Westbound              Both Directions.</param>
        /// <param name="segments">Geographic description of the sections of this street that are affected..</param>
        /// <param name="sourceSystemId">The ID from the source system of the disruption that this street belongs to..</param>
        /// <param name="sourceSystemKey">The key of the source system of the disruption that this street belongs to..</param>
        public TflApiPresentationEntitiesStreet(string name = default(string), string closure = default(string), string directions = default(string), List<TflApiPresentationEntitiesStreetSegment> segments = default(List<TflApiPresentationEntitiesStreetSegment>), long? sourceSystemId = default(long?), string sourceSystemKey = default(string))
        {
            this.Name = name;
            this.Closure = closure;
            this.Directions = directions;
            this.Segments = segments;
            this.SourceSystemId = sourceSystemId;
            this.SourceSystemKey = sourceSystemKey;
        }
        
        /// <summary>
        /// Street name
        /// </summary>
        /// <value>Street name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Type of road closure. Some example values:              Open &#x3D; road is open, not blocked, not closed, not restricted. It maybe that the disruption has been moved out of the carriageway.              Partial Closure &#x3D; road is partially blocked, closed or restricted.               Full Closure &#x3D; road is fully blocked or closed.
        /// </summary>
        /// <value>Type of road closure. Some example values:              Open &#x3D; road is open, not blocked, not closed, not restricted. It maybe that the disruption has been moved out of the carriageway.              Partial Closure &#x3D; road is partially blocked, closed or restricted.               Full Closure &#x3D; road is fully blocked or closed.</value>
        [DataMember(Name="closure", EmitDefaultValue=false)]
        public string Closure { get; set; }

        /// <summary>
        /// The direction of the disruption on the street. Some example values:              All Directions              All Approaches              Clockwise              Anti-Clockwise              Northbound              Eastbound              Southbound              Westbound              Both Directions
        /// </summary>
        /// <value>The direction of the disruption on the street. Some example values:              All Directions              All Approaches              Clockwise              Anti-Clockwise              Northbound              Eastbound              Southbound              Westbound              Both Directions</value>
        [DataMember(Name="directions", EmitDefaultValue=false)]
        public string Directions { get; set; }

        /// <summary>
        /// Geographic description of the sections of this street that are affected.
        /// </summary>
        /// <value>Geographic description of the sections of this street that are affected.</value>
        [DataMember(Name="segments", EmitDefaultValue=false)]
        public List<TflApiPresentationEntitiesStreetSegment> Segments { get; set; }

        /// <summary>
        /// The ID from the source system of the disruption that this street belongs to.
        /// </summary>
        /// <value>The ID from the source system of the disruption that this street belongs to.</value>
        [DataMember(Name="sourceSystemId", EmitDefaultValue=false)]
        public long? SourceSystemId { get; set; }

        /// <summary>
        /// The key of the source system of the disruption that this street belongs to.
        /// </summary>
        /// <value>The key of the source system of the disruption that this street belongs to.</value>
        [DataMember(Name="sourceSystemKey", EmitDefaultValue=false)]
        public string SourceSystemKey { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TflApiPresentationEntitiesStreet {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Closure: ").Append(Closure).Append("\n");
            sb.Append("  Directions: ").Append(Directions).Append("\n");
            sb.Append("  Segments: ").Append(Segments).Append("\n");
            sb.Append("  SourceSystemId: ").Append(SourceSystemId).Append("\n");
            sb.Append("  SourceSystemKey: ").Append(SourceSystemKey).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TflApiPresentationEntitiesStreet);
        }

        /// <summary>
        /// Returns true if TflApiPresentationEntitiesStreet instances are equal
        /// </summary>
        /// <param name="input">Instance of TflApiPresentationEntitiesStreet to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TflApiPresentationEntitiesStreet input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Closure == input.Closure ||
                    (this.Closure != null &&
                    this.Closure.Equals(input.Closure))
                ) && 
                (
                    this.Directions == input.Directions ||
                    (this.Directions != null &&
                    this.Directions.Equals(input.Directions))
                ) && 
                (
                    this.Segments == input.Segments ||
                    this.Segments != null &&
                    this.Segments.SequenceEqual(input.Segments)
                ) && 
                (
                    this.SourceSystemId == input.SourceSystemId ||
                    (this.SourceSystemId != null &&
                    this.SourceSystemId.Equals(input.SourceSystemId))
                ) && 
                (
                    this.SourceSystemKey == input.SourceSystemKey ||
                    (this.SourceSystemKey != null &&
                    this.SourceSystemKey.Equals(input.SourceSystemKey))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Closure != null)
                    hashCode = hashCode * 59 + this.Closure.GetHashCode();
                if (this.Directions != null)
                    hashCode = hashCode * 59 + this.Directions.GetHashCode();
                if (this.Segments != null)
                    hashCode = hashCode * 59 + this.Segments.GetHashCode();
                if (this.SourceSystemId != null)
                    hashCode = hashCode * 59 + this.SourceSystemId.GetHashCode();
                if (this.SourceSystemKey != null)
                    hashCode = hashCode * 59 + this.SourceSystemKey.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
